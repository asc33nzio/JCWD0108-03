{"ast":null,"code":"'use client';\n\nimport { sizes_default } from \"./chunk-QH74K4BV.mjs\";\nimport { runIfFn } from \"./chunk-RQ25AHBB.mjs\"; // src/components/avatar.ts\n\nimport { avatarAnatomy as parts } from \"@chakra-ui/anatomy\";\nimport { createMultiStyleConfigHelpers, cssVar, defineStyle } from \"@chakra-ui/styled-system\";\nimport { isDark, randomColor } from \"@chakra-ui/theme-tools\";\nvar {\n  definePartsStyle,\n  defineMultiStyleConfig\n} = createMultiStyleConfigHelpers(parts.keys);\nvar $border = cssVar(\"avatar-border-color\");\nvar $bg = cssVar(\"avatar-bg\");\nvar $fs = cssVar(\"avatar-font-size\");\nvar $size = cssVar(\"avatar-size\");\nvar baseStyleBadge = defineStyle({\n  borderRadius: \"full\",\n  border: \"0.2em solid\",\n  borderColor: $border.reference,\n  [$border.variable]: \"white\",\n  _dark: {\n    [$border.variable]: \"colors.gray.800\"\n  }\n});\nvar baseStyleExcessLabel = defineStyle({\n  bg: $bg.reference,\n  fontSize: $fs.reference,\n  width: $size.reference,\n  height: $size.reference,\n  lineHeight: \"1\",\n  [$bg.variable]: \"colors.gray.200\",\n  _dark: {\n    [$bg.variable]: \"colors.whiteAlpha.400\"\n  }\n});\nvar baseStyleContainer = defineStyle(props => {\n  const {\n    name,\n    theme\n  } = props;\n  const bg = name ? randomColor({\n    string: name\n  }) : \"colors.gray.400\";\n  const isBgDark = isDark(bg)(theme);\n  let color = \"white\";\n  if (!isBgDark) color = \"gray.800\";\n  return {\n    bg: $bg.reference,\n    fontSize: $fs.reference,\n    color,\n    borderColor: $border.reference,\n    verticalAlign: \"top\",\n    width: $size.reference,\n    height: $size.reference,\n    \"&:not([data-loaded])\": {\n      [$bg.variable]: bg\n    },\n    [$border.variable]: \"colors.white\",\n    _dark: {\n      [$border.variable]: \"colors.gray.800\"\n    }\n  };\n});\nvar baseStyleLabel = defineStyle({\n  fontSize: $fs.reference,\n  lineHeight: \"1\"\n});\nvar baseStyle = definePartsStyle(props => ({\n  badge: runIfFn(baseStyleBadge, props),\n  excessLabel: runIfFn(baseStyleExcessLabel, props),\n  container: runIfFn(baseStyleContainer, props),\n  label: baseStyleLabel\n}));\n\nfunction getSize(size) {\n  const themeSize = size !== \"100%\" ? sizes_default[size] : void 0;\n  return definePartsStyle({\n    container: {\n      [$size.variable]: themeSize != null ? themeSize : size,\n      [$fs.variable]: `calc(${themeSize != null ? themeSize : size} / 2.5)`\n    },\n    excessLabel: {\n      [$size.variable]: themeSize != null ? themeSize : size,\n      [$fs.variable]: `calc(${themeSize != null ? themeSize : size} / 2.5)`\n    }\n  });\n}\n\nvar sizes = {\n  \"2xs\": getSize(4),\n  xs: getSize(6),\n  sm: getSize(8),\n  md: getSize(12),\n  lg: getSize(16),\n  xl: getSize(24),\n  \"2xl\": getSize(32),\n  full: getSize(\"100%\")\n};\nvar avatarTheme = defineMultiStyleConfig({\n  baseStyle,\n  sizes,\n  defaultProps: {\n    size: \"md\"\n  }\n});\nexport { avatarTheme };","map":{"version":3,"mappings":"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","names":["avatarAnatomy","parts","createMultiStyleConfigHelpers","cssVar","defineStyle","isDark","randomColor","definePartsStyle","defineMultiStyleConfig","keys","$border","$bg","$fs","$size","baseStyleBadge","borderRadius","border","borderColor","reference","variable","_dark","baseStyleExcessLabel","bg","fontSize","width","height","lineHeight","baseStyleContainer","props","name","theme","string","isBgDark","color","verticalAlign","baseStyleLabel","baseStyle","badge","runIfFn","excessLabel","container","label","getSize","size","themeSize","sizes_default","sizes","xs","sm","md","lg","xl","full","avatarTheme","defaultProps"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\theme\\src\\components\\avatar.ts"],"sourcesContent":["import { avatarAnatomy as parts } from \"@chakra-ui/anatomy\"\nimport {\n  createMultiStyleConfigHelpers,\n  cssVar,\n  defineStyle,\n} from \"@chakra-ui/styled-system\"\nimport { isDark, randomColor } from \"@chakra-ui/theme-tools\"\nimport themeSizes from \"../foundations/sizes\"\nimport { runIfFn } from \"../utils/run-if-fn\"\n\nconst { definePartsStyle, defineMultiStyleConfig } =\n  createMultiStyleConfigHelpers(parts.keys)\n\nconst $border = cssVar(\"avatar-border-color\")\nconst $bg = cssVar(\"avatar-bg\")\nconst $fs = cssVar(\"avatar-font-size\")\nconst $size = cssVar(\"avatar-size\")\n\nconst baseStyleBadge = defineStyle({\n  borderRadius: \"full\",\n  border: \"0.2em solid\",\n  borderColor: $border.reference,\n  [$border.variable]: \"white\",\n  _dark: {\n    [$border.variable]: \"colors.gray.800\",\n  },\n})\n\nconst baseStyleExcessLabel = defineStyle({\n  bg: $bg.reference,\n  fontSize: $fs.reference,\n  width: $size.reference,\n  height: $size.reference,\n  lineHeight: \"1\",\n  [$bg.variable]: \"colors.gray.200\",\n  _dark: {\n    [$bg.variable]: \"colors.whiteAlpha.400\",\n  },\n})\n\nconst baseStyleContainer = defineStyle((props) => {\n  const { name, theme } = props\n  const bg = name ? randomColor({ string: name }) : \"colors.gray.400\"\n  const isBgDark = isDark(bg)(theme)\n\n  let color = \"white\"\n  if (!isBgDark) color = \"gray.800\"\n\n  return {\n    bg: $bg.reference,\n    fontSize: $fs.reference,\n    color,\n    borderColor: $border.reference,\n    verticalAlign: \"top\",\n    width: $size.reference,\n    height: $size.reference,\n    \"&:not([data-loaded])\": {\n      [$bg.variable]: bg,\n    },\n    [$border.variable]: \"colors.white\",\n    _dark: {\n      [$border.variable]: \"colors.gray.800\",\n    },\n  }\n})\n\nconst baseStyleLabel = defineStyle({\n  fontSize: $fs.reference,\n  lineHeight: \"1\",\n})\n\nconst baseStyle = definePartsStyle((props) => ({\n  badge: runIfFn(baseStyleBadge, props),\n  excessLabel: runIfFn(baseStyleExcessLabel, props),\n  container: runIfFn(baseStyleContainer, props),\n  label: baseStyleLabel,\n}))\n\nfunction getSize(size: keyof typeof themeSizes | \"100%\") {\n  const themeSize = size !== \"100%\" ? themeSizes[size] : undefined\n  return definePartsStyle({\n    container: {\n      [$size.variable]: themeSize ?? size,\n      [$fs.variable]: `calc(${themeSize ?? size} / 2.5)`,\n    },\n    excessLabel: {\n      [$size.variable]: themeSize ?? size,\n      [$fs.variable]: `calc(${themeSize ?? size} / 2.5)`,\n    },\n  })\n}\n\nconst sizes = {\n  \"2xs\": getSize(4),\n  xs: getSize(6),\n  sm: getSize(8),\n  md: getSize(12),\n  lg: getSize(16),\n  xl: getSize(24),\n  \"2xl\": getSize(32),\n  full: getSize(\"100%\"),\n}\n\nexport const avatarTheme = defineMultiStyleConfig({\n  baseStyle,\n  sizes,\n  defaultProps: {\n    size: \"md\",\n  },\n})\n"]},"metadata":{},"sourceType":"module"}