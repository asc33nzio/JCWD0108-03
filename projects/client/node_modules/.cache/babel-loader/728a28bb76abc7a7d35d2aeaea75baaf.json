{"ast":null,"code":"'use client';\n\nimport { useButtonType } from \"./chunk-J37R6SZE.mjs\";\nimport { useButtonGroup } from \"./chunk-T6ZDZOLO.mjs\";\nimport { ButtonIcon } from \"./chunk-3RENZ2UO.mjs\";\nimport { ButtonSpinner } from \"./chunk-QB2Y5VKH.mjs\"; // src/button.tsx\n\nimport { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar Button = forwardRef((props, ref) => {\n  const group = useButtonGroup();\n  const styles = useStyleConfig(\"Button\", { ...group,\n    ...props\n  });\n  const {\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props);\n  const buttonStyles = useMemo(() => {\n    const _focus = { ...(styles == null ? void 0 : styles[\"_focus\"]),\n      zIndex: 1\n    };\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && {\n        _focus\n      })\n    };\n  }, [styles, group]);\n  const {\n    ref: _ref,\n    type: defaultType\n  } = useButtonType(as);\n  const contentProps = {\n    rightIcon,\n    leftIcon,\n    iconSpacing,\n    children\n  };\n  return /* @__PURE__ */jsxs(chakra.button, {\n    ref: useMergeRefs(ref, _ref),\n    as,\n    type: type != null ? type : defaultType,\n    \"data-active\": dataAttr(isActive),\n    \"data-loading\": dataAttr(isLoading),\n    __css: buttonStyles,\n    className: cx(\"chakra-button\", className),\n    ...rest,\n    disabled: isDisabled || isLoading,\n    children: [isLoading && spinnerPlacement === \"start\" && /* @__PURE__ */jsx(ButtonSpinner, {\n      className: \"chakra-button__spinner--start\",\n      label: loadingText,\n      placement: \"start\",\n      spacing: iconSpacing,\n      children: spinner\n    }), isLoading ? loadingText || /* @__PURE__ */jsx(chakra.span, {\n      opacity: 0,\n      children: /* @__PURE__ */jsx(ButtonContent, { ...contentProps\n      })\n    }) : /* @__PURE__ */jsx(ButtonContent, { ...contentProps\n    }), isLoading && spinnerPlacement === \"end\" && /* @__PURE__ */jsx(ButtonSpinner, {\n      className: \"chakra-button__spinner--end\",\n      label: loadingText,\n      placement: \"end\",\n      spacing: iconSpacing,\n      children: spinner\n    })]\n  });\n});\nButton.displayName = \"Button\";\n\nfunction ButtonContent(props) {\n  const {\n    leftIcon,\n    rightIcon,\n    children,\n    iconSpacing\n  } = props;\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [leftIcon && /* @__PURE__ */jsx(ButtonIcon, {\n      marginEnd: iconSpacing,\n      children: leftIcon\n    }), children, rightIcon && /* @__PURE__ */jsx(ButtonIcon, {\n      marginStart: iconSpacing,\n      children: rightIcon\n    })]\n  });\n}\n\nexport { Button };","map":{"version":3,"mappings":"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","names":["useMergeRefs","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","dataAttr","useMemo","Fragment","jsx","Button","props","ref","group","useButtonGroup","styles","isDisabled","isLoading","isActive","children","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","className","as","rest","buttonStyles","_focus","zIndex","display","appearance","alignItems","justifyContent","userSelect","position","whiteSpace","verticalAlign","outline","_ref","defaultType","useButtonType","contentProps","button","__css","disabled","ButtonSpinner","label","placement","spacing","span","opacity","ButtonContent","displayName","ButtonIcon","marginEnd","marginStart"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\button\\src\\button.tsx"],"sourcesContent":["import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}