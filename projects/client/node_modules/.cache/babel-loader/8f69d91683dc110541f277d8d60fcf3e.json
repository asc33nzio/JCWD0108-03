{"ast":null,"code":"'use client'; // src/media-query.utils.ts\n\nimport { breakpoints as defaultBreakPoints } from \"@chakra-ui/breakpoint-utils\";\n\nfunction getClosestValue(values, breakpoint) {\n  let breakpoints = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultBreakPoints;\n  let index = Object.keys(values).indexOf(breakpoint);\n\n  if (index !== -1) {\n    return values[breakpoint];\n  }\n\n  let stopIndex = breakpoints.indexOf(breakpoint);\n\n  while (stopIndex >= 0) {\n    const key = breakpoints[stopIndex];\n\n    if (values.hasOwnProperty(key)) {\n      index = stopIndex;\n      break;\n    }\n\n    stopIndex -= 1;\n  }\n\n  if (index !== -1) {\n    const key = breakpoints[index];\n    return values[key];\n  }\n\n  return void 0;\n}\n\nexport { getClosestValue };","map":{"version":3,"mappings":";;AAAA,SAASA,eAAeC,kBAAxB,QAAkD,6BAAlD;;AAEO,SAASC,eAAT,CACLC,MADK,EAELC,UAFK,EAIL;EAAA,IADAJ,WACA,uEADcC,kBACd;EACA,IAAII,QAAQC,OAAOC,IAAP,CAAYJ,MAAZ,EAAoBK,OAApB,CAA4BJ,UAA5B,CAAZ;;EAEA,IAAIC,UAAU,EAAd,EAAkB;IAChB,OAAOF,OAAOC,UAAP,CAAP;EACF;;EAEA,IAAIK,YAAYT,YAAYQ,OAAZ,CAAoBJ,UAApB,CAAhB;;EAEA,OAAOK,aAAa,CAApB,EAAuB;IACrB,MAAMC,MAAMV,YAAYS,SAAZ,CAAZ;;IAEA,IAAIN,OAAOQ,cAAP,CAAsBD,GAAtB,CAAJ,EAAgC;MAC9BL,QAAQI,SAAR;MACA;IACF;;IACAA,aAAa,CAAb;EACF;;EAEA,IAAIJ,UAAU,EAAd,EAAkB;IAChB,MAAMK,MAAMV,YAAYK,KAAZ,CAAZ;IACA,OAAOF,OAAOO,GAAP,CAAP;EACF;;EAEA,OAAO,MAAP;AACF","names":["breakpoints","defaultBreakPoints","getClosestValue","values","breakpoint","index","Object","keys","indexOf","stopIndex","key","hasOwnProperty"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\media-query\\src\\media-query.utils.ts"],"sourcesContent":["import { breakpoints as defaultBreakPoints } from \"@chakra-ui/breakpoint-utils\"\n\nexport function getClosestValue<T = any>(\n  values: Record<string, T>,\n  breakpoint: string,\n  breakpoints = defaultBreakPoints,\n) {\n  let index = Object.keys(values).indexOf(breakpoint)\n\n  if (index !== -1) {\n    return values[breakpoint]\n  }\n\n  let stopIndex = breakpoints.indexOf(breakpoint)\n\n  while (stopIndex >= 0) {\n    const key = breakpoints[stopIndex]\n\n    if (values.hasOwnProperty(key)) {\n      index = stopIndex\n      break\n    }\n    stopIndex -= 1\n  }\n\n  if (index !== -1) {\n    const key = breakpoints[index]\n    return values[key]\n  }\n\n  return undefined\n}\n"]},"metadata":{},"sourceType":"module"}