{"ast":null,"code":"'use client';\n\nimport { ColorModeContext } from \"./chunk-UQDW7KKV.mjs\";\nimport { getColorModeUtils } from \"./chunk-X7ZBZ4KW.mjs\";\nimport { localStorageManager } from \"./chunk-44OWBZ77.mjs\"; // src/color-mode-provider.tsx\n\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\n\nvar noop = () => {};\n\nfunction getTheme(manager, fallback) {\n  return manager.type === \"cookie\" && manager.ssr ? manager.get(fallback) : fallback;\n}\n\nfunction ColorModeProvider(props) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange\n    } = {},\n    colorModeManager = localStorageManager\n  } = props;\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\";\n  const [colorMode, rawSetColorMode] = useState(() => getTheme(colorModeManager, defaultColorMode));\n  const [resolvedColorMode, setResolvedColorMode] = useState(() => getTheme(colorModeManager));\n  const {\n    getSystemTheme,\n    setClassName,\n    setDataset,\n    addListener\n  } = useMemo(() => getColorModeUtils({\n    preventTransition: disableTransitionOnChange\n  }), [disableTransitionOnChange]);\n  const resolvedValue = initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode;\n  const setColorMode = useCallback(value2 => {\n    const resolved = value2 === \"system\" ? getSystemTheme() : value2;\n    rawSetColorMode(resolved);\n    setClassName(resolved === \"dark\");\n    setDataset(resolved);\n    colorModeManager.set(resolved);\n  }, [colorModeManager, getSystemTheme, setClassName, setDataset]);\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme());\n    }\n  }, []);\n  useEffect(() => {\n    const managerValue = colorModeManager.get();\n\n    if (managerValue) {\n      setColorMode(managerValue);\n      return;\n    }\n\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\");\n      return;\n    }\n\n    setColorMode(defaultColorMode);\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode]);\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\");\n  }, [resolvedValue, setColorMode]);\n  useEffect(() => {\n    if (!useSystemColorMode) return;\n    return addListener(setColorMode);\n  }, [useSystemColorMode, addListener, setColorMode]);\n  const context = useMemo(() => ({\n    colorMode: value != null ? value : resolvedValue,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode,\n    forced: value !== void 0\n  }), [resolvedValue, toggleColorMode, setColorMode, value]);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    children\n  });\n}\n\nColorModeProvider.displayName = \"ColorModeProvider\";\n\nfunction DarkMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\n\nDarkMode.displayName = \"DarkMode\";\n\nfunction LightMode(props) {\n  const context = useMemo(() => ({\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop,\n    forced: true\n  }), []);\n  return /* @__PURE__ */jsx(ColorModeContext.Provider, {\n    value: context,\n    ...props\n  });\n}\n\nLightMode.displayName = \"LightMode\";\nexport { ColorModeProvider, DarkMode, LightMode };","map":{"version":3,"mappings":"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","names":["useSafeLayoutEffect","useCallback","useEffect","useMemo","useState","noop","getTheme","manager","fallback","type","ssr","get","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","disableTransitionOnChange","colorModeManager","localStorageManager","defaultColorMode","colorMode","rawSetColorMode","resolvedColorMode","setResolvedColorMode","getSystemTheme","setClassName","setDataset","addListener","getColorModeUtils","preventTransition","resolvedValue","setColorMode","resolved","set","managerValue","toggleColorMode","context","forced","ColorModeContext","Provider","displayName","DarkMode","LightMode"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\color-mode\\src\\color-mode-provider.tsx"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useMemo, useState } from \"react\"\nimport { ColorModeContext } from \"./color-mode-context\"\nimport {\n  ColorMode,\n  ColorModeContextType,\n  ColorModeOptions,\n} from \"./color-mode-types\"\nimport { getColorModeUtils } from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nconst noop = () => {}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options?: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\nfunction getTheme(manager: StorageManager, fallback?: ColorMode) {\n  return manager.type === \"cookie\" && manager.ssr\n    ? manager.get(fallback)\n    : fallback\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode,\n      disableTransitionOnChange,\n    } = {},\n    colorModeManager = localStorageManager,\n  } = props\n\n  const defaultColorMode = initialColorMode === \"dark\" ? \"dark\" : \"light\"\n\n  const [colorMode, rawSetColorMode] = useState(() =>\n    getTheme(colorModeManager, defaultColorMode),\n  )\n\n  const [resolvedColorMode, setResolvedColorMode] = useState(() =>\n    getTheme(colorModeManager),\n  )\n\n  const { getSystemTheme, setClassName, setDataset, addListener } = useMemo(\n    () => getColorModeUtils({ preventTransition: disableTransitionOnChange }),\n    [disableTransitionOnChange],\n  )\n\n  const resolvedValue =\n    initialColorMode === \"system\" && !colorMode ? resolvedColorMode : colorMode\n\n  const setColorMode = useCallback(\n    (value: ColorMode | \"system\") => {\n      //\n      const resolved = value === \"system\" ? getSystemTheme() : value\n      rawSetColorMode(resolved)\n\n      setClassName(resolved === \"dark\")\n      setDataset(resolved)\n\n      colorModeManager.set(resolved)\n    },\n    [colorModeManager, getSystemTheme, setClassName, setDataset],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (initialColorMode === \"system\") {\n      setResolvedColorMode(getSystemTheme())\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(() => {\n    const managerValue = colorModeManager.get()\n\n    if (managerValue) {\n      setColorMode(managerValue)\n      return\n    }\n\n    if (initialColorMode === \"system\") {\n      setColorMode(\"system\")\n      return\n    }\n\n    setColorMode(defaultColorMode)\n  }, [colorModeManager, defaultColorMode, initialColorMode, setColorMode])\n\n  const toggleColorMode = useCallback(() => {\n    setColorMode(resolvedValue === \"dark\" ? \"light\" : \"dark\")\n  }, [resolvedValue, setColorMode])\n\n  useEffect(() => {\n    if (!useSystemColorMode) return\n    return addListener(setColorMode)\n  }, [useSystemColorMode, addListener, setColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = useMemo(\n    () => ({\n      colorMode: value ?? (resolvedValue as ColorMode),\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n      forced: value !== undefined,\n    }),\n    [resolvedValue, toggleColorMode, setColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nColorModeProvider.displayName = \"ColorModeProvider\"\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport function DarkMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nDarkMode.displayName = \"DarkMode\"\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport function LightMode(props: React.PropsWithChildren<{}>) {\n  const context = useMemo<ColorModeContextType>(\n    () => ({\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop,\n      forced: true,\n    }),\n    [],\n  )\n\n  return <ColorModeContext.Provider value={context} {...props} />\n}\n\nLightMode.displayName = \"LightMode\"\n"]},"metadata":{},"sourceType":"module"}