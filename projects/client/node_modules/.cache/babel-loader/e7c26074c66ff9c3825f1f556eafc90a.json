{"ast":null,"code":"'use client'; // src/utils.ts\n\nvar toVar = (value, fallback) => ({\n  var: value,\n  varRef: fallback ? `var(${value}, ${fallback})` : `var(${value})`\n});\n\nvar cssVars = {\n  arrowShadowColor: toVar(\"--popper-arrow-shadow-color\"),\n  arrowSize: toVar(\"--popper-arrow-size\", \"8px\"),\n  arrowSizeHalf: toVar(\"--popper-arrow-size-half\"),\n  arrowBg: toVar(\"--popper-arrow-bg\"),\n  transformOrigin: toVar(\"--popper-transform-origin\"),\n  arrowOffset: toVar(\"--popper-arrow-offset\")\n};\n\nfunction getBoxShadow(placement) {\n  if (placement.includes(\"top\")) return `1px 1px 0px 0 var(--popper-arrow-shadow-color)`;\n  if (placement.includes(\"bottom\")) return `-1px -1px 0px 0 var(--popper-arrow-shadow-color)`;\n  if (placement.includes(\"right\")) return `-1px 1px 0px 0 var(--popper-arrow-shadow-color)`;\n  if (placement.includes(\"left\")) return `1px -1px 0px 0 var(--popper-arrow-shadow-color)`;\n}\n\nvar transforms = {\n  top: \"bottom center\",\n  \"top-start\": \"bottom left\",\n  \"top-end\": \"bottom right\",\n  bottom: \"top center\",\n  \"bottom-start\": \"top left\",\n  \"bottom-end\": \"top right\",\n  left: \"right center\",\n  \"left-start\": \"right top\",\n  \"left-end\": \"right bottom\",\n  right: \"left center\",\n  \"right-start\": \"left top\",\n  \"right-end\": \"left bottom\"\n};\n\nvar toTransformOrigin = placement => transforms[placement];\n\nvar defaultEventListeners = {\n  scroll: true,\n  resize: true\n};\n\nfunction getEventListenerOptions(value) {\n  let eventListeners;\n\n  if (typeof value === \"object\") {\n    eventListeners = {\n      enabled: true,\n      options: { ...defaultEventListeners,\n        ...value\n      }\n    };\n  } else {\n    eventListeners = {\n      enabled: value,\n      options: defaultEventListeners\n    };\n  }\n\n  return eventListeners;\n}\n\nexport { cssVars, getBoxShadow, toTransformOrigin, getEventListenerOptions };","map":{"version":3,"mappings":";;AAEA,IAAMA,QAAQ,CAACC,KAAD,EAAgBC,QAAhB,MAAuC;EACnDC,KAAKF,KAD8C;EAEnDG,QAAQF,WAAW,OAAOD,UAAUC,WAA5B,GAA0C,OAAOD;AAFN,CAAvC,CAAd;;AAKO,IAAMI,UAAU;EACrBC,kBAAkBN,MAAM,6BAAN,CADG;EAErBO,WAAWP,MAAM,qBAAN,EAA6B,KAA7B,CAFU;EAGrBQ,eAAeR,MAAM,0BAAN,CAHM;EAIrBS,SAAST,MAAM,mBAAN,CAJY;EAKrBU,iBAAiBV,MAAM,2BAAN,CALI;EAMrBW,aAAaX,MAAM,uBAAN;AANQ,CAAhB;;AASA,SAASY,YAAT,CAAsBC,SAAtB,EAA4C;EACjD,IAAIA,UAAUC,QAAV,CAAmB,KAAnB,CAAJ,EACE,OAAO,gDAAP;EACF,IAAID,UAAUC,QAAV,CAAmB,QAAnB,CAAJ,EACE,OAAO,kDAAP;EACF,IAAID,UAAUC,QAAV,CAAmB,OAAnB,CAAJ,EACE,OAAO,iDAAP;EACF,IAAID,UAAUC,QAAV,CAAmB,MAAnB,CAAJ,EACE,OAAO,iDAAP;AACJ;;AAEA,IAAMC,aAAqC;EACzCC,KAAK,eADoC;EAEzC,aAAa,aAF4B;EAGzC,WAAW,cAH8B;EAKzCC,QAAQ,YALiC;EAMzC,gBAAgB,UANyB;EAOzC,cAAc,WAP2B;EASzCC,MAAM,cATmC;EAUzC,cAAc,WAV2B;EAWzC,YAAY,cAX6B;EAazCC,OAAO,aAbkC;EAczC,eAAe,UAd0B;EAezC,aAAa;AAf4B,CAA3C;;AAkBO,IAAMC,oBAAqBP,SAAD,IAA0BE,WAAWF,SAAX,CAApD;;AAEP,IAAMQ,wBAAwB;EAC5BC,QAAQ,IADoB;EAE5BC,QAAQ;AAFoB,CAA9B;;AAKO,SAASC,uBAAT,CACLvB,KADK,EAEL;EACA,IAAIwB,cAAJ;;EAIA,IAAI,OAAOxB,KAAP,KAAiB,QAArB,EAA+B;IAC7BwB,iBAAiB;MACfC,SAAS,IADM;MAEfC,SAAS,EAAE,GAAGN,qBAAL;QAA4B,GAAGpB;MAA/B;IAFM,CAAjB;EAIF,CALA,MAKO;IACLwB,iBAAiB;MACfC,SAASzB,KADM;MAEf0B,SAASN;IAFM,CAAjB;EAIF;;EACA,OAAOI,cAAP;AACF","names":["toVar","value","fallback","var","varRef","cssVars","arrowShadowColor","arrowSize","arrowSizeHalf","arrowBg","transformOrigin","arrowOffset","getBoxShadow","placement","includes","transforms","top","bottom","left","right","toTransformOrigin","defaultEventListeners","scroll","resize","getEventListenerOptions","eventListeners","enabled","options"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\popper\\src\\utils.ts"],"sourcesContent":["import { Placement } from \"@popperjs/core\"\n\nconst toVar = (value: string, fallback?: string) => ({\n  var: value,\n  varRef: fallback ? `var(${value}, ${fallback})` : `var(${value})`,\n})\n\nexport const cssVars = {\n  arrowShadowColor: toVar(\"--popper-arrow-shadow-color\"),\n  arrowSize: toVar(\"--popper-arrow-size\", \"8px\"),\n  arrowSizeHalf: toVar(\"--popper-arrow-size-half\"),\n  arrowBg: toVar(\"--popper-arrow-bg\"),\n  transformOrigin: toVar(\"--popper-transform-origin\"),\n  arrowOffset: toVar(\"--popper-arrow-offset\"),\n} as const\n\nexport function getBoxShadow(placement: Placement) {\n  if (placement.includes(\"top\"))\n    return `1px 1px 0px 0 var(--popper-arrow-shadow-color)`\n  if (placement.includes(\"bottom\"))\n    return `-1px -1px 0px 0 var(--popper-arrow-shadow-color)`\n  if (placement.includes(\"right\"))\n    return `-1px 1px 0px 0 var(--popper-arrow-shadow-color)`\n  if (placement.includes(\"left\"))\n    return `1px -1px 0px 0 var(--popper-arrow-shadow-color)`\n}\n\nconst transforms: Record<string, string> = {\n  top: \"bottom center\",\n  \"top-start\": \"bottom left\",\n  \"top-end\": \"bottom right\",\n\n  bottom: \"top center\",\n  \"bottom-start\": \"top left\",\n  \"bottom-end\": \"top right\",\n\n  left: \"right center\",\n  \"left-start\": \"right top\",\n  \"left-end\": \"right bottom\",\n\n  right: \"left center\",\n  \"right-start\": \"left top\",\n  \"right-end\": \"left bottom\",\n}\n\nexport const toTransformOrigin = (placement: Placement) => transforms[placement]\n\nconst defaultEventListeners = {\n  scroll: true,\n  resize: true,\n}\n\nexport function getEventListenerOptions(\n  value?: boolean | Partial<typeof defaultEventListeners>,\n) {\n  let eventListeners: {\n    enabled?: boolean\n    options?: typeof defaultEventListeners\n  }\n  if (typeof value === \"object\") {\n    eventListeners = {\n      enabled: true,\n      options: { ...defaultEventListeners, ...value },\n    }\n  } else {\n    eventListeners = {\n      enabled: value,\n      options: defaultEventListeners,\n    }\n  }\n  return eventListeners\n}\n"]},"metadata":{},"sourceType":"module"}