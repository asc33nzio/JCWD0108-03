{"ast":null,"code":"'use client';\n\nimport { useAttributeObserver } from \"./chunk-2PMVP26D.mjs\";\nimport { useSpinner } from \"./chunk-366L2ZDN.mjs\"; // src/use-number-input.ts\n\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useMemo, useRef, useState } from \"react\";\nvar FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/;\n\nfunction isFloatingPointNumericCharacter(character) {\n  return FLOATING_POINT_REGEX.test(character);\n}\n\nfunction isValidNumericKeyboardEvent(event, isValid) {\n  if (event.key == null) return true;\n  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n  const isSingleCharacterKey = event.key.length === 1;\n  if (!isSingleCharacterKey || isModifierKey) return true;\n  return isValid(event.key);\n}\n\nfunction useNumberInput() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onInvalid: onInvalidProp,\n    getAriaValueText: getAriaValueTextProp,\n    isValidCharacter: isValidCharacterProp,\n    format: formatValue,\n    parse: parseValue,\n    ...htmlProps\n  } = props;\n  const onFocus = useCallbackRef(onFocusProp);\n  const onBlur = useCallbackRef(onBlurProp);\n  const onInvalid = useCallbackRef(onInvalidProp);\n  const isValidCharacter = useCallbackRef(isValidCharacterProp != null ? isValidCharacterProp : isFloatingPointNumericCharacter);\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp);\n  const counter = useCounter(props);\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn\n  } = counter;\n  const [isFocused, setFocused] = useState(false);\n  const isInteractive = !(isReadOnly || isDisabled);\n  const inputRef = useRef(null);\n  const inputSelectionRef = useRef(null);\n  const incrementButtonRef = useRef(null);\n  const decrementButtonRef = useRef(null);\n  const sanitize = useCallback(value => value.split(\"\").filter(isValidCharacter).join(\"\"), [isValidCharacter]);\n  const parse = useCallback(value => {\n    var _a;\n\n    return (_a = parseValue == null ? void 0 : parseValue(value)) != null ? _a : value;\n  }, [parseValue]);\n  const format = useCallback(value => {\n    var _a;\n\n    return ((_a = formatValue == null ? void 0 : formatValue(value)) != null ? _a : value).toString();\n  }, [formatValue]);\n  useUpdateEffect(() => {\n    if (counter.valueAsNumber > max) {\n      onInvalid == null ? void 0 : onInvalid(\"rangeOverflow\", format(counter.value), counter.valueAsNumber);\n    } else if (counter.valueAsNumber < min) {\n      onInvalid == null ? void 0 : onInvalid(\"rangeOverflow\", format(counter.value), counter.valueAsNumber);\n    }\n  }, [counter.valueAsNumber, counter.value, format, onInvalid]);\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    const notInSync = inputRef.current.value != counter.value;\n\n    if (notInSync) {\n      const parsedInput = parse(inputRef.current.value);\n      counter.setValue(sanitize(parsedInput));\n    }\n  }, [parse, sanitize]);\n  const increment = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  const decrement = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  const spinner = useSpinner(increment, decrement);\n  useAttributeObserver(incrementButtonRef, \"disabled\", spinner.stop, spinner.isSpinning);\n  useAttributeObserver(decrementButtonRef, \"disabled\", spinner.stop, spinner.isSpinning);\n  const onChange = useCallback(event => {\n    const evt = event.nativeEvent;\n    if (evt.isComposing) return;\n    const parsedInput = parse(event.currentTarget.value);\n    updateFn(sanitize(parsedInput));\n    inputSelectionRef.current = {\n      start: event.currentTarget.selectionStart,\n      end: event.currentTarget.selectionEnd\n    };\n  }, [updateFn, sanitize, parse]);\n\n  const _onFocus = useCallback(event => {\n    var _a, _b, _c;\n\n    onFocus == null ? void 0 : onFocus(event);\n    if (!inputSelectionRef.current) return;\n    event.target.selectionStart = (_b = inputSelectionRef.current.start) != null ? _b : (_a = event.currentTarget.value) == null ? void 0 : _a.length;\n    event.currentTarget.selectionEnd = (_c = inputSelectionRef.current.end) != null ? _c : event.currentTarget.selectionStart;\n  }, [onFocus]);\n\n  const onKeyDown = useCallback(event => {\n    if (event.nativeEvent.isComposing) return;\n\n    if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {\n      event.preventDefault();\n    }\n\n    const stepFactor = getStepFactor(event) * stepProp;\n    const eventKey = event.key;\n    const keyMap = {\n      ArrowUp: () => increment(stepFactor),\n      ArrowDown: () => decrement(stepFactor),\n      Home: () => updateFn(min),\n      End: () => updateFn(max)\n    };\n    const action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [isValidCharacter, stepProp, increment, decrement, updateFn, min, max]);\n\n  const getStepFactor = event => {\n    let ratio = 1;\n\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  };\n\n  const ariaValueText = useMemo(() => {\n    const text = getAriaValueText == null ? void 0 : getAriaValueText(counter.value);\n    if (text != null) return text;\n    const defaultText = counter.value.toString();\n    return !defaultText ? void 0 : defaultText;\n  }, [counter.value, getAriaValueText]);\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value;\n    if (counter.value === \"\") return;\n    const valueStartsWithE = /^[eE]/.test(counter.value.toString());\n\n    if (valueStartsWithE) {\n      counter.setValue(\"\");\n    } else {\n      if (counter.valueAsNumber < min) {\n        next = min;\n      }\n\n      if (counter.valueAsNumber > max) {\n        next = max;\n      }\n\n      counter.cast(next);\n    }\n  }, [counter, max, min]);\n  const onInputBlur = useCallback(() => {\n    setFocused(false);\n\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange) {\n      requestAnimationFrame(() => {\n        var _a;\n\n        (_a = inputRef.current) == null ? void 0 : _a.focus();\n      });\n    }\n  }, [focusInputOnChange]);\n  const spinUp = useCallback(event => {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  const spinDown = useCallback(event => {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  useEventListener(() => inputRef.current, \"wheel\", event => {\n    var _a, _b;\n\n    const doc = (_b = (_a = inputRef.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;\n    const isInputFocused = doc.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    const stepFactor = getStepFactor(event) * stepProp;\n    const direction = Math.sign(event.deltaY);\n\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, {\n    passive: false\n  });\n  const getIncrementButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return { ...props2,\n      ref: mergeRefs(ref, incrementButtonRef),\n      role: \"button\",\n      tabIndex: -1,\n      onPointerDown: callAllHandlers(props2.onPointerDown, event => {\n        if (event.button !== 0 || disabled) return;\n        spinUp(event);\n      }),\n      onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),\n      onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    };\n  }, [counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  const getDecrementButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return { ...props2,\n      ref: mergeRefs(ref, decrementButtonRef),\n      role: \"button\",\n      tabIndex: -1,\n      onPointerDown: callAllHandlers(props2.onPointerDown, event => {\n        if (event.button !== 0 || disabled) return;\n        spinDown(event);\n      }),\n      onPointerLeave: callAllHandlers(props2.onPointerLeave, spinner.stop),\n      onPointerUp: callAllHandlers(props2.onPointerUp, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    };\n  }, [counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    var _a, _b, _c, _d;\n\n    return {\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled,\n      ...props2,\n      readOnly: (_a = props2.readOnly) != null ? _a : isReadOnly,\n      \"aria-readonly\": (_b = props2.readOnly) != null ? _b : isReadOnly,\n      \"aria-required\": (_c = props2.required) != null ? _c : isRequired,\n      required: (_d = props2.required) != null ? _d : isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: format(counter.value),\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? void 0 : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid != null ? isInvalid : counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props2.onChange, onChange),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, _onFocus, () => setFocused(true)),\n      onBlur: callAllHandlers(props2.onBlur, onBlur, onInputBlur)\n    };\n  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, format, ariaDescBy, id, isDisabled, isRequired, isReadOnly, isInvalid, counter.value, counter.valueAsNumber, counter.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, _onFocus, onBlur, onInputBlur]);\n  return {\n    value: format(counter.value),\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps\n  };\n}\n\nexport { useNumberInput };","map":{"version":3,"mappings":"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","names":["useCounter","useEventListener","useUpdateEffect","useSafeLayoutEffect","useCallbackRef","mergeRefs","ariaAttr","callAllHandlers","useCallback","useMemo","useRef","useState","FLOATING_POINT_REGEX","isFloatingPointNumericCharacter","character","test","isValidNumericKeyboardEvent","event","isValid","key","isModifierKey","ctrlKey","altKey","metaKey","isSingleCharacterKey","length","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","step","stepProp","isReadOnly","isDisabled","isRequired","isInvalid","pattern","inputMode","allowMouseWheel","id","onChange","_","precision","name","ariaDescBy","ariaLabel","ariaLabelledBy","onFocus","onFocusProp","onBlur","onBlurProp","onInvalid","onInvalidProp","getAriaValueText","getAriaValueTextProp","isValidCharacter","isValidCharacterProp","format","formatValue","parse","parseValue","htmlProps","counter","update","updateFn","increment","incrementFn","decrement","decrementFn","isFocused","setFocused","isInteractive","inputRef","inputSelectionRef","incrementButtonRef","decrementButtonRef","sanitize","value","split","filter","join","toString","valueAsNumber","current","notInSync","parsedInput","setValue","spinner","useSpinner","useAttributeObserver","stop","isSpinning","evt","nativeEvent","isComposing","currentTarget","start","selectionStart","end","selectionEnd","_onFocus","target","_b","_a","_c","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","shiftKey","ariaValueText","text","defaultText","validateAndClamp","next","valueStartsWithE","cast","onInputBlur","focusInput","requestAnimationFrame","focus","spinUp","up","spinDown","down","doc","ownerDocument","document","isInputFocused","activeElement","direction","Math","sign","deltaY","passive","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onPointerDown","button","onPointerLeave","onPointerUp","getDecrementButtonProps","isAtMin","getInputProps","type","readOnly","required","_d","isNaN","isOutOfRange","autoComplete","autoCorrect"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\number-input\\src\\use-number-input.ts"],"sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { useCallback, useMemo, useRef, useState } from \"react\"\nimport { useAttributeObserver } from \"./use-attr-observer\"\nimport { useSpinner } from \"./use-spinner\"\n\nconst FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/\n\n/**\n * Determine if a character is a DOM floating point character\n * @see https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n */\nfunction isFloatingPointNumericCharacter(character: string) {\n  return FLOATING_POINT_REGEX.test(character)\n}\n\nfunction isValidNumericKeyboardEvent(\n  event: React.KeyboardEvent,\n  isValid: (key: string) => boolean,\n) {\n  if (event.key == null) return true\n  const isModifierKey = event.ctrlKey || event.altKey || event.metaKey\n  const isSingleCharacterKey = event.key.length === 1\n  if (!isSingleCharacterKey || isModifierKey) return true\n  return isValid(event.key)\n}\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: string | number): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * Whether the input should be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * Whether the input is required\n   */\n  isRequired?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n  \"aria-describedby\"?: string\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n  onInvalid?: (\n    message: ValidityState,\n    value: string,\n    valueAsNumber: number,\n  ) => void\n  /**\n   * Whether the pressed key should be allowed in the input.\n   * The default behavior is to allow DOM floating point characters defined by /^[Ee0-9+\\-.]$/\n   */\n  isValidCharacter?: (value: string) => boolean\n  /**\n   * If using a custom display format, this converts the custom format to a format `parseFloat` understands.\n   */\n  parse?: (value: string) => string\n  /**\n   * If using a custom display format, this converts the default format to the custom format.\n   */\n  format?: (value: string | number) => string | number\n}\n\ntype ValidityState = \"rangeUnderflow\" | \"rangeOverflow\"\ntype InputSelection = { start: number | null; end: number | null }\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/spinbutton/\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus: onFocusProp,\n    onBlur: onBlurProp,\n    onInvalid: onInvalidProp,\n    getAriaValueText: getAriaValueTextProp,\n    isValidCharacter: isValidCharacterProp,\n    format: formatValue,\n    parse: parseValue,\n    ...htmlProps\n  } = props\n\n  const onFocus = useCallbackRef(onFocusProp)\n  const onBlur = useCallbackRef(onBlurProp)\n  const onInvalid = useCallbackRef(onInvalidProp)\n  const isValidCharacter = useCallbackRef(\n    isValidCharacterProp ?? isFloatingPointNumericCharacter,\n  )\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useState(false)\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const inputSelectionRef = useRef<InputSelection | null>(null)\n  const incrementButtonRef = useRef<HTMLButtonElement>(null)\n  const decrementButtonRef = useRef<HTMLButtonElement>(null)\n\n  const sanitize = useCallback(\n    (value: string) => value.split(\"\").filter(isValidCharacter).join(\"\"),\n    [isValidCharacter],\n  )\n\n  const parse = useCallback(\n    (value: string) => parseValue?.(value) ?? value,\n    [parseValue],\n  )\n\n  const format = useCallback(\n    (value: string | number) => (formatValue?.(value) ?? value).toString(),\n    [formatValue],\n  )\n\n  useUpdateEffect(() => {\n    if (counter.valueAsNumber > max) {\n      onInvalid?.(\"rangeOverflow\", format(counter.value), counter.valueAsNumber)\n    } else if (counter.valueAsNumber < min) {\n      onInvalid?.(\"rangeOverflow\", format(counter.value), counter.valueAsNumber)\n    }\n  }, [counter.valueAsNumber, counter.value, format, onInvalid])\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value != counter.value\n    if (notInSync) {\n      const parsedInput = parse(inputRef.current.value)\n      counter.setValue(sanitize(parsedInput))\n    }\n  }, [parse, sanitize])\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  useAttributeObserver(\n    incrementButtonRef,\n    \"disabled\",\n    spinner.stop,\n    spinner.isSpinning,\n  )\n  useAttributeObserver(\n    decrementButtonRef,\n    \"disabled\",\n    spinner.stop,\n    spinner.isSpinning,\n  )\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      const evt = event.nativeEvent as InputEvent\n      if (evt.isComposing) return\n      const parsedInput = parse(event.currentTarget.value)\n      updateFn(sanitize(parsedInput))\n      inputSelectionRef.current = {\n        start: event.currentTarget.selectionStart,\n        end: event.currentTarget.selectionEnd,\n      }\n    },\n    [updateFn, sanitize, parse],\n  )\n\n  const _onFocus = useCallback(\n    (event: React.FocusEvent<HTMLInputElement>) => {\n      onFocus?.(event)\n      if (!inputSelectionRef.current) return\n      /**\n       * restore selection if custom format string replacement moved it to the end\n       */\n      event.target.selectionStart =\n        inputSelectionRef.current.start ?? event.currentTarget.value?.length\n      event.currentTarget.selectionEnd =\n        inputSelectionRef.current.end ?? event.currentTarget.selectionStart\n    },\n    [onFocus],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.nativeEvent.isComposing) return\n\n      if (!isValidNumericKeyboardEvent(event, isValidCharacter)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [isValidCharacter, stepProp, increment, decrement, updateFn, min, max],\n  )\n\n  const getStepFactor = <\n    Event extends React.KeyboardEvent | React.WheelEvent | WheelEvent,\n  >(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = useMemo(() => {\n    const text = getAriaValueText?.(counter.value)\n    if (text != null) return text\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }, [counter.value, getAriaValueText])\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = useCallback(() => {\n    let next = counter.value as string | number\n    if (counter.value === \"\") return\n\n    const valueStartsWithE = /^[eE]/.test(counter.value.toString())\n\n    if (valueStartsWithE) {\n      counter.setValue(\"\")\n    } else {\n      if (counter.valueAsNumber < min) {\n        next = min\n      }\n      if (counter.valueAsNumber > max) {\n        next = max\n      }\n\n      counter.cast(next)\n    }\n  }, [counter, max, min])\n\n  const onInputBlur = useCallback(() => {\n    setFocused(false)\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = useCallback(() => {\n    if (focusInputOnChange) {\n      requestAnimationFrame(() => {\n        inputRef.current?.focus()\n      })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = useCallback(\n    (event: React.PointerEvent) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = useCallback(\n    (event: React.PointerEvent) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  useEventListener(\n    () => inputRef.current,\n    \"wheel\",\n    (event: WheelEvent) => {\n      const doc = inputRef.current?.ownerDocument ?? document\n      const isInputFocused = doc.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    { passive: false },\n  )\n\n  const getIncrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref: mergeRefs(ref, incrementButtonRef),\n        role: \"button\",\n        tabIndex: -1,\n        onPointerDown: callAllHandlers(props.onPointerDown, (event) => {\n          if (event.button !== 0 || disabled) return\n          spinUp(event)\n        }),\n        onPointerLeave: callAllHandlers(props.onPointerLeave, spinner.stop),\n        onPointerUp: callAllHandlers(props.onPointerUp, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled],\n  )\n\n  const getDecrementButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref: mergeRefs(ref, decrementButtonRef),\n        role: \"button\",\n        tabIndex: -1,\n        onPointerDown: callAllHandlers(props.onPointerDown, (event) => {\n          if (event.button !== 0 || disabled) return\n          spinDown(event)\n        }),\n        onPointerLeave: callAllHandlers(props.onPointerLeave, spinner.stop),\n        onPointerUp: callAllHandlers(props.onPointerUp, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled],\n  )\n\n  const getInputProps: PropGetter<InputDOMAttributes, InputDOMAttributes> =\n    useCallback(\n      (props = {}, ref = null) => ({\n        name,\n        inputMode,\n        type: \"text\",\n        pattern,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-label\": ariaLabel,\n        \"aria-describedby\": ariaDescBy,\n        id,\n        disabled: isDisabled,\n        ...props,\n        readOnly: props.readOnly ?? isReadOnly,\n        \"aria-readonly\": props.readOnly ?? isReadOnly,\n        \"aria-required\": props.required ?? isRequired,\n        required: props.required ?? isRequired,\n        ref: mergeRefs(inputRef, ref),\n        value: format(counter.value),\n        role: \"spinbutton\",\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n          ? undefined\n          : counter.valueAsNumber,\n        \"aria-invalid\": ariaAttr(isInvalid ?? counter.isOutOfRange),\n        \"aria-valuetext\": ariaValueText,\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        onChange: callAllHandlers(props.onChange, onChange),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(props.onFocus, _onFocus, () =>\n          setFocused(true),\n        ),\n        onBlur: callAllHandlers(props.onBlur, onBlur, onInputBlur),\n      }),\n      [\n        name,\n        inputMode,\n        pattern,\n        ariaLabelledBy,\n        ariaLabel,\n        format,\n        ariaDescBy,\n        id,\n        isDisabled,\n        isRequired,\n        isReadOnly,\n        isInvalid,\n        counter.value,\n        counter.valueAsNumber,\n        counter.isOutOfRange,\n        min,\n        max,\n        ariaValueText,\n        onChange,\n        onKeyDown,\n        _onFocus,\n        onBlur,\n        onInputBlur,\n      ],\n    )\n\n  return {\n    value: format(counter.value),\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"]},"metadata":{},"sourceType":"module"}