{"ast":null,"code":"'use client';\n\nimport { Box } from \"./chunk-PULVB27S.mjs\"; // src/highlight.tsx\n\nimport { forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { Fragment, useMemo } from \"react\";\nimport { Fragment as Fragment2, jsx } from \"react/jsx-runtime\";\n\nvar escapeRegexp = term => term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, char => `\\\\${char}`);\n\nfunction buildRegex(query) {\n  const _query = query.filter(text => text.length !== 0).map(text => escapeRegexp(text.trim()));\n\n  if (!_query.length) {\n    return null;\n  }\n\n  return new RegExp(`(${_query.join(\"|\")})`, \"ig\");\n}\n\nfunction highlightWords(_ref) {\n  let {\n    text,\n    query\n  } = _ref;\n  const regex = buildRegex(Array.isArray(query) ? query : [query]);\n\n  if (!regex) {\n    return [{\n      text,\n      match: false\n    }];\n  }\n\n  const result = text.split(regex).filter(Boolean);\n  return result.map(str => ({\n    text: str,\n    match: regex.test(str)\n  }));\n}\n\nfunction useHighlight(props) {\n  const {\n    text,\n    query\n  } = props;\n  return useMemo(() => highlightWords({\n    text,\n    query\n  }), [text, query]);\n}\n\nvar Mark = forwardRef(function Mark2(props, ref) {\n  const styles = useStyleConfig(\"Mark\", props);\n  const ownProps = omitThemingProps(props);\n  return /* @__PURE__ */jsx(Box, {\n    ref,\n    ...ownProps,\n    as: \"mark\",\n    __css: {\n      bg: \"transparent\",\n      whiteSpace: \"nowrap\",\n      ...styles\n    }\n  });\n});\n\nfunction Highlight(props) {\n  const {\n    children,\n    query,\n    styles\n  } = props;\n\n  if (typeof children !== \"string\") {\n    throw new Error(\"The children prop of Highlight must be a string\");\n  }\n\n  const chunks = useHighlight({\n    query,\n    text: children\n  });\n  return /* @__PURE__ */jsx(Fragment2, {\n    children: chunks.map((chunk, index) => {\n      return chunk.match ? /* @__PURE__ */jsx(Mark, {\n        sx: styles,\n        children: chunk.text\n      }, index) : /* @__PURE__ */jsx(Fragment, {\n        children: chunk.text\n      }, index);\n    })\n  });\n}\n\nexport { useHighlight, Mark, Highlight };","map":{"version":3,"mappings":";;;;AAAA,SACEA,UADF,EAGEC,gBAHF,EAMEC,cANF,QAOO,mBAPP;AAQA,SAASC,QAAT,EAAmBC,OAAnB,QAAkC,OAAlC;AAuDI,SAwBAD,qBAxBA;;AA1CJ,IAAME,eAAgBC,IAAD,IACnBA,KAAKC,OAAL,CAAa,sBAAb,EAAsCC,IAAD,IAAkB,KAAKA,MAA5D,CADF;;AAGA,SAASC,UAAT,CAAoBC,KAApB,EAAqC;EACnC,MAAMC,SAASD,MACZE,MADY,CACJC,IAAD,IAAUA,KAAKC,MAAL,KAAgB,CADrB,EAEZC,GAFY,CAEPF,IAAD,IAAUR,aAAaQ,KAAKG,IAAL,EAAb,CAFF,CAAf;;EAGA,IAAI,CAACL,OAAOG,MAAZ,EAAoB;IAClB,OAAO,IAAP;EACF;;EAEA,OAAO,IAAIG,MAAJ,CAAW,IAAIN,OAAOO,IAAP,CAAY,GAAZ,CAAe,GAA9B,EAAoC,IAApC,CAAP;AACF;;AAEA,SAASC,cAAT,OAAoE;EAAA,IAA5C;IAAEN,IAAF;IAAQH;EAAR,CAA4C;EAClE,MAAMU,QAAQX,WAAWY,MAAMC,OAAN,CAAcZ,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA1C,CAAd;;EACA,IAAI,CAACU,KAAL,EAAY;IACV,OAAO,CAAC;MAAEP,IAAF;MAAQU,OAAO;IAAf,CAAD,CAAP;EACF;;EACA,MAAMC,SAASX,KAAKY,KAAL,CAAWL,KAAX,EAAkBR,MAAlB,CAAyBc,OAAzB,CAAf;EACA,OAAOF,OAAOT,GAAP,CAAYY,GAAD,KAAU;IAAEd,MAAMc,GAAR;IAAaJ,OAAOH,MAAMQ,IAAN,CAAWD,GAAX;EAApB,CAAV,CAAX,CAAP;AACF;;AAIO,SAASE,YAAT,CAAsBC,KAAtB,EAAgD;EACrD,MAAM;IAAEjB,IAAF;IAAQH;EAAR,IAAkBoB,KAAxB;EACA,OAAO1B,QAAQ,MAAMe,eAAe;IAAEN,IAAF;IAAQH;EAAR,CAAf,CAAd,EAA+C,CAACG,IAAD,EAAOH,KAAP,CAA/C,CAAP;AACF;;AAUO,IAAMqB,OAAO/B,WAA8B,SAAS+B,KAAT,CAAcD,KAAd,EAAqBE,GAArB,EAA0B;EAC1E,MAAMC,SAAS/B,eAAe,MAAf,EAAuB4B,KAAvB,CAAf;EACA,MAAMI,WAAWjC,iBAAiB6B,KAAjB,CAAjB;EACA,OACE,mBAACK,GAAD,EAAC;IACCH,GADD;IAEE,GAAGE,QAFL;IAGCE,IAAG,MAHJ;IAICC,OAAO;MAAEC,IAAI,aAAN;MAAqBC,YAAY,QAAjC;MAA2C,GAAGN;IAA9C;EAJR,CAAD,CADF;AAQD,CAXmB,CAAb;;AAkBA,SAASO,SAAT,CAAmBV,KAAnB,EAAuD;EAC5D,MAAM;IAAEW,QAAF;IAAY/B,KAAZ;IAAmBuB;EAAnB,IAA8BH,KAApC;;EAEA,IAAI,OAAOW,QAAP,KAAoB,QAAxB,EAAkC;IAChC,MAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;EACF;;EAEA,MAAMC,SAASd,aAAa;IAAEnB,KAAF;IAASG,MAAM4B;EAAf,CAAb,CAAf;EAEA,OACE;IACGA,iBAAO1B,GAAP,CAAW,CAAC6B,KAAD,EAAQC,KAAR,KAAkB;MAC5B,OAAOD,MAAMrB,KAAN,GACL,mBAACQ,IAAD,EAAC;QAAiBe,IAAIb,MAArB;QACEQ,gBAAM5B;MADR,CAAD,EAAWgC,KAAX,CADK,GAKL,mBAAC1C,QAAD,EAAC;QAAsBsC,gBAAM5B;MAA5B,CAAD,EAAegC,KAAf,CALF;IAOD,CARA;EADH,EADF;AAaF","names":["forwardRef","omitThemingProps","useStyleConfig","Fragment","useMemo","escapeRegexp","term","replace","char","buildRegex","query","_query","filter","text","length","map","trim","RegExp","join","highlightWords","regex","Array","isArray","match","result","split","Boolean","str","test","useHighlight","props","Mark","ref","styles","ownProps","Box","as","__css","bg","whiteSpace","Highlight","children","Error","chunks","chunk","index","sx"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\layout\\src\\highlight.tsx"],"sourcesContent":["import {\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { Fragment, useMemo } from \"react\"\nimport { Box } from \"./box\"\n\ntype Chunk = {\n  text: string\n  match: boolean\n}\n\ntype HighlightOptions = {\n  text: string\n  query: string | string[]\n}\n\nconst escapeRegexp = (term: string): string =>\n  term.replace(/[|\\\\{}()[\\]^$+*?.-]/g, (char: string) => `\\\\${char}`)\n\nfunction buildRegex(query: string[]) {\n  const _query = query\n    .filter((text) => text.length !== 0)\n    .map((text) => escapeRegexp(text.trim()))\n  if (!_query.length) {\n    return null\n  }\n\n  return new RegExp(`(${_query.join(\"|\")})`, \"ig\")\n}\n\nfunction highlightWords({ text, query }: HighlightOptions): Chunk[] {\n  const regex = buildRegex(Array.isArray(query) ? query : [query])\n  if (!regex) {\n    return [{ text, match: false }]\n  }\n  const result = text.split(regex).filter(Boolean)\n  return result.map((str) => ({ text: str, match: regex.test(str) }))\n}\n\nexport type UseHighlightProps = HighlightOptions\n\nexport function useHighlight(props: UseHighlightProps) {\n  const { text, query } = props\n  return useMemo(() => highlightWords({ text, query }), [text, query])\n}\n\nexport type HighlightProps = {\n  query: string | string[]\n  children: string | ((props: Chunk[]) => React.ReactNode)\n  styles?: SystemStyleObject\n}\n\nexport type MarkProps = ThemingProps<\"Mark\"> & HTMLChakraProps<\"mark\">\n\nexport const Mark = forwardRef<MarkProps, \"mark\">(function Mark(props, ref) {\n  const styles = useStyleConfig(\"Mark\", props)\n  const ownProps = omitThemingProps(props)\n  return (\n    <Box\n      ref={ref}\n      {...ownProps}\n      as=\"mark\"\n      __css={{ bg: \"transparent\", whiteSpace: \"nowrap\", ...styles }}\n    />\n  )\n})\n\n/**\n * `Highlight` allows you to highlight substrings of a text.\n *\n * @see Docs https://chakra-ui.com/docs/components/highlight\n */\nexport function Highlight(props: HighlightProps): JSX.Element {\n  const { children, query, styles } = props\n\n  if (typeof children !== \"string\") {\n    throw new Error(\"The children prop of Highlight must be a string\")\n  }\n\n  const chunks = useHighlight({ query, text: children })\n\n  return (\n    <>\n      {chunks.map((chunk, index) => {\n        return chunk.match ? (\n          <Mark key={index} sx={styles}>\n            {chunk.text}\n          </Mark>\n        ) : (\n          <Fragment key={index}>{chunk.text}</Fragment>\n        )\n      })}\n    </>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}