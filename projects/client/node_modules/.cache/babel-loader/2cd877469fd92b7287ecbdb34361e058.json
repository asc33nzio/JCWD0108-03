{"ast":null,"code":"'use client'; // src/anatomy.ts\n\nfunction anatomy(name) {\n  let map = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let called = false;\n\n  function assert() {\n    if (!called) {\n      called = true;\n      return;\n    }\n\n    throw new Error(\"[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?\");\n  }\n\n  function parts() {\n    assert();\n\n    for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n      values[_key] = arguments[_key];\n    }\n\n    for (const part of values) {\n      ;\n      map[part] = toPart(part);\n    }\n\n    return anatomy(name, map);\n  }\n\n  function extend() {\n    for (var _len2 = arguments.length, parts2 = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      parts2[_key2] = arguments[_key2];\n    }\n\n    for (const part of parts2) {\n      if (part in map) continue;\n      map[part] = toPart(part);\n    }\n\n    return anatomy(name, map);\n  }\n\n  function selectors() {\n    const value = Object.fromEntries(Object.entries(map).map(_ref => {\n      let [key, part] = _ref;\n      return [key, part.selector];\n    }));\n    return value;\n  }\n\n  function classnames() {\n    const value = Object.fromEntries(Object.entries(map).map(_ref2 => {\n      let [key, part] = _ref2;\n      return [key, part.className];\n    }));\n    return value;\n  }\n\n  function toPart(part) {\n    const el = [\"container\", \"root\"].includes(part != null ? part : \"\") ? [name] : [name, part];\n    const attr = el.filter(Boolean).join(\"__\");\n    const className = `chakra-${attr}`;\n    const partObj = {\n      className,\n      selector: `.${className}`,\n      toString: () => part\n    };\n    return partObj;\n  }\n\n  const __type = {};\n  return {\n    parts,\n    toPart,\n    extend,\n    selectors,\n    classnames,\n\n    get keys() {\n      return Object.keys(map);\n    },\n\n    __type\n  };\n}\n\nexport { anatomy };","map":{"version":3,"mappings":";;AAIO,SAASA,OAAT,CACLC,IADK,EAGO;EAAA,IADZC,GACY,uEADN,EACM;EACZ,IAAIC,SAAS,KAAb;;EAMA,SAASC,MAAT,GAAkB;IAChB,IAAI,CAACD,MAAL,EAAa;MACXA,SAAS,IAAT;MACA;IACF;;IAEA,MAAM,IAAIE,KAAJ,CACJ,qFADI,CAAN;EAGF;;EAKA,SAASC,KAAT,GAAiD;IAC/CF;;IAD+C,kCAAbG,MAAa;MAAbA,MAAa;IAAA;;IAE/C,WAAWC,IAAX,IAAmBD,MAAnB,EAA2B;MACzB;MAAEL,IAAYM,IAAZ,IAAoBC,OAAOD,IAAP,CAApB;IACJ;;IACA,OAAOR,QAAQC,IAAR,EAAcC,GAAd,CAAP;EACF;;EAKA,SAASQ,MAAT,GAAiD;IAAA,mCAAZJ,MAAY;MAAZA,MAAY;IAAA;;IAC/C,WAAWE,IAAX,IAAmBF,MAAnB,EAA0B;MACxB,IAAIE,QAAQN,GAAZ,EAAiB;MACfA,IAAYM,IAAZ,IAAoBC,OAAOD,IAAP,CAApB;IACJ;;IACA,OAAOR,QAAQC,IAAR,EAAcC,GAAd,CAAP;EACF;;EAKA,SAASS,SAAT,GAAqB;IACnB,MAAMC,QAAQC,OAAOC,WAAP,CACZD,OAAOE,OAAP,CAAeb,GAAf,EAAoBA,GAApB,CAAwB;MAAA,IAAC,CAACc,GAAD,EAAMR,IAAN,CAAD;MAAA,OAAiB,CAACQ,GAAD,EAAOR,KAAaS,QAApB,CAAjB;IAAA,CAAxB,CADY,CAAd;IAGA,OAAOL,KAAP;EACF;;EAKA,SAASM,UAAT,GAAsB;IACpB,MAAMN,QAAQC,OAAOC,WAAP,CACZD,OAAOE,OAAP,CAAeb,GAAf,EAAoBA,GAApB,CAAwB;MAAA,IAAC,CAACc,GAAD,EAAMR,IAAN,CAAD;MAAA,OAAiB,CAACQ,GAAD,EAAOR,KAAaW,SAApB,CAAjB;IAAA,CAAxB,CADY,CAAd;IAGA,OAAOP,KAAP;EACF;;EAKA,SAASH,MAAT,CAAgBD,IAAhB,EAA8B;IAC5B,MAAMY,KAAK,CAAC,WAAD,EAAc,MAAd,EAAsBC,QAAtB,CAA+Bb,sBAAQ,EAAvC,IACP,CAACP,IAAD,CADO,GAEP,CAACA,IAAD,EAAOO,IAAP,CAFJ;IAGA,MAAMc,OAAOF,GAAGG,MAAH,CAAUC,OAAV,EAAmBC,IAAnB,CAAwB,IAAxB,CAAb;IACA,MAAMN,YAAY,UAAUG,MAA5B;IAEA,MAAMI,UAAU;MACdP,SADc;MAEdF,UAAU,IAAIE,WAFA;MAGdQ,UAAU,MAAMnB;IAHF,CAAhB;IAMA,OAAOkB,OAAP;EACF;;EAKA,MAAME,SAAS,EAAf;EAEA,OAAO;IACLtB,KADK;IAELG,MAFK;IAGLC,MAHK;IAILC,SAJK;IAKLO,UALK;;IAML,IAAIW,IAAJ,GAAgB;MACd,OAAOhB,OAAOgB,IAAP,CAAY3B,GAAZ,CAAP;IACF,CARK;;IASL0B;EATK,CAAP;AAWF","names":["anatomy","name","map","called","assert","Error","parts","values","part","toPart","extend","selectors","value","Object","fromEntries","entries","key","selector","classnames","className","el","includes","attr","filter","Boolean","join","partObj","toString","__type","keys"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\anatomy\\src\\anatomy.ts"],"sourcesContent":["/**\n * Used to define the anatomy/parts of a component in a way that provides\n * a consistent API for `className`, css selector and `theming`.\n */\nexport function anatomy<T extends string = string>(\n  name: string,\n  map = {} as Record<T, Part>,\n): Anatomy<T> {\n  let called = false\n\n  /**\n   * Prevents user from calling `.parts` multiple times.\n   * It should only be called once.\n   */\n  function assert() {\n    if (!called) {\n      called = true\n      return\n    }\n\n    throw new Error(\n      \"[anatomy] .part(...) should only be called once. Did you mean to use .extend(...) ?\",\n    )\n  }\n\n  /**\n   * Add the core parts of the components\n   */\n  function parts<V extends string>(...values: V[]) {\n    assert()\n    for (const part of values) {\n      ;(map as any)[part] = toPart(part)\n    }\n    return anatomy(name, map) as unknown as Omit<Anatomy<V>, \"parts\">\n  }\n\n  /**\n   * Extend the component anatomy to includes new parts\n   */\n  function extend<U extends string>(...parts: U[]) {\n    for (const part of parts) {\n      if (part in map) continue\n      ;(map as any)[part] = toPart(part)\n    }\n    return anatomy(name, map) as unknown as Omit<Anatomy<T | U>, \"parts\">\n  }\n\n  /**\n   * Get all selectors for the component anatomy\n   */\n  function selectors() {\n    const value = Object.fromEntries(\n      Object.entries(map).map(([key, part]) => [key, (part as any).selector]),\n    )\n    return value as Record<T, string>\n  }\n\n  /**\n   * Get all classNames for the component anatomy\n   */\n  function classnames() {\n    const value = Object.fromEntries(\n      Object.entries(map).map(([key, part]) => [key, (part as any).className]),\n    )\n    return value as Record<T, string>\n  }\n\n  /**\n   * Creates the part object for the given part\n   */\n  function toPart(part: string) {\n    const el = [\"container\", \"root\"].includes(part ?? \"\")\n      ? [name]\n      : [name, part]\n    const attr = el.filter(Boolean).join(\"__\")\n    const className = `chakra-${attr}`\n\n    const partObj = {\n      className,\n      selector: `.${className}`,\n      toString: () => part,\n    }\n\n    return partObj as typeof partObj & string\n  }\n\n  /**\n   * Used to get the derived type of the anatomy\n   */\n  const __type = {} as T\n\n  return {\n    parts,\n    toPart,\n    extend,\n    selectors,\n    classnames,\n    get keys(): T[] {\n      return Object.keys(map) as T[]\n    },\n    __type,\n  }\n}\n\ntype Part = {\n  className: string\n  selector: string\n  toString: () => string\n}\n\ntype Anatomy<T extends string> = {\n  parts: <V extends string>(...values: V[]) => Omit<Anatomy<V>, \"parts\">\n  toPart: (part: string) => Part\n  extend: <U extends string>(...parts: U[]) => Omit<Anatomy<T | U>, \"parts\">\n  selectors: () => Record<T, string>\n  classnames: () => Record<T, string>\n  keys: T[]\n  __type: T\n}\n"]},"metadata":{},"sourceType":"module"}