{"ast":null,"code":"'use client'; // src/switch.tsx\n\nimport { useCheckbox } from \"@chakra-ui/checkbox\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar Switch = forwardRef(function Switch2(props, ref) {\n  const styles = useMultiStyleConfig(\"Switch\", props);\n  const {\n    spacing = \"0.5rem\",\n    children,\n    ...ownProps\n  } = omitThemingProps(props);\n  const {\n    getIndicatorProps,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps\n  } = useCheckbox(ownProps);\n  const containerStyles = useMemo(() => ({\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    lineHeight: 0,\n    ...styles.container\n  }), [styles.container]);\n  const trackStyles = useMemo(() => ({\n    display: \"inline-flex\",\n    flexShrink: 0,\n    justifyContent: \"flex-start\",\n    boxSizing: \"content-box\",\n    cursor: \"pointer\",\n    ...styles.track\n  }), [styles.track]);\n  const labelStyles = useMemo(() => ({\n    userSelect: \"none\",\n    marginStart: spacing,\n    ...styles.label\n  }), [spacing, styles.label]);\n  return /* @__PURE__ */jsxs(chakra.label, { ...getRootProps(),\n    className: cx(\"chakra-switch\", props.className),\n    __css: containerStyles,\n    children: [/* @__PURE__ */jsx(\"input\", {\n      className: \"chakra-switch__input\",\n      ...getInputProps({}, ref)\n    }), /* @__PURE__ */jsx(chakra.span, { ...getCheckboxProps(),\n      className: \"chakra-switch__track\",\n      __css: trackStyles,\n      children: /* @__PURE__ */jsx(chakra.span, {\n        __css: styles.thumb,\n        className: \"chakra-switch__thumb\",\n        ...getIndicatorProps()\n      })\n    }), children && /* @__PURE__ */jsx(chakra.span, {\n      className: \"chakra-switch__label\",\n      ...getLabelProps(),\n      __css: labelStyles,\n      children\n    })]\n  });\n});\nSwitch.displayName = \"Switch\";\nexport { Switch };","map":{"version":3,"mappings":";;AAAA,SAASA,WAAT,QAA8C,qBAA9C;AACA,SAASC,EAAT,QAAmB,yBAAnB;AACA,SACEC,MADF,EAEEC,UAFF,EAIEC,gBAJF,EAQEC,mBARF,QASO,mBATP;AAUA,SAASC,OAAT,QAAwB,OAAxB;AAqEI,SAKEC,GALF;AAjDG,IAAMC,SAASL,WAAiC,SAASK,OAAT,CACrDC,KADqD,EAErDC,GAFqD,EAGrD;EACA,MAAMC,SAASN,oBAAoB,QAApB,EAA8BI,KAA9B,CAAf;EAEA,MAAM;IAAEG,UAAU,QAAZ;IAAsBC,QAAtB;IAAgC,GAAGC;EAAnC,IAAgDV,iBAAiBK,KAAjB,CAAtD;EAEA,MAAM;IACJM,iBADI;IAEJC,aAFI;IAGJC,gBAHI;IAIJC,YAJI;IAKJC;EALI,IAMFnB,YAAYc,QAAZ,CANJ;EAQA,MAAMM,kBAAqCd,QACzC,OAAO;IACLe,SAAS,cADJ;IAELC,UAAU,UAFL;IAGLC,eAAe,QAHV;IAILC,YAAY,CAJP;IAKL,GAAGb,OAAOc;EALL,CAAP,CADyC,EAQzC,CAACd,OAAOc,SAAR,CARyC,CAA3C;EAWA,MAAMC,cAAiCpB,QACrC,OAAO;IACLe,SAAS,aADJ;IAELM,YAAY,CAFP;IAGLC,gBAAgB,YAHX;IAILC,WAAW,aAJN;IAKLC,QAAQ,SALH;IAML,GAAGnB,OAAOoB;EANL,CAAP,CADqC,EASrC,CAACpB,OAAOoB,KAAR,CATqC,CAAvC;EAYA,MAAMC,cAAiC1B,QACrC,OAAO;IACL2B,YAAY,MADP;IAELC,aAAatB,OAFR;IAGL,GAAGD,OAAOwB;EAHL,CAAP,CADqC,EAMrC,CAACvB,OAAD,EAAUD,OAAOwB,KAAjB,CANqC,CAAvC;EASA,OACE,oBAACjC,OAAOiC,KAAR,EAAC,EACE,GAAGjB,cADL;IAECkB,WAAWnC,GAAG,eAAH,EAAoBQ,MAAM2B,SAA1B,CAFZ;IAGCC,OAAOjB,eAHR;IAKCP,8BAAC,OAAD,EAAC;MAAMuB,WAAU,sBAAhB;MAAwC,GAAGpB,cAAc,EAAd,EAAkBN,GAAlB;IAA3C,CAAD,GACA,mBAACR,OAAOoC,IAAR,EAAC,EACE,GAAGrB,kBADL;MAECmB,WAAU,sBAFX;MAGCC,OAAOX,WAHR;MAKCb,6BAACX,OAAOoC,IAAR,EAAC;QACCD,OAAO1B,OAAO4B,KADf;QAECH,WAAU,sBAFX;QAGE,GAAGrB;MAHL,CAAD;IALD,CAAD,CADA,EAYCF,YACC,mBAACX,OAAOoC,IAAR,EAAC;MACCF,WAAU,sBADX;MAEE,GAAGjB,eAFL;MAGCkB,OAAOL,WAHR;MAKEnB;IALF,CAAD,CAbF;EALD,CAAD,CADF;AA6BD,CA7EqB,CAAf;AA+EPL,OAAOgC,WAAP,GAAqB,QAArB","names":["useCheckbox","cx","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","useMemo","jsx","Switch","props","ref","styles","spacing","children","ownProps","getIndicatorProps","getInputProps","getCheckboxProps","getRootProps","getLabelProps","containerStyles","display","position","verticalAlign","lineHeight","container","trackStyles","flexShrink","justifyContent","boxSizing","cursor","track","labelStyles","userSelect","marginStart","label","className","__css","span","thumb","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\switch\\src\\switch.tsx"],"sourcesContent":["import { useCheckbox, UseCheckboxProps } from \"@chakra-ui/checkbox\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { useMemo } from \"react\"\n\nexport interface SwitchProps\n  extends Omit<UseCheckboxProps, \"isIndeterminate\">,\n    Omit<HTMLChakraProps<\"label\">, keyof UseCheckboxProps>,\n    ThemingProps<\"Switch\"> {\n  /**\n   * The spacing between the switch and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n}\n\n/**\n * The `Switch` component is used as an alternative for the checkbox component for switching between \"enabled\" and \"disabled\" states.\n *\n * @see Docs https://chakra-ui.com/docs/components/switch\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/switch/\n */\nexport const Switch = forwardRef<SwitchProps, \"input\">(function Switch(\n  props,\n  ref,\n) {\n  const styles = useMultiStyleConfig(\"Switch\", props)\n\n  const { spacing = \"0.5rem\", children, ...ownProps } = omitThemingProps(props)\n\n  const {\n    getIndicatorProps,\n    getInputProps,\n    getCheckboxProps,\n    getRootProps,\n    getLabelProps,\n  } = useCheckbox(ownProps)\n\n  const containerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-block\",\n      position: \"relative\",\n      verticalAlign: \"middle\",\n      lineHeight: 0,\n      ...styles.container,\n    }),\n    [styles.container],\n  )\n\n  const trackStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-flex\",\n      flexShrink: 0,\n      justifyContent: \"flex-start\",\n      boxSizing: \"content-box\",\n      cursor: \"pointer\",\n      ...styles.track,\n    }),\n    [styles.track],\n  )\n\n  const labelStyles: SystemStyleObject = useMemo(\n    () => ({\n      userSelect: \"none\",\n      marginStart: spacing,\n      ...styles.label,\n    }),\n    [spacing, styles.label],\n  )\n\n  return (\n    <chakra.label\n      {...getRootProps()}\n      className={cx(\"chakra-switch\", props.className)}\n      __css={containerStyles}\n    >\n      <input className=\"chakra-switch__input\" {...getInputProps({}, ref)} />\n      <chakra.span\n        {...getCheckboxProps()}\n        className=\"chakra-switch__track\"\n        __css={trackStyles}\n      >\n        <chakra.span\n          __css={styles.thumb}\n          className=\"chakra-switch__thumb\"\n          {...getIndicatorProps()}\n        />\n      </chakra.span>\n      {children && (\n        <chakra.span\n          className=\"chakra-switch__label\"\n          {...getLabelProps()}\n          __css={labelStyles}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n\nSwitch.displayName = \"Switch\"\n"]},"metadata":{},"sourceType":"module"}