{"ast":null,"code":"'use client'; // src/use-popover.ts\n\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\";\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\";\nimport { useFocusOnHide, useFocusOnShow } from \"@chakra-ui/react-use-focus-effect\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { popperCSSVars, usePopper } from \"@chakra-ui/popper\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { lazyDisclosure } from \"@chakra-ui/lazy-utils\";\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\";\nvar TRIGGER = {\n  click: \"click\",\n  hover: \"hover\"\n};\n\nfunction usePopover() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props;\n  const {\n    isOpen,\n    onClose,\n    onOpen,\n    onToggle\n  } = useDisclosure(props);\n  const anchorRef = useRef(null);\n  const triggerRef = useRef(null);\n  const popoverRef = useRef(null);\n  const isHoveringRef = useRef(false);\n  const hasBeenOpened = useRef(false);\n\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n\n  const [hasHeader, setHasHeader] = useState(false);\n  const [hasBody, setHasBody] = useState(false);\n  const uuid = useId();\n  const uid = id != null ? id : uuid;\n  const [triggerId, popoverId, headerId, bodyId] = [\"popover-trigger\", \"popover-content\", \"popover-header\", \"popover-body\"].map(id2 => `${id2}-${uid}`);\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate\n  } = usePopper({ ...popperProps,\n    enabled: isOpen || !!computePositionOnMount\n  });\n  const animated = useAnimationState({\n    isOpen,\n    ref: popoverRef\n  });\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef\n  });\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click\n  });\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click\n  });\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  const getPopoverProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    const popoverProps = { ...props2,\n      style: { ...props2.style,\n        transformOrigin: popperCSSVars.transformOrigin.varRef,\n        [popperCSSVars.arrowSize.var]: arrowSize ? `${arrowSize}px` : void 0,\n        [popperCSSVars.arrowShadowColor.var]: arrowShadowColor\n      },\n      ref: mergeRefs(popoverRef, _ref),\n      children: shouldRenderChildren ? props2.children : null,\n      id: popoverId,\n      tabIndex: -1,\n      role: \"dialog\",\n      onKeyDown: callAllHandlers(props2.onKeyDown, event => {\n        if (closeOnEsc && event.key === \"Escape\") {\n          onClose();\n        }\n      }),\n      onBlur: callAllHandlers(props2.onBlur, event => {\n        const relatedTarget = getRelatedTarget(event);\n        const targetIsPopover = contains(popoverRef.current, relatedTarget);\n        const targetIsTrigger = contains(triggerRef.current, relatedTarget);\n        const isValidBlur = !targetIsPopover && !targetIsTrigger;\n\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      }),\n      \"aria-labelledby\": hasHeader ? headerId : void 0,\n      \"aria-describedby\": hasBody ? bodyId : void 0\n    };\n\n    if (trigger === TRIGGER.hover) {\n      popoverProps.role = \"tooltip\";\n      popoverProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n      });\n      popoverProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, event => {\n        if (event.nativeEvent.relatedTarget === null) {\n          return;\n        }\n\n        isHoveringRef.current = false;\n        setTimeout(() => onClose(), closeDelay);\n      });\n    }\n\n    return popoverProps;\n  }, [shouldRenderChildren, popoverId, hasHeader, headerId, hasBody, bodyId, trigger, closeOnEsc, onClose, isOpen, closeOnBlur, closeDelay, arrowShadowColor, arrowSize]);\n  const getPopoverPositionerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return getPopperProps({ ...props2,\n      style: {\n        visibility: isOpen ? \"visible\" : \"hidden\",\n        ...props2.style\n      }\n    }, forwardedRef);\n  }, [isOpen, getPopperProps]);\n  const getAnchorProps = useCallback(function (props2) {\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    return { ...props2,\n      // If anchor is rendered, it is used as reference.\n      ref: mergeRefs(_ref, anchorRef, referenceRef)\n    };\n  }, [anchorRef, referenceRef]);\n  const openTimeout = useRef();\n  const closeTimeout = useRef();\n  const maybeReferenceRef = useCallback(node => {\n    if (anchorRef.current == null) {\n      referenceRef(node);\n    }\n  }, [referenceRef]);\n  const getTriggerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    let _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    const triggerProps = { ...props2,\n      ref: mergeRefs(triggerRef, _ref, maybeReferenceRef),\n      id: triggerId,\n      \"aria-haspopup\": \"dialog\",\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": popoverId\n    };\n\n    if (trigger === TRIGGER.click) {\n      triggerProps.onClick = callAllHandlers(props2.onClick, onToggle);\n    }\n\n    if (trigger === TRIGGER.hover) {\n      triggerProps.onFocus = callAllHandlers(props2.onFocus, () => {\n        if (openTimeout.current === void 0) {\n          onOpen();\n        }\n      });\n      triggerProps.onBlur = callAllHandlers(props2.onBlur, event => {\n        const relatedTarget = getRelatedTarget(event);\n        const isValidBlur = !contains(popoverRef.current, relatedTarget);\n\n        if (isOpen && closeOnBlur && isValidBlur) {\n          onClose();\n        }\n      });\n      triggerProps.onKeyDown = callAllHandlers(props2.onKeyDown, event => {\n        if (event.key === \"Escape\") {\n          onClose();\n        }\n      });\n      triggerProps.onMouseEnter = callAllHandlers(props2.onMouseEnter, () => {\n        isHoveringRef.current = true;\n        openTimeout.current = window.setTimeout(() => onOpen(), openDelay);\n      });\n      triggerProps.onMouseLeave = callAllHandlers(props2.onMouseLeave, () => {\n        isHoveringRef.current = false;\n\n        if (openTimeout.current) {\n          clearTimeout(openTimeout.current);\n          openTimeout.current = void 0;\n        }\n\n        closeTimeout.current = window.setTimeout(() => {\n          if (isHoveringRef.current === false) {\n            onClose();\n          }\n        }, closeDelay);\n      });\n    }\n\n    return triggerProps;\n  }, [triggerId, isOpen, popoverId, trigger, maybeReferenceRef, onToggle, onOpen, closeOnBlur, onClose, openDelay, closeDelay]);\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current);\n      }\n\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current);\n      }\n    };\n  }, []);\n  const getHeaderProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      id: headerId,\n      ref: mergeRefs(ref, node => {\n        setHasHeader(!!node);\n      })\n    };\n  }, [headerId]);\n  const getBodyProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      id: bodyId,\n      ref: mergeRefs(ref, node => {\n        setHasBody(!!node);\n      })\n    };\n  }, [bodyId]);\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps\n  };\n}\n\nfunction contains(parent, child) {\n  return parent === child || (parent == null ? void 0 : parent.contains(child));\n}\n\nfunction getRelatedTarget(event) {\n  var _a;\n\n  const activeEl = event.currentTarget.ownerDocument.activeElement;\n  return (_a = event.relatedTarget) != null ? _a : activeEl;\n}\n\nexport { usePopover };","map":{"version":3,"mappings":"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","names":["useAnimationState","useFocusOnPointerDown","useFocusOnHide","useFocusOnShow","useDisclosure","popperCSSVars","usePopper","mergeRefs","callAllHandlers","lazyDisclosure","useCallback","useEffect","useId","useRef","useState","TRIGGER","click","hover","usePopover","props","closeOnBlur","closeOnEsc","initialFocusRef","id","returnFocusOnClose","autoFocus","arrowSize","arrowShadowColor","trigger","openDelay","closeDelay","isLazy","lazyBehavior","computePositionOnMount","popperProps","isOpen","onClose","onOpen","onToggle","anchorRef","triggerRef","popoverRef","isHoveringRef","hasBeenOpened","current","hasHeader","setHasHeader","hasBody","setHasBody","uuid","uid","triggerId","popoverId","headerId","bodyId","map","referenceRef","getArrowProps","getPopperProps","getArrowInnerProps","forceUpdate","enabled","animated","ref","focusRef","visible","shouldFocus","shouldRenderChildren","wasSelected","mode","isSelected","present","getPopoverProps","_ref","popoverProps","style","transformOrigin","varRef","var","children","tabIndex","role","onKeyDown","event","key","onBlur","relatedTarget","getRelatedTarget","targetIsPopover","contains","targetIsTrigger","isValidBlur","onMouseEnter","onMouseLeave","nativeEvent","setTimeout","getPopoverPositionerProps","forwardedRef","visibility","getAnchorProps","openTimeout","closeTimeout","maybeReferenceRef","node","getTriggerProps","triggerProps","onClick","onFocus","window","clearTimeout","getHeaderProps","getBodyProps","onAnimationComplete","onComplete","parent","child","activeEl","currentTarget","ownerDocument","activeElement","_a"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\popover\\src\\use-popover.ts"],"sourcesContent":["import { useAnimationState } from \"@chakra-ui/react-use-animation-state\"\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\"\nimport {\n  useFocusOnHide,\n  useFocusOnShow,\n} from \"@chakra-ui/react-use-focus-effect\"\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\"\nimport { popperCSSVars, usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport { DOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\nimport { useCallback, useEffect, useId, useRef, useState } from \"react\"\n\nconst TRIGGER = {\n  click: \"click\",\n  hover: \"hover\",\n} as const\n\nexport interface UsePopoverProps extends Omit<UsePopperProps, \"enabled\"> {\n  /**\n   * The html `id` attribute of the popover.\n   * If not provided, we generate a unique id.\n   *\n   * This `id` is also used to auto-generate the `aria-labelledby`\n   * and `aria-describedby` attributes that points to the `PopoverHeader` and `PopoverBody`\n   */\n  id?: string\n  /**\n   * If `true`, the popover will be opened in controlled mode.\n   */\n  isOpen?: boolean\n  /**\n   * If `true`, the popover will be initially opened.\n   */\n  defaultIsOpen?: boolean\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: React.RefObject<{ focus(): void }>\n  /**\n   * If `true`, focus will be returned to the element that triggers the popover\n   * when it closes\n   * @default true\n   */\n  returnFocusOnClose?: boolean\n  /**\n   * If `true`, focus will be transferred to the first interactive element\n   * when the popover opens\n   * @default true\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, the popover will close when you blur out it by\n   * clicking outside or tabbing out\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the popover will close when you hit the `Esc` key\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the popover opens\n   */\n  onOpen?: () => void\n  /**\n   * Callback fired when the popover closes\n   */\n  onClose?: () => void\n  /**\n   * The size of the popover arrow\n   */\n  arrowSize?: number\n  /**\n   * The `box-shadow` of the popover arrow\n   */\n  arrowShadowColor?: string\n  /**\n   * The interaction that triggers the popover.\n   *\n   * `hover` - means the popover will open when you hover with mouse or\n   * focus with keyboard on the popover trigger\n   *\n   * `click` - means the popover will open on click or\n   * press `Enter` to `Space` on keyboard\n   *\n   * @default \"click\"\n   */\n  trigger?: keyof typeof TRIGGER\n  /**\n   * Delay in milliseconds before the popover opens after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  openDelay?: number\n  /**\n   * Delay in milliseconds before the popover closes after a trigger event.\n   * Only works when `trigger=\"hover\"`\n   *\n   * @default 200\n   */\n  closeDelay?: number\n  /**\n   * Performance 🚀:\n   * If `true`, the PopoverContent rendering will be deferred\n   * until the popover is open.\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of popover's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The popover's content is always unmounted when not open.\n   * - \"keepMounted\": The popover's content initially unmounted,\n   * but stays mounted when popover is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * If `true`, the popover will be positioned when it mounts\n   * (even if it's not open)\n   *\n   * Note 🚨: We don't recommend using this in a popover/menu intensive UI or page\n   * as it might affect scrolling performance.\n   */\n  computePositionOnMount?: boolean\n}\n\n/**\n * @internal\n */\nexport function usePopover(props: UsePopoverProps = {}) {\n  const {\n    closeOnBlur = true,\n    closeOnEsc = true,\n    initialFocusRef,\n    id,\n    returnFocusOnClose = true,\n    autoFocus = true,\n    arrowSize,\n    arrowShadowColor,\n    trigger = TRIGGER.click,\n    openDelay = 200,\n    closeDelay = 200,\n    isLazy,\n    lazyBehavior = \"unmount\",\n    computePositionOnMount,\n    ...popperProps\n  } = props\n\n  const { isOpen, onClose, onOpen, onToggle } = useDisclosure(props)\n\n  const anchorRef = useRef<HTMLElement>(null)\n  const triggerRef = useRef<HTMLElement>(null)\n  const popoverRef = useRef<HTMLElement>(null)\n\n  const isHoveringRef = useRef(false)\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const [hasHeader, setHasHeader] = useState(false)\n  const [hasBody, setHasBody] = useState(false)\n\n  const uuid = useId()\n  const uid = id ?? uuid\n  const [triggerId, popoverId, headerId, bodyId] = [\n    \"popover-trigger\",\n    \"popover-content\",\n    \"popover-header\",\n    \"popover-body\",\n  ].map((id) => `${id}-${uid}`)\n\n  const {\n    referenceRef,\n    getArrowProps,\n    getPopperProps,\n    getArrowInnerProps,\n    forceUpdate,\n  } = usePopper({\n    ...popperProps,\n    enabled: isOpen || !!computePositionOnMount,\n  })\n\n  const animated = useAnimationState({ isOpen, ref: popoverRef })\n\n  useFocusOnPointerDown({\n    enabled: isOpen,\n    ref: triggerRef,\n  })\n\n  useFocusOnHide(popoverRef, {\n    focusRef: triggerRef,\n    visible: isOpen,\n    shouldFocus: returnFocusOnClose && trigger === TRIGGER.click,\n  })\n\n  useFocusOnShow(popoverRef, {\n    focusRef: initialFocusRef,\n    visible: isOpen,\n    shouldFocus: autoFocus && trigger === TRIGGER.click,\n  })\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present,\n  })\n\n  const getPopoverProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const popoverProps: DOMAttributes = {\n        ...props,\n        style: {\n          ...props.style,\n          transformOrigin: popperCSSVars.transformOrigin.varRef,\n          [popperCSSVars.arrowSize.var]: arrowSize\n            ? `${arrowSize}px`\n            : undefined,\n          [popperCSSVars.arrowShadowColor.var]: arrowShadowColor,\n        },\n        ref: mergeRefs(popoverRef, _ref),\n        children: shouldRenderChildren ? props.children : null,\n        id: popoverId,\n        tabIndex: -1,\n        role: \"dialog\",\n        onKeyDown: callAllHandlers(props.onKeyDown, (event) => {\n          if (closeOnEsc && event.key === \"Escape\") {\n            onClose()\n          }\n        }),\n        onBlur: callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const targetIsPopover = contains(popoverRef.current, relatedTarget)\n          const targetIsTrigger = contains(triggerRef.current, relatedTarget)\n\n          const isValidBlur = !targetIsPopover && !targetIsTrigger\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        }),\n        \"aria-labelledby\": hasHeader ? headerId : undefined,\n        \"aria-describedby\": hasBody ? bodyId : undefined,\n      }\n\n      if (trigger === TRIGGER.hover) {\n        popoverProps.role = \"tooltip\"\n        popoverProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n        })\n        popoverProps.onMouseLeave = callAllHandlers(\n          props.onMouseLeave,\n          (event) => {\n            // https://stackoverflow.com/questions/46831247/select-triggers-mouseleave-event-on-parent-element-in-mozilla-firefox\n            if (event.nativeEvent.relatedTarget === null) {\n              return\n            }\n            isHoveringRef.current = false\n            setTimeout(() => onClose(), closeDelay)\n          },\n        )\n      }\n\n      return popoverProps\n    },\n    [\n      shouldRenderChildren,\n      popoverId,\n      hasHeader,\n      headerId,\n      hasBody,\n      bodyId,\n      trigger,\n      closeOnEsc,\n      onClose,\n      isOpen,\n      closeOnBlur,\n      closeDelay,\n      arrowShadowColor,\n      arrowSize,\n    ],\n  )\n\n  const getPopoverPositionerProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) =>\n      getPopperProps(\n        {\n          ...props,\n          style: {\n            visibility: isOpen ? \"visible\" : \"hidden\",\n            ...props.style,\n          },\n        },\n        forwardedRef,\n      ),\n    [isOpen, getPopperProps],\n  )\n\n  const getAnchorProps: PropGetter = useCallback(\n    (props, _ref = null) => {\n      return {\n        ...props,\n        // If anchor is rendered, it is used as reference.\n        ref: mergeRefs(_ref, anchorRef, referenceRef),\n      }\n    },\n    [anchorRef, referenceRef],\n  )\n\n  const openTimeout = useRef<number>()\n  const closeTimeout = useRef<number>()\n\n  const maybeReferenceRef = useCallback(\n    (node: Element) => {\n      // Don't override referenceRef in case the PopoverAnchor is rendered.\n      if (anchorRef.current == null) {\n        referenceRef(node)\n      }\n    },\n    [referenceRef],\n  )\n\n  const getTriggerProps: PropGetter = useCallback(\n    (props = {}, _ref = null) => {\n      const triggerProps: DOMAttributes = {\n        ...props,\n        ref: mergeRefs(triggerRef, _ref, maybeReferenceRef),\n        id: triggerId,\n        \"aria-haspopup\": \"dialog\",\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": popoverId,\n      }\n\n      if (trigger === TRIGGER.click) {\n        triggerProps.onClick = callAllHandlers(props.onClick, onToggle)\n      }\n\n      if (trigger === TRIGGER.hover) {\n        /**\n         * Any content that shows on pointer hover should also show on keyboard focus.\n         * Consider focus and blur to be the `hover` for keyboard users.\n         *\n         * @see https://www.w3.org/WAI/WCAG21/Understanding/content-on-hover-or-focus.html\n         */\n        triggerProps.onFocus = callAllHandlers(props.onFocus, () => {\n          // If openTimeout.current does not exist, the user is using keyboard focus (not mouse hover/click)\n          if (openTimeout.current === undefined) {\n            onOpen()\n          }\n        })\n        triggerProps.onBlur = callAllHandlers(props.onBlur, (event) => {\n          const relatedTarget = getRelatedTarget(event)\n          const isValidBlur = !contains(popoverRef.current, relatedTarget)\n\n          if (isOpen && closeOnBlur && isValidBlur) {\n            onClose()\n          }\n        })\n\n        /**\n         * Any content that shows on hover or focus must be dismissible.\n         * This case pressing `Escape` will dismiss the popover\n         */\n        triggerProps.onKeyDown = callAllHandlers(props.onKeyDown, (event) => {\n          if (event.key === \"Escape\") {\n            onClose()\n          }\n        })\n\n        triggerProps.onMouseEnter = callAllHandlers(props.onMouseEnter, () => {\n          isHoveringRef.current = true\n          openTimeout.current = window.setTimeout(() => onOpen(), openDelay)\n        })\n\n        triggerProps.onMouseLeave = callAllHandlers(props.onMouseLeave, () => {\n          isHoveringRef.current = false\n\n          if (openTimeout.current) {\n            clearTimeout(openTimeout.current)\n            openTimeout.current = undefined\n          }\n\n          closeTimeout.current = window.setTimeout(() => {\n            if (isHoveringRef.current === false) {\n              onClose()\n            }\n          }, closeDelay)\n        })\n      }\n\n      return triggerProps\n    },\n    [\n      triggerId,\n      isOpen,\n      popoverId,\n      trigger,\n      maybeReferenceRef,\n      onToggle,\n      onOpen,\n      closeOnBlur,\n      onClose,\n      openDelay,\n      closeDelay,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      if (openTimeout.current) {\n        clearTimeout(openTimeout.current)\n      }\n      if (closeTimeout.current) {\n        clearTimeout(closeTimeout.current)\n      }\n    }\n  }, [])\n\n  const getHeaderProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: headerId,\n      ref: mergeRefs(ref, (node: HTMLElement | null) => {\n        setHasHeader(!!node)\n      }),\n    }),\n    [headerId],\n  )\n\n  const getBodyProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      id: bodyId,\n      ref: mergeRefs(ref, (node) => {\n        setHasBody(!!node)\n      }),\n    }),\n    [bodyId],\n  )\n\n  return {\n    forceUpdate,\n    isOpen,\n    onAnimationComplete: animated.onComplete,\n    onClose,\n    getAnchorProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getPopoverPositionerProps,\n    getPopoverProps,\n    getTriggerProps,\n    getHeaderProps,\n    getBodyProps,\n  }\n}\n\nexport type UsePopoverReturn = ReturnType<typeof usePopover>\n\nfunction contains(parent: HTMLElement | null, child: HTMLElement | null) {\n  return parent === child || parent?.contains(child)\n}\n\nfunction getRelatedTarget(event: React.FocusEvent) {\n  const activeEl = event.currentTarget.ownerDocument.activeElement\n  return (event.relatedTarget ?? activeEl) as HTMLElement | null\n}\n"]},"metadata":{},"sourceType":"module"}