{"ast":null,"code":"'use client';\n\nimport { AvatarImage } from \"./chunk-V2ATFO44.mjs\";\nimport { initials } from \"./chunk-O25PJXSD.mjs\";\nimport { AvatarStylesProvider } from \"./chunk-RD3LQCU3.mjs\";\nimport { GenericAvatarIcon } from \"./chunk-CXYPMOCL.mjs\"; // src/avatar.tsx\n\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { callAllHandlers, cx, dataAttr } from \"@chakra-ui/shared-utils\";\nimport { useState } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar baseStyle = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0\n};\nvar Avatar = forwardRef((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = /* @__PURE__ */jsx(GenericAvatarIcon, {}),\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props);\n  const avatarStyles = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : void 0,\n    ...baseStyle,\n    ...styles.container\n  };\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor;\n  }\n\n  return /* @__PURE__ */jsx(chakra.span, {\n    ref,\n    ...rest,\n    className: cx(\"chakra-avatar\", props.className),\n    \"data-loaded\": dataAttr(isLoaded),\n    __css: avatarStyles,\n    children: /* @__PURE__ */jsxs(AvatarStylesProvider, {\n      value: styles,\n      children: [/* @__PURE__ */jsx(AvatarImage, {\n        src,\n        srcSet,\n        loading,\n        onLoad: callAllHandlers(onLoadProp, () => {\n          setIsLoaded(true);\n        }),\n        onError,\n        getInitials,\n        name,\n        borderRadius,\n        icon,\n        iconLabel,\n        ignoreFallback,\n        crossOrigin,\n        referrerPolicy\n      }), children]\n    })\n  });\n});\nAvatar.displayName = \"Avatar\";\nexport { baseStyle, Avatar };","map":{"version":3,"mappings":";;;;;;;AAAA,SACEA,MADF,EAEEC,UAFF,EAIEC,gBAJF,EAOEC,mBAPF,QAQO,mBARP;AASA,SAASC,eAAT,EAA0BC,EAA1B,EAA8BC,QAA9B,QAA8C,yBAA9C;AAMA,SAASC,QAAT,QAAyB,OAAzB;AA6CW,cA8BLC,IA9BK;AA3CJ,IAAMC,YAA+B;EAC1CC,SAAS,aADiC;EAE1CC,YAAY,QAF8B;EAG1CC,gBAAgB,QAH0B;EAI1CC,WAAW,QAJ+B;EAK1CC,eAAe,WAL2B;EAM1CC,YAAY,QAN8B;EAO1CC,UAAU,UAPgC;EAQ1CC,YAAY;AAR8B,CAArC;AA8BA,IAAMC,SAASjB,WAAgC,CAACkB,KAAD,EAAQC,GAAR,KAAgB;EACpE,MAAMC,SAASlB,oBAAoB,QAApB,EAA8BgB,KAA9B,CAAf;EACA,MAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BhB,SAAS,KAAT,CAAhC;EAEA,MAAM;IACJiB,GADI;IAEJC,MAFI;IAGJC,IAHI;IAIJC,UAJI;IAKJC,eAAe,MALX;IAMJC,OANI;IAOJC,QAAQC,UAPJ;IAQJC,cAAcC,QARV;IASJC,OAAO,mBAACC,iBAAD,EAAC,EAAD,CATH;IAUJC,YAAY,SAVR;IAWJC,OAXI;IAYJC,QAZI;IAaJC,WAbI;IAcJC,cAdI;IAeJC,WAfI;IAgBJC,cAhBI;IAiBJ,GAAGC;EAjBC,IAkBFzC,iBAAiBiB,KAAjB,CAlBJ;EAoBA,MAAMyB,eAAkC;IACtChB,YADsC;IAEtCiB,aAAalB,aAAa,KAAb,GAAqB,MAFI;IAGtC,GAAGlB,SAHmC;IAItC,GAAGY,OAAOyB;EAJ4B,CAAxC;;EAOA,IAAIP,WAAJ,EAAiB;IACfK,aAAaL,WAAb,GAA2BA,WAA3B;EACF;;EAEA,OACE,mBAACvC,OAAO+C,IAAR,EAAC;IACC3B,GADD;IAEE,GAAGuB,IAFL;IAGCK,WAAW3C,GAAG,eAAH,EAAoBc,MAAM6B,SAA1B,CAHZ;IAIC,eAAa1C,SAASgB,QAAT,CAJd;IAKC2B,OAAOL,YALR;IAOCN,8BAACY,oBAAD,EAAC;MAAqBC,OAAO9B,MAA5B;MACCiB,8BAACc,WAAD,EAAC;QACC5B,GADD;QAECC,MAFD;QAGCY,OAHD;QAICP,QAAQ1B,gBAAgB2B,UAAhB,EAA4B,MAAM;UACxCR,YAAY,IAAZ;QACD,CAFO,CAJT;QAOCM,OAPD;QAQCG,WARD;QASCN,IATD;QAUCE,YAVD;QAWCM,IAXD;QAYCE,SAZD;QAaCI,cAbD;QAcCC,WAdD;QAeCC;MAfD,CAAD,GAiBCJ,QAjBD;IADD,CAAD;EAPD,CAAD,CADF;AA8BD,CAjEqB,CAAf;AAmEPpB,OAAOmC,WAAP,GAAqB,QAArB","names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","callAllHandlers","cx","dataAttr","useState","jsxs","baseStyle","display","alignItems","justifyContent","textAlign","textTransform","fontWeight","position","flexShrink","Avatar","props","ref","styles","isLoaded","setIsLoaded","src","srcSet","name","showBorder","borderRadius","onError","onLoad","onLoadProp","getInitials","initials","icon","GenericAvatarIcon","iconLabel","loading","children","borderColor","ignoreFallback","crossOrigin","referrerPolicy","rest","avatarStyles","borderWidth","container","span","className","__css","AvatarStylesProvider","value","AvatarImage","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\avatar\\src\\avatar.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAllHandlers, cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { AvatarStylesProvider } from \"./avatar-context\"\nimport { AvatarImage } from \"./avatar-image\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\nimport { initials } from \"./avatar-name\"\nimport { AvatarOptions } from \"./avatar-types\"\nimport { useState } from \"react\"\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps<\"Avatar\"> {\n  crossOrigin?: HTMLChakraProps<\"img\">[\"crossOrigin\"]\n  iconLabel?: string\n  /**\n   * If `true`, opt out of the avatar's `fallback` logic and\n   * renders the `img` at all times.\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n  const [isLoaded, setIsLoaded] = useState(false)\n\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = <GenericAvatarIcon />,\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      data-loaded={dataAttr(isLoaded)}\n      __css={avatarStyles}\n    >\n      <AvatarStylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          srcSet={srcSet}\n          loading={loading}\n          onLoad={callAllHandlers(onLoadProp, () => {\n            setIsLoaded(true)\n          })}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n          iconLabel={iconLabel}\n          ignoreFallback={ignoreFallback}\n          crossOrigin={crossOrigin}\n          referrerPolicy={referrerPolicy}\n        />\n        {children}\n      </AvatarStylesProvider>\n    </chakra.span>\n  )\n})\n\nAvatar.displayName = \"Avatar\"\n"]},"metadata":{},"sourceType":"module"}