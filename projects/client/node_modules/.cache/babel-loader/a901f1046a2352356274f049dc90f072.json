{"ast":null,"code":"'use client'; // src/use-editable.ts\n\nimport { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nfunction contains(parent, child) {\n  if (!parent) return false;\n  return parent === child || parent.contains(child);\n}\n\nfunction useEditable() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    onBlur: onBlurProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditCallback,\n    finalFocusRef,\n    ...htmlProps\n  } = props;\n  const onEditProp = useCallbackRef(onEditCallback);\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled);\n  const [isEditing, setIsEditing] = useState(defaultIsEditing);\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  const [prevValue, setPrevValue] = useState(value);\n  const inputRef = useRef(null);\n  const previewRef = useRef(null);\n  const editButtonRef = useRef(null);\n  const cancelButtonRef = useRef(null);\n  const submitButtonRef = useRef(null);\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef]\n  });\n  const isInteractive = !isEditing && !isDisabled;\n  useSafeLayoutEffect(() => {\n    var _a, _b;\n\n    if (isEditing) {\n      (_a = inputRef.current) == null ? void 0 : _a.focus();\n      if (selectAllOnFocus) (_b = inputRef.current) == null ? void 0 : _b.select();\n    }\n  }, []);\n  useUpdateEffect(() => {\n    var _a, _b, _c, _d;\n\n    if (!isEditing) {\n      if (finalFocusRef) {\n        (_a = finalFocusRef.current) == null ? void 0 : _a.focus();\n      } else {\n        (_b = editButtonRef.current) == null ? void 0 : _b.focus();\n      }\n\n      return;\n    }\n\n    (_c = inputRef.current) == null ? void 0 : _c.focus();\n\n    if (selectAllOnFocus) {\n      (_d = inputRef.current) == null ? void 0 : _d.select();\n    }\n\n    onEditProp == null ? void 0 : onEditProp();\n  }, [isEditing, onEditProp, selectAllOnFocus]);\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true);\n    }\n  }, [isInteractive]);\n  const onUpdatePrevValue = useCallback(() => {\n    setPrevValue(value);\n  }, [value]);\n  const onCancel = useCallback(() => {\n    setIsEditing(false);\n    setValue(prevValue);\n    onCancelProp == null ? void 0 : onCancelProp(prevValue);\n    onBlurProp == null ? void 0 : onBlurProp(prevValue);\n  }, [onCancelProp, onBlurProp, setValue, prevValue]);\n  const onSubmit = useCallback(() => {\n    setIsEditing(false);\n    setPrevValue(value);\n    onSubmitProp == null ? void 0 : onSubmitProp(value);\n    onBlurProp == null ? void 0 : onBlurProp(prevValue);\n  }, [value, onSubmitProp, onBlurProp, prevValue]);\n  useEffect(() => {\n    if (isEditing) return;\n    const inputEl = inputRef.current;\n\n    if ((inputEl == null ? void 0 : inputEl.ownerDocument.activeElement) === inputEl) {\n      inputEl == null ? void 0 : inputEl.blur();\n    }\n  }, [isEditing]);\n  const onChange = useCallback(event => {\n    setValue(event.currentTarget.value);\n  }, [setValue]);\n  const onKeyDown = useCallback(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Escape: onCancel,\n      Enter: event2 => {\n        if (!event2.shiftKey && !event2.metaKey) {\n          onSubmit();\n        }\n      }\n    };\n    const action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel, onSubmit]);\n  const onKeyDownWithoutSubmit = useCallback(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Escape: onCancel\n    };\n    const action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [onCancel]);\n  const isValueEmpty = value.length === 0;\n  const onBlur = useCallback(event => {\n    var _a;\n\n    if (!isEditing) return;\n    const doc = event.currentTarget.ownerDocument;\n    const relatedTarget = (_a = event.relatedTarget) != null ? _a : doc.activeElement;\n    const targetIsCancel = contains(cancelButtonRef.current, relatedTarget);\n    const targetIsSubmit = contains(submitButtonRef.current, relatedTarget);\n    const isValidBlur = !targetIsCancel && !targetIsSubmit;\n\n    if (isValidBlur) {\n      if (submitOnBlur) {\n        onSubmit();\n      } else {\n        onCancel();\n      }\n    }\n  }, [submitOnBlur, onSubmit, onCancel, isEditing]);\n  const getPreviewProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const tabIndex = isInteractive && isPreviewFocusable ? 0 : void 0;\n    return { ...props2,\n      ref: mergeRefs(ref, previewRef),\n      children: isValueEmpty ? placeholder : value,\n      hidden: isEditing,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      tabIndex,\n      onFocus: callAllHandlers(props2.onFocus, onEdit, onUpdatePrevValue)\n    };\n  }, [isDisabled, isEditing, isInteractive, isPreviewFocusable, isValueEmpty, onEdit, onUpdatePrevValue, placeholder, value]);\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props2.onBlur, onBlur),\n      onChange: callAllHandlers(props2.onChange, onChange),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)\n    };\n  }, [isDisabled, isEditing, onBlur, onChange, onKeyDown, onUpdatePrevValue, placeholder, value]);\n  const getTextareaProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props2.onBlur, onBlur),\n      onChange: callAllHandlers(props2.onChange, onChange),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDownWithoutSubmit),\n      onFocus: callAllHandlers(props2.onFocus, onUpdatePrevValue)\n    };\n  }, [isDisabled, isEditing, onBlur, onChange, onKeyDownWithoutSubmit, onUpdatePrevValue, placeholder, value]);\n  const getEditButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      \"aria-label\": \"Edit\",\n      ...props2,\n      type: \"button\",\n      onClick: callAllHandlers(props2.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n      disabled: isDisabled\n    };\n  }, [onEdit, isDisabled]);\n  const getSubmitButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props2.onClick, onSubmit),\n      disabled: isDisabled\n    };\n  }, [onSubmit, isDisabled]);\n  const getCancelButtonProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return {\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props2,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props2.onClick, onCancel),\n      disabled: isDisabled\n    };\n  }, [onCancel, isDisabled]);\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getTextareaProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps\n  };\n}\n\nexport { useEditable };","map":{"version":3,"mappings":"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","names":["useFocusOnPointerDown","useSafeLayoutEffect","useUpdateEffect","useControllableState","mergeRefs","useCallbackRef","ariaAttr","callAllHandlers","useCallback","useEffect","useRef","useState","contains","parent","child","useEditable","props","onChange","onChangeProp","onCancel","onCancelProp","onSubmit","onSubmitProp","onBlur","onBlurProp","value","valueProp","isDisabled","defaultValue","startWithEditView","isPreviewFocusable","submitOnBlur","selectAllOnFocus","placeholder","onEdit","onEditCallback","finalFocusRef","htmlProps","onEditProp","defaultIsEditing","Boolean","isEditing","setIsEditing","setValue","prevValue","setPrevValue","inputRef","previewRef","editButtonRef","cancelButtonRef","submitButtonRef","ref","enabled","elements","isInteractive","current","focus","select","onUpdatePrevValue","inputEl","ownerDocument","activeElement","blur","event","currentTarget","onKeyDown","eventKey","key","keyMap","Escape","Enter","shiftKey","metaKey","action","preventDefault","onKeyDownWithoutSubmit","isValueEmpty","length","doc","relatedTarget","_a","targetIsCancel","targetIsSubmit","isValidBlur","getPreviewProps","tabIndex","children","hidden","onFocus","getInputProps","disabled","getTextareaProps","getEditButtonProps","type","onClick","getSubmitButtonProps","getCancelButtonProps","id"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\editable\\src\\use-editable.ts"],"sourcesContent":["import { useFocusOnPointerDown } from \"@chakra-ui/react-use-focus-on-pointer-down\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { useCallback, useEffect, useRef, useState, RefObject } from \"react\"\n\ninterface FocusableElement {\n  focus(options?: FocusOptions): void\n}\n\nexport interface UseEditableProps {\n  /**\n   * The value of the Editable in both edit & preview mode\n   */\n  value?: string\n  /**\n   * The initial value of the Editable in both edit & preview mode\n   */\n  defaultValue?: string\n  /**\n   * If `true`, the Editable will be disabled.\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the Editable will start with edit mode by default.\n   */\n  startWithEditView?: boolean\n  /**\n   * If `true`, the read only view, has a `tabIndex` set to `0`\n   * so it can receive focus via the keyboard or click.\n   * @default true\n   */\n  isPreviewFocusable?: boolean\n  /**\n   * If `true`, it'll update the value onBlur and turn off the edit mode.\n   * @default true\n   */\n  submitOnBlur?: boolean\n  /**\n   * Callback invoked when user changes input.\n   */\n  onChange?: (nextValue: string) => void\n  /**\n   * Callback invoked when user cancels input with the `Esc` key.\n   * It provides the last confirmed value as argument.\n   */\n  onCancel?: (previousValue: string) => void\n  /**\n   * Callback invoked when user confirms value with `enter` key or by blurring input.\n   */\n  onSubmit?: (nextValue: string) => void\n  /**\n   * Callback invoked once the user enters edit mode.\n   */\n  onEdit?: () => void\n  /**\n   * Callback invoked when the user either submits or cancels.\n   * It provides the last confirmed value as argument.\n   */\n  onBlur?: (nextValue: string) => void\n  /**\n   * If `true`, the input's text will be highlighted on focus.\n   * @default true\n   */\n  selectAllOnFocus?: boolean\n  /**\n   * The placeholder text when the value is empty.\n   */\n  placeholder?: string\n  /**\n   * The `ref` of element to receive focus when the modal closes.\n   */\n  finalFocusRef?: RefObject<FocusableElement>\n}\n\nfunction contains(parent: HTMLElement | null, child: HTMLElement) {\n  if (!parent) return false\n  return parent === child || parent.contains(child)\n}\n\n/**\n * React hook for managing the inline renaming of some text.\n *\n * @see Docs https://chakra-ui.com/editable\n */\nexport function useEditable(props: UseEditableProps = {}) {\n  const {\n    onChange: onChangeProp,\n    onCancel: onCancelProp,\n    onSubmit: onSubmitProp,\n    onBlur: onBlurProp,\n    value: valueProp,\n    isDisabled,\n    defaultValue,\n    startWithEditView,\n    isPreviewFocusable = true,\n    submitOnBlur = true,\n    selectAllOnFocus = true,\n    placeholder,\n    onEdit: onEditCallback,\n    finalFocusRef,\n    ...htmlProps\n  } = props\n\n  const onEditProp = useCallbackRef(onEditCallback)\n\n  const defaultIsEditing = Boolean(startWithEditView && !isDisabled)\n\n  const [isEditing, setIsEditing] = useState(defaultIsEditing)\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue || \"\",\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  /**\n   * Keep track of the previous value, so if users\n   * presses `cancel`, we can revert to it.\n   */\n  const [prevValue, setPrevValue] = useState(value)\n\n  /**\n   * Ref to help focus the input in edit mode\n   */\n  const inputRef = useRef<HTMLInputElement | HTMLTextAreaElement>(null)\n  const previewRef = useRef<any>(null)\n\n  const editButtonRef = useRef<HTMLButtonElement>(null)\n  const cancelButtonRef = useRef<HTMLElement>(null)\n  const submitButtonRef = useRef<HTMLElement>(null)\n\n  useFocusOnPointerDown({\n    ref: inputRef,\n    enabled: isEditing,\n    elements: [cancelButtonRef, submitButtonRef],\n  })\n\n  const isInteractive = !isEditing && !isDisabled\n\n  useSafeLayoutEffect(() => {\n    if (isEditing) {\n      inputRef.current?.focus()\n      if (selectAllOnFocus) inputRef.current?.select()\n    }\n  }, [])\n\n  useUpdateEffect(() => {\n    if (!isEditing) {\n      if (finalFocusRef) {\n        finalFocusRef.current?.focus()\n      } else {\n        editButtonRef.current?.focus()\n      }\n      return\n    }\n\n    inputRef.current?.focus()\n\n    if (selectAllOnFocus) {\n      inputRef.current?.select()\n    }\n\n    onEditProp?.()\n  }, [isEditing, onEditProp, selectAllOnFocus])\n\n  const onEdit = useCallback(() => {\n    if (isInteractive) {\n      setIsEditing(true)\n    }\n  }, [isInteractive])\n\n  const onUpdatePrevValue = useCallback(() => {\n    setPrevValue(value)\n  }, [value])\n\n  const onCancel = useCallback(() => {\n    setIsEditing(false)\n    setValue(prevValue)\n    onCancelProp?.(prevValue)\n    onBlurProp?.(prevValue)\n  }, [onCancelProp, onBlurProp, setValue, prevValue])\n\n  const onSubmit = useCallback(() => {\n    setIsEditing(false)\n    setPrevValue(value)\n    onSubmitProp?.(value)\n    onBlurProp?.(prevValue)\n  }, [value, onSubmitProp, onBlurProp, prevValue])\n\n  useEffect(() => {\n    if (isEditing) return\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=559561\n    const inputEl = inputRef.current\n    if (inputEl?.ownerDocument.activeElement === inputEl) {\n      inputEl?.blur()\n    }\n  }, [isEditing])\n\n  const onChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      setValue(event.currentTarget.value)\n    },\n    [setValue],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Escape: onCancel,\n        Enter: (event) => {\n          if (!event.shiftKey && !event.metaKey) {\n            onSubmit()\n          }\n        },\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel, onSubmit],\n  )\n\n  const onKeyDownWithoutSubmit = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Escape: onCancel,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [onCancel],\n  )\n\n  const isValueEmpty = value.length === 0\n\n  const onBlur = useCallback(\n    (event: React.FocusEvent) => {\n      if (!isEditing) return\n      const doc = event.currentTarget.ownerDocument\n      const relatedTarget = (event.relatedTarget ??\n        doc.activeElement) as HTMLElement\n      const targetIsCancel = contains(cancelButtonRef.current, relatedTarget)\n      const targetIsSubmit = contains(submitButtonRef.current, relatedTarget)\n      const isValidBlur = !targetIsCancel && !targetIsSubmit\n\n      if (isValidBlur) {\n        if (submitOnBlur) {\n          onSubmit()\n        } else {\n          onCancel()\n        }\n      }\n    },\n    [submitOnBlur, onSubmit, onCancel, isEditing],\n  )\n\n  const getPreviewProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      const tabIndex = isInteractive && isPreviewFocusable ? 0 : undefined\n      return {\n        ...props,\n        ref: mergeRefs(ref, previewRef),\n        children: isValueEmpty ? placeholder : value,\n        hidden: isEditing,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        tabIndex,\n        onFocus: callAllHandlers(props.onFocus, onEdit, onUpdatePrevValue),\n      }\n    },\n    [\n      isDisabled,\n      isEditing,\n      isInteractive,\n      isPreviewFocusable,\n      isValueEmpty,\n      onEdit,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onUpdatePrevValue),\n    }),\n    [\n      isDisabled,\n      isEditing,\n      onBlur,\n      onChange,\n      onKeyDown,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getTextareaProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      hidden: !isEditing,\n      placeholder,\n      ref: mergeRefs(ref, inputRef),\n      disabled: isDisabled,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      value,\n      onBlur: callAllHandlers(props.onBlur, onBlur),\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDownWithoutSubmit),\n      onFocus: callAllHandlers(props.onFocus, onUpdatePrevValue),\n    }),\n    [\n      isDisabled,\n      isEditing,\n      onBlur,\n      onChange,\n      onKeyDownWithoutSubmit,\n      onUpdatePrevValue,\n      placeholder,\n      value,\n    ],\n  )\n\n  const getEditButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Edit\",\n      ...props,\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onEdit),\n      ref: mergeRefs(ref, editButtonRef),\n      disabled: isDisabled,\n    }),\n    [onEdit, isDisabled],\n  )\n\n  const getSubmitButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      \"aria-label\": \"Submit\",\n      ref: mergeRefs(submitButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onSubmit),\n      disabled: isDisabled,\n    }),\n    [onSubmit, isDisabled],\n  )\n\n  const getCancelButtonProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      \"aria-label\": \"Cancel\",\n      id: \"cancel\",\n      ...props,\n      ref: mergeRefs(cancelButtonRef, ref),\n      type: \"button\",\n      onClick: callAllHandlers(props.onClick, onCancel),\n      disabled: isDisabled,\n    }),\n    [onCancel, isDisabled],\n  )\n\n  return {\n    isEditing,\n    isDisabled,\n    isValueEmpty,\n    value,\n    onEdit,\n    onCancel,\n    onSubmit,\n    getPreviewProps,\n    getInputProps,\n    getTextareaProps,\n    getEditButtonProps,\n    getSubmitButtonProps,\n    getCancelButtonProps,\n    htmlProps,\n  }\n}\n\nexport type UseEditableReturn = ReturnType<typeof useEditable>\n"]},"metadata":{},"sourceType":"module"}