{"ast":null,"code":"import { useId } from \"./chunk-EGV7XMQK.mjs\";\nimport { useControllableProp } from \"./chunk-NUQE4USX.mjs\";\nimport { useCallbackRef } from \"./chunk-TFWETJDV.mjs\"; // src/use-disclosure.ts\n\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\n\nfunction useDisclosure() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);\n  const id = useId(idProp, \"disclosure\");\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: function () {\n      let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return { ...props2,\n        \"aria-expanded\": isOpen,\n        \"aria-controls\": id,\n        onClick: callAllHandlers(props2.onClick, onToggle)\n      };\n    },\n    getDisclosureProps: function () {\n      let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return { ...props2,\n        hidden: !isOpen,\n        id\n      };\n    }\n  };\n}\n\nexport { useDisclosure };","map":{"version":3,"names":["useId","useControllableProp","useCallbackRef","callAllHandlers","useCallback","useState","useDisclosure","props","onClose","onCloseProp","onOpen","onOpenProp","isOpen","isOpenProp","id","idProp","onOpenPropCallbackRef","onClosePropCallbackRef","isOpenState","setIsOpen","defaultIsOpen","isControlled","onToggle","action","getButtonProps","props2","onClick","getDisclosureProps","hidden"],"sources":["C:/Purwadhika/JCWD Bandung/4. REAL PROJECT/JCWD0108-03/node_modules/@chakra-ui/hooks/dist/chunk-CHB4ZXZG.mjs"],"sourcesContent":["import {\n  useId\n} from \"./chunk-EGV7XMQK.mjs\";\nimport {\n  useControllableProp\n} from \"./chunk-NUQE4USX.mjs\";\nimport {\n  useCallbackRef\n} from \"./chunk-TFWETJDV.mjs\";\n\n// src/use-disclosure.ts\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport { useCallback, useState } from \"react\";\nfunction useDisclosure(props = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const onOpenPropCallbackRef = useCallbackRef(onOpenProp);\n  const onClosePropCallbackRef = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const [isControlled, isOpen] = useControllableProp(isOpenProp, isOpenState);\n  const id = useId(idProp, \"disclosure\");\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClosePropCallbackRef == null ? void 0 : onClosePropCallbackRef();\n  }, [isControlled, onClosePropCallbackRef]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpenPropCallbackRef == null ? void 0 : onOpenPropCallbackRef();\n  }, [isControlled, onOpenPropCallbackRef]);\n  const onToggle = useCallback(() => {\n    const action = isOpen ? onClose : onOpen;\n    action();\n  }, [isOpen, onOpen, onClose]);\n  return {\n    isOpen: !!isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps: (props2 = {}) => ({\n      ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick: callAllHandlers(props2.onClick, onToggle)\n    }),\n    getDisclosureProps: (props2 = {}) => ({\n      ...props2,\n      hidden: !isOpen,\n      id\n    })\n  };\n}\n\nexport {\n  useDisclosure\n};\n"],"mappings":"AAAA,SACEA,KADF,QAEO,sBAFP;AAGA,SACEC,mBADF,QAEO,sBAFP;AAGA,SACEC,cADF,QAEO,sBAFP,C,CAIA;;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;;AACA,SAASC,aAAT,GAAmC;EAAA,IAAZC,KAAY,uEAAJ,EAAI;EACjC,MAAM;IACJC,OAAO,EAAEC,WADL;IAEJC,MAAM,EAAEC,UAFJ;IAGJC,MAAM,EAAEC,UAHJ;IAIJC,EAAE,EAAEC;EAJA,IAKFR,KALJ;EAMA,MAAMS,qBAAqB,GAAGd,cAAc,CAACS,UAAD,CAA5C;EACA,MAAMM,sBAAsB,GAAGf,cAAc,CAACO,WAAD,CAA7C;EACA,MAAM,CAACS,WAAD,EAAcC,SAAd,IAA2Bd,QAAQ,CAACE,KAAK,CAACa,aAAN,IAAuB,KAAxB,CAAzC;EACA,MAAM,CAACC,YAAD,EAAeT,MAAf,IAAyBX,mBAAmB,CAACY,UAAD,EAAaK,WAAb,CAAlD;EACA,MAAMJ,EAAE,GAAGd,KAAK,CAACe,MAAD,EAAS,YAAT,CAAhB;EACA,MAAMP,OAAO,GAAGJ,WAAW,CAAC,MAAM;IAChC,IAAI,CAACiB,YAAL,EAAmB;MACjBF,SAAS,CAAC,KAAD,CAAT;IACD;;IACDF,sBAAsB,IAAI,IAA1B,GAAiC,KAAK,CAAtC,GAA0CA,sBAAsB,EAAhE;EACD,CAL0B,EAKxB,CAACI,YAAD,EAAeJ,sBAAf,CALwB,CAA3B;EAMA,MAAMP,MAAM,GAAGN,WAAW,CAAC,MAAM;IAC/B,IAAI,CAACiB,YAAL,EAAmB;MACjBF,SAAS,CAAC,IAAD,CAAT;IACD;;IACDH,qBAAqB,IAAI,IAAzB,GAAgC,KAAK,CAArC,GAAyCA,qBAAqB,EAA9D;EACD,CALyB,EAKvB,CAACK,YAAD,EAAeL,qBAAf,CALuB,CAA1B;EAMA,MAAMM,QAAQ,GAAGlB,WAAW,CAAC,MAAM;IACjC,MAAMmB,MAAM,GAAGX,MAAM,GAAGJ,OAAH,GAAaE,MAAlC;IACAa,MAAM;EACP,CAH2B,EAGzB,CAACX,MAAD,EAASF,MAAT,EAAiBF,OAAjB,CAHyB,CAA5B;EAIA,OAAO;IACLI,MAAM,EAAE,CAAC,CAACA,MADL;IAELF,MAFK;IAGLF,OAHK;IAILc,QAJK;IAKLD,YALK;IAMLG,cAAc,EAAE;MAAA,IAACC,MAAD,uEAAU,EAAV;MAAA,OAAkB,EAChC,GAAGA,MAD6B;QAEhC,iBAAiBb,MAFe;QAGhC,iBAAiBE,EAHe;QAIhCY,OAAO,EAAEvB,eAAe,CAACsB,MAAM,CAACC,OAAR,EAAiBJ,QAAjB;MAJQ,CAAlB;IAAA,CANX;IAYLK,kBAAkB,EAAE;MAAA,IAACF,MAAD,uEAAU,EAAV;MAAA,OAAkB,EACpC,GAAGA,MADiC;QAEpCG,MAAM,EAAE,CAAChB,MAF2B;QAGpCE;MAHoC,CAAlB;IAAA;EAZf,CAAP;AAkBD;;AAED,SACER,aADF"},"metadata":{},"sourceType":"module"}