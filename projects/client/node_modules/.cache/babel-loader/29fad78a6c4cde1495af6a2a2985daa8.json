{"ast":null,"code":"'use client';\n\nimport { innerArrow, matchWidth, positionArrow, transformOrigin } from \"./chunk-P4KPSAOW.mjs\";\nimport { getPopperPlacement } from \"./chunk-AUJXXV3B.mjs\";\nimport { cssVars, getEventListenerOptions } from \"./chunk-6WT2JRWX.mjs\"; // src/use-popper.ts\n\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { createPopper } from \"@popperjs/core\";\nimport { useCallback, useEffect, useRef } from \"react\";\n\nfunction usePopper() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    enabled = true,\n    modifiers,\n    placement: placementProp = \"bottom\",\n    strategy = \"absolute\",\n    arrowPadding = 8,\n    eventListeners = true,\n    offset,\n    gutter = 8,\n    flip = true,\n    boundary = \"clippingParents\",\n    preventOverflow = true,\n    matchWidth: matchWidth2,\n    direction = \"ltr\"\n  } = props;\n  const reference = useRef(null);\n  const popper = useRef(null);\n  const instance = useRef(null);\n  const placement = getPopperPlacement(placementProp, direction);\n  const cleanup = useRef(() => {});\n  const setupPopper = useCallback(() => {\n    var _a;\n\n    if (!enabled || !reference.current || !popper.current) return;\n    (_a = cleanup.current) == null ? void 0 : _a.call(cleanup);\n    instance.current = createPopper(reference.current, popper.current, {\n      placement,\n      modifiers: [innerArrow, positionArrow, transformOrigin, { ...matchWidth,\n        enabled: !!matchWidth2\n      }, {\n        name: \"eventListeners\",\n        ...getEventListenerOptions(eventListeners)\n      }, {\n        name: \"arrow\",\n        options: {\n          padding: arrowPadding\n        }\n      }, {\n        name: \"offset\",\n        options: {\n          offset: offset != null ? offset : [0, gutter]\n        }\n      }, {\n        name: \"flip\",\n        enabled: !!flip,\n        options: {\n          padding: 8\n        }\n      }, {\n        name: \"preventOverflow\",\n        enabled: !!preventOverflow,\n        options: {\n          boundary\n        }\n      }, // allow users override internal modifiers\n      ...(modifiers != null ? modifiers : [])],\n      strategy\n    });\n    instance.current.forceUpdate();\n    cleanup.current = instance.current.destroy;\n  }, [placement, enabled, modifiers, matchWidth2, eventListeners, arrowPadding, offset, gutter, flip, preventOverflow, boundary, strategy]);\n  useEffect(() => {\n    return () => {\n      var _a;\n\n      if (!reference.current && !popper.current) {\n        (_a = instance.current) == null ? void 0 : _a.destroy();\n        instance.current = null;\n      }\n    };\n  }, []);\n  const referenceRef = useCallback(node => {\n    reference.current = node;\n    setupPopper();\n  }, [setupPopper]);\n  const getReferenceProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: mergeRefs(referenceRef, ref)\n    };\n  }, [referenceRef]);\n  const popperRef = useCallback(node => {\n    popper.current = node;\n    setupPopper();\n  }, [setupPopper]);\n  const getPopperProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: mergeRefs(popperRef, ref),\n      style: { ...props2.style,\n        position: strategy,\n        minWidth: matchWidth2 ? void 0 : \"max-content\",\n        inset: \"0 auto auto 0\"\n      }\n    };\n  }, [strategy, popperRef, matchWidth2]);\n  const getArrowProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const {\n      size,\n      shadowColor,\n      bg,\n      style,\n      ...rest\n    } = props2;\n    return { ...rest,\n      ref,\n      \"data-popper-arrow\": \"\",\n      style: getArrowStyle(props2)\n    };\n  }, []);\n  const getArrowInnerProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref,\n      \"data-popper-arrow-inner\": \"\"\n    };\n  }, []);\n  return {\n    update() {\n      var _a;\n\n      (_a = instance.current) == null ? void 0 : _a.update();\n    },\n\n    forceUpdate() {\n      var _a;\n\n      (_a = instance.current) == null ? void 0 : _a.forceUpdate();\n    },\n\n    transformOrigin: cssVars.transformOrigin.varRef,\n    referenceRef,\n    popperRef,\n    getPopperProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getReferenceProps\n  };\n}\n\nfunction getArrowStyle(props) {\n  const {\n    size,\n    shadowColor,\n    bg,\n    style\n  } = props;\n  const computedStyle = { ...style,\n    position: \"absolute\"\n  };\n\n  if (size) {\n    computedStyle[\"--popper-arrow-size\"] = size;\n  }\n\n  if (shadowColor) {\n    computedStyle[\"--popper-arrow-shadow-color\"] = shadowColor;\n  }\n\n  if (bg) {\n    computedStyle[\"--popper-arrow-bg\"] = bg;\n  }\n\n  return computedStyle;\n}\n\nexport { usePopper };","map":{"version":3,"mappings":"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","names":["mergeRefs","createPopper","useCallback","useEffect","useRef","usePopper","props","enabled","modifiers","placement","placementProp","strategy","arrowPadding","eventListeners","offset","gutter","flip","boundary","preventOverflow","matchWidth","direction","reference","popper","instance","getPopperPlacement","cleanup","setupPopper","current","innerArrow","positionArrow","transformOrigin","name","getEventListenerOptions","options","padding","forceUpdate","destroy","referenceRef","node","getReferenceProps","ref","popperRef","getPopperProps","style","position","minWidth","inset","getArrowProps","size","shadowColor","bg","rest","getArrowStyle","getArrowInnerProps","update","cssVars","varRef","computedStyle"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\popper\\src\\use-popper.ts"],"sourcesContent":["import { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport {\n  createPopper,\n  Instance,\n  Modifier,\n  VirtualElement,\n} from \"@popperjs/core\"\nimport { useCallback, useEffect, useRef } from \"react\"\nimport * as customModifiers from \"./modifiers\"\nimport { getPopperPlacement, PlacementWithLogical } from \"./popper.placement\"\nimport { cssVars, getEventListenerOptions } from \"./utils\"\n\nexport interface UsePopperProps {\n  /**\n   * Whether the popper.js should be enabled\n   */\n  enabled?: boolean\n  /**\n   * The main and cross-axis offset to displace popper element\n   * from its reference element.\n   */\n  offset?: [number, number]\n  /**\n   * The distance or margin between the reference and popper.\n   * It is used internally to create an `offset` modifier.\n   *\n   * NB: If you define `offset` prop, it'll override the gutter.\n   * @default 8\n   */\n  gutter?: number\n  /**\n   * If `true`, will prevent the popper from being cut off and ensure\n   * it's visible within the boundary area.\n   * @default true\n   */\n  preventOverflow?: boolean\n  /**\n   * If `true`, the popper will change its placement and flip when it's\n   * about to overflow its boundary area.\n   * @default true\n   */\n  flip?: boolean\n  /**\n   * If `true`, the popper will match the width of the reference at all times.\n   * It's useful for `autocomplete`, `date-picker` and `select` patterns.\n   * @default false\n   */\n  matchWidth?: boolean\n  /**\n   * The boundary area for the popper. Used within the `preventOverflow` modifier\n   * @default \"clippingParents\"\n   */\n  boundary?: \"clippingParents\" | \"scrollParent\" | HTMLElement\n  /**\n   * If provided, determines whether the popper will reposition itself on `scroll`\n   * and `resize` of the window.\n   * @default true\n   */\n  eventListeners?: boolean | { scroll?: boolean; resize?: boolean }\n  /**\n   * The padding required to prevent the arrow from\n   * reaching the very edge of the popper.\n   * @default 8\n   */\n  arrowPadding?: number\n  /**\n   * The CSS positioning strategy to use.\n   * @default \"absolute\"\n   */\n  strategy?: \"absolute\" | \"fixed\"\n  /**\n   * The placement of the popper relative to its reference.\n   * @default \"bottom\"\n   */\n  placement?: PlacementWithLogical\n  /**\n   * Array of popper.js modifiers. Check the docs to see\n   * the list of possible modifiers you can pass.\n   *\n   * @see Docs https://popper.js.org/docs/v2/modifiers/\n   */\n  modifiers?: Array<Partial<Modifier<string, any>>>\n  /**\n   * Theme direction `ltr` or `rtl`. Popper's placement will\n   * be set accordingly\n   * @default \"ltr\"\n   */\n  direction?: \"ltr\" | \"rtl\"\n}\n\nexport type ArrowCSSVarProps = {\n  /**\n   * The size of the popover arrow.\n   * This sets the `--popper-arrow-size` css property\n   */\n  size?: string | number\n  /**\n   * The box-shadow color of the popover arrow.\n   * This sets the `--popper-arrow-shadow-color` css property\n   */\n  shadowColor?: string\n  /**\n   * The background color of the popper arrow.\n   * This sets the `--popper-arrow-bg` css property.\n   */\n  bg?: string\n}\n\nexport function usePopper(props: UsePopperProps = {}) {\n  const {\n    enabled = true,\n    modifiers,\n    placement: placementProp = \"bottom\",\n    strategy = \"absolute\",\n    arrowPadding = 8,\n    eventListeners = true,\n    offset,\n    gutter = 8,\n    flip = true,\n    boundary = \"clippingParents\",\n    preventOverflow = true,\n    matchWidth,\n    direction = \"ltr\",\n  } = props\n\n  const reference = useRef<Element | VirtualElement | null>(null)\n  const popper = useRef<HTMLElement | null>(null)\n  const instance = useRef<Instance | null>(null)\n  const placement = getPopperPlacement(placementProp, direction)\n\n  const cleanup = useRef(() => {})\n\n  const setupPopper = useCallback(() => {\n    if (!enabled || !reference.current || !popper.current) return\n\n    // If popper instance exists, destroy it, so we can create a new one\n    cleanup.current?.()\n\n    instance.current = createPopper(reference.current, popper.current, {\n      placement,\n      modifiers: [\n        customModifiers.innerArrow,\n        customModifiers.positionArrow,\n        customModifiers.transformOrigin,\n        {\n          ...customModifiers.matchWidth,\n          enabled: !!matchWidth,\n        },\n        {\n          name: \"eventListeners\",\n          ...getEventListenerOptions(eventListeners),\n        },\n        {\n          name: \"arrow\",\n          options: { padding: arrowPadding },\n        },\n        {\n          name: \"offset\",\n          options: {\n            offset: offset ?? [0, gutter],\n          },\n        },\n        {\n          name: \"flip\",\n          enabled: !!flip,\n          options: { padding: 8 },\n        },\n        {\n          name: \"preventOverflow\",\n          enabled: !!preventOverflow,\n          options: { boundary },\n        },\n        // allow users override internal modifiers\n        ...(modifiers ?? []),\n      ],\n      strategy,\n    })\n\n    // force update one-time to fix any positioning issues\n    instance.current.forceUpdate()\n\n    cleanup.current = instance.current.destroy\n  }, [\n    placement,\n    enabled,\n    modifiers,\n    matchWidth,\n    eventListeners,\n    arrowPadding,\n    offset,\n    gutter,\n    flip,\n    preventOverflow,\n    boundary,\n    strategy,\n  ])\n\n  useEffect(() => {\n    return () => {\n      /**\n       * Fast refresh might call this function and tear down the popper\n       * even if the reference still exists. This checks against that\n       */\n      if (!reference.current && !popper.current) {\n        instance.current?.destroy()\n        instance.current = null\n      }\n    }\n  }, [])\n\n  const referenceRef = useCallback(\n    <T extends Element | VirtualElement>(node: T | null) => {\n      reference.current = node\n      setupPopper()\n    },\n    [setupPopper],\n  )\n\n  const getReferenceProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(referenceRef, ref),\n    }),\n    [referenceRef],\n  )\n\n  const popperRef = useCallback(\n    <T extends HTMLElement>(node: T | null) => {\n      popper.current = node\n      setupPopper()\n    },\n    [setupPopper],\n  )\n\n  const getPopperProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(popperRef, ref),\n      style: {\n        ...props.style,\n        position: strategy,\n        minWidth: matchWidth ? undefined : \"max-content\",\n        inset: \"0 auto auto 0\",\n      },\n    }),\n    [strategy, popperRef, matchWidth],\n  )\n\n  const getArrowProps: PropGetter = useCallback((props = {}, ref = null) => {\n    const { size, shadowColor, bg, style, ...rest } = props\n    return {\n      ...rest,\n      ref,\n      \"data-popper-arrow\": \"\",\n      style: getArrowStyle(props),\n    }\n  }, [])\n\n  const getArrowInnerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-popper-arrow-inner\": \"\",\n    }),\n    [],\n  )\n\n  return {\n    update() {\n      instance.current?.update()\n    },\n    forceUpdate() {\n      instance.current?.forceUpdate()\n    },\n    transformOrigin: cssVars.transformOrigin.varRef,\n    referenceRef,\n    popperRef,\n    getPopperProps,\n    getArrowProps,\n    getArrowInnerProps,\n    getReferenceProps,\n  }\n}\n\nfunction getArrowStyle(props: any) {\n  const { size, shadowColor, bg, style } = props\n  const computedStyle = { ...style, position: \"absolute\" }\n  if (size) {\n    computedStyle[\"--popper-arrow-size\"] = size\n  }\n  if (shadowColor) {\n    computedStyle[\"--popper-arrow-shadow-color\"] = shadowColor\n  }\n  if (bg) {\n    computedStyle[\"--popper-arrow-bg\"] = bg\n  }\n  return computedStyle\n}\n\nexport type UsePopperReturn = ReturnType<typeof usePopper>\n"]},"metadata":{},"sourceType":"module"}