{"ast":null,"code":"'use client';\n\nimport { Grid } from \"./chunk-JARCRF6W.mjs\"; // src/simple-grid.tsx\n\nimport { forwardRef, getToken, useTheme } from \"@chakra-ui/system\";\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar SimpleGrid = forwardRef(function SimpleGrid2(props, ref) {\n  const {\n    columns,\n    spacingX,\n    spacingY,\n    spacing,\n    minChildWidth,\n    ...rest\n  } = props;\n  const theme = useTheme();\n  const templateColumns = minChildWidth ? widthToColumns(minChildWidth, theme) : countToColumns(columns);\n  return /* @__PURE__ */jsx(Grid, {\n    ref,\n    gap: spacing,\n    columnGap: spacingX,\n    rowGap: spacingY,\n    templateColumns,\n    ...rest\n  });\n});\nSimpleGrid.displayName = \"SimpleGrid\";\n\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\n\nfunction widthToColumns(width, theme) {\n  return mapResponsive(width, value => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme);\n\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\n\nfunction countToColumns(count) {\n  return mapResponsive(count, value => value === null ? null : `repeat(${value}, minmax(0, 1fr))`);\n}\n\nexport { SimpleGrid };","map":{"version":3,"mappings":";;;;AAAA,SACEA,UADF,EAEEC,QAFF,EAIEC,QAJF,QAKO,mBALP;AAMA,SAASC,aAAT,QAA8B,6BAA9B;AAiDM;AAXC,IAAMC,aAAaJ,WACxB,SAASI,WAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;EAC9B,MAAM;IAAEC,OAAF;IAAWC,QAAX;IAAqBC,QAArB;IAA+BC,OAA/B;IAAwCC,aAAxC;IAAuD,GAAGC;EAA1D,IACJP,KADF;EAGA,MAAMQ,QAAQX,UAAd;EACA,MAAMY,kBAAkBH,gBACpBI,eAAeJ,aAAf,EAA8BE,KAA9B,CADoB,GAEpBG,eAAeT,OAAf,CAFJ;EAIA,OACE,mBAACU,IAAD,EAAC;IACCX,GADD;IAECY,KAAKR,OAFN;IAGCS,WAAWX,QAHZ;IAICY,QAAQX,QAJT;IAKCK,eALD;IAME,GAAGF;EANL,CAAD,CADF;AAUF,CApBwB,CAAnB;AAuBPR,WAAWiB,WAAX,GAAyB,YAAzB;;AAEA,SAASC,IAAT,CAAcC,CAAd,EAAkC;EAChC,OAAO,OAAOA,CAAP,KAAa,QAAb,GAAwB,GAAGA,KAA3B,GAAmCA,CAA1C;AACF;;AAEA,SAASR,cAAT,CAAwBS,KAAxB,EAAoCX,KAApC,EAAgE;EAC9D,OAAOV,cAAcqB,KAAd,EAAsBC,KAAD,IAAW;IACrC,MAAMC,SAASzB,SAAS,OAAT,EAAkBwB,KAAlB,EAAyBH,KAAKG,KAAL,CAAzB,EAAsCZ,KAAtC,CAAf;;IACA,OAAOY,UAAU,IAAV,GAAiB,IAAjB,GAAwB,2BAA2BC,eAA1D;EACD,CAHM,CAAP;AAIF;;AAEA,SAASV,cAAT,CAAwBW,KAAxB,EAAoC;EAClC,OAAOxB,cAAcwB,KAAd,EAAsBF,KAAD,IAC1BA,UAAU,IAAV,GAAiB,IAAjB,GAAwB,UAAUA,wBAD7B,CAAP;AAGF","names":["forwardRef","getToken","useTheme","mapResponsive","SimpleGrid","props","ref","columns","spacingX","spacingY","spacing","minChildWidth","rest","theme","templateColumns","widthToColumns","countToColumns","Grid","gap","columnGap","rowGap","displayName","toPx","n","width","value","_value","count"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\layout\\src\\simple-grid.tsx"],"sourcesContent":["import {\n  forwardRef,\n  getToken,\n  ResponsiveValue,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport { Grid, GridProps } from \"./grid\"\n\ninterface SimpleGridOptions {\n  /**\n   * The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length.\n   */\n  minChildWidth?: GridProps[\"minWidth\"]\n  /**\n   * The number of columns\n   */\n  columns?: ResponsiveValue<number>\n  /**\n   * The gap between the grid items\n   */\n  spacing?: GridProps[\"gridGap\"]\n  /**\n   * The column gap between the grid items\n   */\n  spacingX?: GridProps[\"gridGap\"]\n  /**\n   * The row gap between the grid items\n   */\n  spacingY?: GridProps[\"gridGap\"]\n}\n\nexport interface SimpleGridProps extends GridProps, SimpleGridOptions {}\n\n/**\n * SimpleGrid\n *\n * React component that uses the `Grid` component and provides\n * a simpler interface to create responsive grid layouts.\n *\n * Provides props that easily define columns and spacing.\n *\n * @see Docs https://chakra-ui.com/simplegrid\n */\nexport const SimpleGrid = forwardRef<SimpleGridProps, \"div\">(\n  function SimpleGrid(props, ref) {\n    const { columns, spacingX, spacingY, spacing, minChildWidth, ...rest } =\n      props\n\n    const theme = useTheme()\n    const templateColumns = minChildWidth\n      ? widthToColumns(minChildWidth, theme)\n      : countToColumns(columns)\n\n    return (\n      <Grid\n        ref={ref}\n        gap={spacing}\n        columnGap={spacingX}\n        rowGap={spacingY}\n        templateColumns={templateColumns}\n        {...rest}\n      />\n    )\n  },\n)\n\nSimpleGrid.displayName = \"SimpleGrid\"\n\nfunction toPx(n: string | number) {\n  return typeof n === \"number\" ? `${n}px` : n\n}\n\nfunction widthToColumns(width: any, theme: Record<string, any>) {\n  return mapResponsive(width, (value) => {\n    const _value = getToken(\"sizes\", value, toPx(value))(theme)\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`\n  })\n}\n\nfunction countToColumns(count: any) {\n  return mapResponsive(count, (value) =>\n    value === null ? null : `repeat(${value}, minmax(0, 1fr))`,\n  )\n}\n"]},"metadata":{},"sourceType":"module"}