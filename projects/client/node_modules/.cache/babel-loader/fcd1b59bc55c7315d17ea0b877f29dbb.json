{"ast":null,"code":"'use client'; // src/use-checkbox.ts\n\nimport { useFormControlProps } from \"@chakra-ui/form-control\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\"; // ../../utilities/object-utils/src/omit.ts\n\nfunction omit(object) {\n  let keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const clone = Object.assign({}, object);\n\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n\n  return clone;\n} // src/use-checkbox.ts\n\n\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { trackFocusVisible } from \"@zag-js/focus-visible\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nfunction useCheckbox() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const formControlProps = useFormControlProps(props);\n  const {\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isInvalid,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-describedby\": ariaDescribedBy\n  } = formControlProps;\n  const {\n    defaultChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    onChange,\n    isIndeterminate,\n    name,\n    value,\n    tabIndex = void 0,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    ...rest\n  } = props;\n  const htmlProps = omit(rest, [\"isDisabled\", \"isReadOnly\", \"isRequired\", \"isInvalid\", \"id\", \"onBlur\", \"onFocus\", \"aria-describedby\"]);\n  const onChangeProp = useCallbackRef(onChange);\n  const onBlurProp = useCallbackRef(onBlur);\n  const onFocusProp = useCallbackRef(onFocus);\n  const [isFocusVisible, setIsFocusVisible] = useState(false);\n  const [isFocused, setFocused] = useState(false);\n  const [isHovered, setHovered] = useState(false);\n  const [isActive, setActive] = useState(false);\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  const inputRef = useRef(null);\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true);\n  const [checkedState, setCheckedState] = useState(!!defaultChecked);\n  const isControlled = checkedProp !== void 0;\n  const isChecked = isControlled ? checkedProp : checkedState;\n  const handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  useUpdateEffect(() => {\n    if (isDisabled) {\n      setFocused(false);\n    }\n  }, [isDisabled, setFocused]);\n  useSafeLayoutEffect(() => {\n    const el = inputRef.current;\n    if (!(el == null ? void 0 : el.form)) return;\n\n    const formResetListener = () => {\n      setCheckedState(!!defaultChecked);\n    };\n\n    el.form.addEventListener(\"reset\", formResetListener);\n    return () => {\n      var _a;\n\n      return (_a = el.form) == null ? void 0 : _a.removeEventListener(\"reset\", formResetListener);\n    };\n  }, []);\n  const trulyDisabled = isDisabled && !isFocusable;\n  const onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive(true);\n    }\n  }, [setActive]);\n  const onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive(false);\n    }\n  }, [setActive]);\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return;\n    const notInSync = inputRef.current.checked !== isChecked;\n\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked);\n    }\n  }, [inputRef.current]);\n  const getCheckboxProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n    const onPressDown = event => {\n      if (isFocused) {\n        event.preventDefault();\n      }\n\n      setActive(true);\n    };\n\n    return { ...props2,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props2.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),\n      onMouseEnter: callAllHandlers(props2.onMouseEnter, () => setHovered(true)),\n      onMouseLeave: callAllHandlers(props2.onMouseLeave, () => setHovered(false))\n    };\n  }, [isActive, isChecked, isDisabled, isFocused, isFocusVisible, isHovered, isIndeterminate, isInvalid, isReadOnly]);\n  const getIndicatorProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly)\n    };\n  }, [isActive, isChecked, isDisabled, isFocused, isFocusVisible, isHovered, isIndeterminate, isInvalid, isReadOnly]);\n  const getRootProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...htmlProps,\n      ...props2,\n      ref: mergeRefs(forwardedRef, node => {\n        if (!node) return;\n        setRootIsLabelElement(node.tagName === \"LABEL\");\n      }),\n      onClick: callAllHandlers(props2.onClick, () => {\n        var _a;\n\n        if (!rootIsLabelElement) {\n          (_a = inputRef.current) == null ? void 0 : _a.click();\n          requestAnimationFrame(() => {\n            var _a2;\n\n            (_a2 = inputRef.current) == null ? void 0 : _a2.focus({\n              preventScroll: true\n            });\n          });\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    };\n  }, [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement]);\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: mergeRefs(inputRef, forwardedRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      tabIndex,\n      onChange: callAllHandlers(props2.onChange, handleChange),\n      onBlur: callAllHandlers(props2.onBlur, onBlurProp, () => setFocused(false)),\n      onFocus: callAllHandlers(props2.onFocus, onFocusProp, () => setFocused(true)),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    };\n  }, [name, value, id, handleChange, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled, tabIndex]);\n  const getLabelProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    };\n  }, [isChecked, isDisabled, isInvalid]);\n  const state = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isIndeterminate,\n    isDisabled,\n    isReadOnly,\n    isRequired\n  };\n  return {\n    state,\n    getRootProps,\n    getCheckboxProps,\n    getIndicatorProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\nexport { useCheckbox };","map":{"version":3,"mappings":"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","names":["useFormControlProps","useSafeLayoutEffect","useUpdateEffect","useCallbackRef","mergeRefs","callAllHandlers","dataAttr","omit","object","keysToOmit","clone","Object","assign","key","visuallyHiddenStyle","trackFocusVisible","useCallback","useEffect","useRef","useState","useCheckbox","props","formControlProps","isDisabled","isReadOnly","isRequired","isInvalid","id","onBlur","onFocus","ariaDescribedBy","defaultChecked","isChecked","checkedProp","isFocusable","onChange","isIndeterminate","name","value","tabIndex","ariaLabel","ariaLabelledBy","ariaInvalid","rest","htmlProps","onChangeProp","onBlurProp","onFocusProp","isFocusVisible","setIsFocusVisible","isFocused","setFocused","isHovered","setHovered","isActive","setActive","inputRef","rootIsLabelElement","setRootIsLabelElement","checkedState","setCheckedState","isControlled","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","el","form","formResetListener","addEventListener","removeEventListener","trulyDisabled","onKeyDown","onKeyUp","notInSync","getCheckboxProps","forwardedRef","onPressDown","ref","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getIndicatorProps","getRootProps","node","tagName","onClick","click","requestAnimationFrame","focus","_a","preventScroll","getInputProps","type","required","disabled","readOnly","style","getLabelProps","stopEvent","state","stopPropagation"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\checkbox\\src\\use-checkbox.ts","C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\utilities\\object-utils\\src\\omit.ts"],"sourcesContent":["import { useFormControlProps } from \"@chakra-ui/form-control\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport type { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport { trackFocusVisible } from \"@zag-js/focus-visible\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\nimport { CheckboxState, UseCheckboxProps } from \"./checkbox-types\"\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/checkbox#hooks\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const formControlProps = useFormControlProps(props)\n  const {\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    isInvalid,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-describedby\": ariaDescribedBy,\n  } = formControlProps\n\n  const {\n    defaultChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    onChange,\n    isIndeterminate,\n    name,\n    value,\n    tabIndex = undefined,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    ...rest\n  } = props\n\n  const htmlProps = omit(rest, [\n    \"isDisabled\",\n    \"isReadOnly\",\n    \"isRequired\",\n    \"isInvalid\",\n    \"id\",\n    \"onBlur\",\n    \"onFocus\",\n    \"aria-describedby\",\n  ])\n\n  const onChangeProp = useCallbackRef(onChange)\n  const onBlurProp = useCallbackRef(onBlur)\n  const onFocusProp = useCallbackRef(onFocus)\n\n  const [isFocusVisible, setIsFocusVisible] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const [isHovered, setHovered] = useState(false)\n  const [isActive, setActive] = useState(false)\n\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible)\n  }, [])\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const isControlled = checkedProp !== undefined\n  const isChecked = isControlled ? checkedProp : checkedState\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChangeProp?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChangeProp,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  useUpdateEffect(() => {\n    if (isDisabled) {\n      setFocused(false)\n    }\n  }, [isDisabled, setFocused])\n\n  /**\n   * HTMLFormElement.reset() should reset the checkbox state\n   */\n  useSafeLayoutEffect(() => {\n    const el = inputRef.current\n    if (!el?.form) return\n    const formResetListener = () => {\n      setCheckedState(!!defaultChecked)\n    }\n    el.form.addEventListener(\"reset\", formResetListener)\n    return () => el.form?.removeEventListener(\"reset\", formResetListener)\n  }, [])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(true)\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(false)\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.checked !== isChecked\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked)\n    }\n  }, [inputRef.current])\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const onPressDown = (event: React.MouseEvent) => {\n        // On mousedown, the input blurs and returns focus to the `body`,\n        // we need to prevent this. Native checkboxes keeps focus on `input`\n        if (isFocused) {\n          event.preventDefault()\n        }\n        setActive(true)\n      }\n\n      return {\n        ...props,\n        ref: forwardedRef,\n        \"data-active\": dataAttr(isActive),\n        \"data-hover\": dataAttr(isHovered),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n        \"data-indeterminate\": dataAttr(isIndeterminate),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        \"aria-hidden\": true,\n        onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n        onMouseUp: callAllHandlers(props.onMouseUp, () => setActive(false)),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, () =>\n          setHovered(true),\n        ),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, () =>\n          setHovered(false),\n        ),\n      }\n    },\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isFocusVisible,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n    ],\n  )\n\n  const getIndicatorProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isFocusVisible,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n    ],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...htmlProps,\n      ...props,\n      ref: mergeRefs(forwardedRef, (node: HTMLElement) => {\n        if (!node) return\n        setRootIsLabelElement(node.tagName === \"LABEL\")\n      }),\n      onClick: callAllHandlers(props.onClick, () => {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          inputRef.current?.click()\n          requestAnimationFrame(() => {\n            inputRef.current?.focus({ preventScroll: true })\n          })\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(inputRef, forwardedRef),\n        type: \"checkbox\",\n        name,\n        value,\n        id,\n        tabIndex,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(props.onBlur, onBlurProp, () =>\n          setFocused(false),\n        ),\n        onFocus: callAllHandlers(props.onFocus, onFocusProp, () =>\n          setFocused(true),\n        ),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        required: isRequired,\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-disabled\": isDisabled,\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      name,\n      value,\n      id,\n      handleChange,\n      onBlurProp,\n      onFocusProp,\n      onKeyDown,\n      onKeyUp,\n      isRequired,\n      isChecked,\n      trulyDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaInvalid,\n      isInvalid,\n      ariaDescribedBy,\n      isDisabled,\n      tabIndex,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [isChecked, isDisabled, isInvalid],\n  )\n\n  const state: CheckboxState = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isIndeterminate,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n  }\n\n  return {\n    state,\n    getRootProps,\n    getCheckboxProps,\n    getIndicatorProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"]},"metadata":{},"sourceType":"module"}