{"ast":null,"code":"'use client'; // src/use-media-query.ts\n\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { useEffect, useState } from \"react\";\n\nfunction useMediaQuery(query) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const {\n    ssr = true,\n    fallback\n  } = options;\n  const {\n    getWindow\n  } = useEnvironment();\n  const queries = Array.isArray(query) ? query : [query];\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback];\n  fallbackValues = fallbackValues.filter(v => v != null);\n  const [value, setValue] = useState(() => {\n    return queries.map((query2, index) => ({\n      media: query2,\n      matches: ssr ? !!fallbackValues[index] : getWindow().matchMedia(query2).matches\n    }));\n  });\n  useEffect(() => {\n    const win = getWindow();\n    setValue(queries.map(query2 => ({\n      media: query2,\n      matches: win.matchMedia(query2).matches\n    })));\n    const mql = queries.map(query2 => win.matchMedia(query2));\n\n    const handler = evt => {\n      setValue(prev => {\n        return prev.slice().map(item => {\n          if (item.media === evt.media) return { ...item,\n            matches: evt.matches\n          };\n          return item;\n        });\n      });\n    };\n\n    mql.forEach(mql2 => {\n      if (typeof mql2.addListener === \"function\") {\n        mql2.addListener(handler);\n      } else {\n        mql2.addEventListener(\"change\", handler);\n      }\n    });\n    return () => {\n      mql.forEach(mql2 => {\n        if (typeof mql2.removeListener === \"function\") {\n          mql2.removeListener(handler);\n        } else {\n          mql2.removeEventListener(\"change\", handler);\n        }\n      });\n    };\n  }, [getWindow]);\n  return value.map(item => item.matches);\n}\n\nexport { useMediaQuery };","map":{"version":3,"mappings":";;AAAA,SAASA,cAAT,QAA+B,sBAA/B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;;AAeO,SAASC,aAAT,CACLC,KADK,EAGM;EAAA,IADXC,OACW,uEADqB,EACrB;EACX,MAAM;IAAEC,MAAM,IAAR;IAAcC;EAAd,IAA2BF,OAAjC;EAEA,MAAM;IAAEG;EAAF,IAAgBR,gBAAtB;EAEA,MAAMS,UAAUC,MAAMC,OAAN,CAAcP,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA/C;EAEA,IAAIQ,iBAAiBF,MAAMC,OAAN,CAAcJ,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAA1D;EACAK,iBAAiBA,eAAeC,MAAf,CAAuBC,CAAD,IAAOA,KAAK,IAAlC,CAAjB;EAEA,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBd,SAAS,MAAM;IACvC,OAAOO,QAAQQ,GAAR,CAAY,CAACb,MAAD,EAAQc,KAAR,MAAmB;MACpCC,OAAOf,MAD6B;MAEpCgB,SAASd,MACL,CAAC,CAACM,eAAeM,KAAf,CADG,GAELV,YAAYa,UAAZ,CAAuBjB,MAAvB,EAA8BgB;IAJE,CAAnB,CAAZ,CAAP;EAMD,CAPyB,CAA1B;EASAnB,UAAU,MAAM;IACd,MAAMqB,MAAMd,WAAZ;IACAQ,SACEP,QAAQQ,GAAR,CAAab,MAAD,KAAY;MACtBe,OAAOf,MADe;MAEtBgB,SAASE,IAAID,UAAJ,CAAejB,MAAf,EAAsBgB;IAFT,CAAZ,CAAZ,CADF;IAOA,MAAMG,MAAMd,QAAQQ,GAAR,CAAab,MAAD,IAAWkB,IAAID,UAAJ,CAAejB,MAAf,CAAvB,CAAZ;;IAEA,MAAMoB,UAAWC,GAAD,IAA8B;MAC5CT,SAAUU,IAAD,IAAU;QACjB,OAAOA,KAAKC,KAAL,GAAaV,GAAb,CAAkBW,IAAD,IAAU;UAChC,IAAIA,KAAKT,KAAL,KAAeM,IAAIN,KAAvB,EAA8B,OAAO,EAAE,GAAGS,IAAL;YAAWR,SAASK,IAAIL;UAAxB,CAAP;UAC9B,OAAOQ,IAAP;QACD,CAHM,CAAP;MAID,CALD;IAMF,CAPA;;IASAL,IAAIM,OAAJ,CAAaN,IAAD,IAAS;MACnB,IAAI,OAAOA,KAAIO,WAAX,KAA2B,UAA/B,EAA2C;QACzCP,KAAIO,WAAJP,CAAgBC,OAAhBD;MACF,CAFA,MAEO;QACLA,KAAIQ,gBAAJR,CAAqB,QAArBA,EAA+BC,OAA/BD;MACF;IACD,CAND;IAQA,OAAO,MAAM;MACXA,IAAIM,OAAJ,CAAaN,IAAD,IAAS;QACnB,IAAI,OAAOA,KAAIS,cAAX,KAA8B,UAAlC,EAA8C;UAC5CT,KAAIS,cAAJT,CAAmBC,OAAnBD;QACF,CAFA,MAEO;UACLA,KAAIU,mBAAJV,CAAwB,QAAxBA,EAAkCC,OAAlCD;QACF;MACD,CAND;IAOF,CARA;EAUF,CAtCA,EAsCG,CAACf,SAAD,CAtCH;EAwCA,OAAOO,MAAME,GAAN,CAAWW,IAAD,IAAUA,KAAKR,OAAzB,CAAP;AACF","names":["useEnvironment","useEffect","useState","useMediaQuery","query","options","ssr","fallback","getWindow","queries","Array","isArray","fallbackValues","filter","v","value","setValue","map","index","media","matches","matchMedia","win","mql","handler","evt","prev","slice","item","forEach","addListener","addEventListener","removeListener","removeEventListener"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\media-query\\src\\use-media-query.ts"],"sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useEffect, useState } from \"react\"\n\nexport type UseMediaQueryOptions = {\n  fallback?: boolean | boolean[]\n  ssr?: boolean\n}\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n * @param options the media query options { fallback, ssr }\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-media-query\n */\nexport function useMediaQuery(\n  query: string | string[],\n  options: UseMediaQueryOptions = {},\n): boolean[] {\n  const { ssr = true, fallback } = options\n\n  const { getWindow } = useEnvironment()\n\n  const queries = Array.isArray(query) ? query : [query]\n\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback]\n  fallbackValues = fallbackValues.filter((v) => v != null) as boolean[]\n\n  const [value, setValue] = useState(() => {\n    return queries.map((query, index) => ({\n      media: query,\n      matches: ssr\n        ? !!fallbackValues[index]\n        : getWindow().matchMedia(query).matches,\n    }))\n  })\n\n  useEffect(() => {\n    const win = getWindow()\n    setValue(\n      queries.map((query) => ({\n        media: query,\n        matches: win.matchMedia(query).matches,\n      })),\n    )\n\n    const mql = queries.map((query) => win.matchMedia(query))\n\n    const handler = (evt: MediaQueryListEvent) => {\n      setValue((prev) => {\n        return prev.slice().map((item) => {\n          if (item.media === evt.media) return { ...item, matches: evt.matches }\n          return item\n        })\n      })\n    }\n\n    mql.forEach((mql) => {\n      if (typeof mql.addListener === \"function\") {\n        mql.addListener(handler)\n      } else {\n        mql.addEventListener(\"change\", handler)\n      }\n    })\n\n    return () => {\n      mql.forEach((mql) => {\n        if (typeof mql.removeListener === \"function\") {\n          mql.removeListener(handler)\n        } else {\n          mql.removeEventListener(\"change\", handler)\n        }\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getWindow])\n\n  return value.map((item) => item.matches)\n}\n"]},"metadata":{},"sourceType":"module"}