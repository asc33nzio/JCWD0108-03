{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { getActiveElement, getAllFocusable, isTabbable } from \"@chakra-ui/dom-utils\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useCallback, useRef } from \"react\";\n\nfunction preventReturnFocus(containerRef) {\n  const el = containerRef.current;\n  if (!el) return false;\n  const activeElement = getActiveElement(el);\n  if (!activeElement) return false;\n  if (el.contains(activeElement)) return false;\n  if (isTabbable(activeElement)) return true;\n  return false;\n}\n\nfunction useFocusOnHide(containerRef, options) {\n  const {\n    shouldFocus: shouldFocusProp,\n    visible,\n    focusRef\n  } = options;\n  const shouldFocus = shouldFocusProp && !visible;\n  useUpdateEffect(() => {\n    if (!shouldFocus) return;\n\n    if (preventReturnFocus(containerRef)) {\n      return;\n    }\n\n    const el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;\n    let rafId;\n\n    if (el) {\n      rafId = requestAnimationFrame(() => {\n        el.focus({\n          preventScroll: true\n        });\n      });\n      return () => {\n        cancelAnimationFrame(rafId);\n      };\n    }\n  }, [shouldFocus, containerRef, focusRef]);\n}\n\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\n\nfunction useFocusOnShow(target) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOptions;\n  const {\n    focusRef,\n    preventScroll,\n    shouldFocus,\n    visible\n  } = options;\n  const element = isRefObject(target) ? target.current : target;\n  const autoFocusValue = shouldFocus && visible;\n  const autoFocusRef = useRef(autoFocusValue);\n  const lastVisibleRef = useRef(visible);\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue;\n    }\n\n    lastVisibleRef.current = visible;\n  }, [visible, autoFocusValue]);\n  const onFocus = useCallback(() => {\n    if (!visible || !element || !autoFocusRef.current) return;\n    autoFocusRef.current = false;\n    if (element.contains(document.activeElement)) return;\n\n    if (focusRef == null ? void 0 : focusRef.current) {\n      requestAnimationFrame(() => {\n        var _a;\n\n        (_a = focusRef.current) == null ? void 0 : _a.focus({\n          preventScroll\n        });\n      });\n    } else {\n      const tabbableEls = getAllFocusable(element);\n\n      if (tabbableEls.length > 0) {\n        requestAnimationFrame(() => {\n          tabbableEls[0].focus({\n            preventScroll\n          });\n        });\n      }\n    }\n  }, [visible, preventScroll, element, focusRef]);\n  useUpdateEffect(() => {\n    onFocus();\n  }, [onFocus]);\n  useEventListener(element, \"transitionend\", onFocus);\n}\n\nfunction isRefObject(val) {\n  return \"current\" in val;\n}\n\nexport { useFocusOnHide, useFocusOnShow };","map":{"version":3,"mappings":"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","names":["getActiveElement","getAllFocusable","isTabbable","useEventListener","useSafeLayoutEffect","useUpdateEffect","useCallback","useRef","preventReturnFocus","containerRef","el","current","activeElement","contains","useFocusOnHide","options","shouldFocus","shouldFocusProp","visible","focusRef","rafId","requestAnimationFrame","focus","preventScroll","cancelAnimationFrame","defaultOptions","useFocusOnShow","target","element","isRefObject","autoFocusValue","autoFocusRef","lastVisibleRef","onFocus","document","tabbableEls","length","val"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\react-use-focus-effect\\src\\index.ts"],"sourcesContent":["import {\n  FocusableElement,\n  getActiveElement,\n  getAllFocusable,\n  isTabbable,\n} from \"@chakra-ui/dom-utils\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport type { RefObject } from \"react\"\nimport { useCallback, useRef } from \"react\"\n\nexport interface UseFocusOnHideOptions {\n  focusRef: RefObject<FocusableElement>\n  shouldFocus?: boolean\n  visible?: boolean\n}\n\nfunction preventReturnFocus(containerRef: React.RefObject<HTMLElement>) {\n  const el = containerRef.current\n  if (!el) return false\n\n  const activeElement = getActiveElement(el)\n\n  if (!activeElement) return false\n  if (el.contains(activeElement)) return false\n  if (isTabbable(activeElement)) return true\n\n  return false\n}\n\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\nexport function useFocusOnHide(\n  containerRef: RefObject<HTMLElement>,\n  options: UseFocusOnHideOptions,\n) {\n  const { shouldFocus: shouldFocusProp, visible, focusRef } = options\n\n  const shouldFocus = shouldFocusProp && !visible\n\n  useUpdateEffect(() => {\n    if (!shouldFocus) return\n\n    if (preventReturnFocus(containerRef)) {\n      return\n    }\n\n    const el = focusRef?.current || containerRef.current\n\n    let rafId: number\n\n    if (el) {\n      rafId = requestAnimationFrame(() => {\n        el.focus({ preventScroll: true })\n      })\n      return () => {\n        cancelAnimationFrame(rafId)\n      }\n    }\n  }, [shouldFocus, containerRef, focusRef])\n}\n\nexport interface UseFocusOnShowOptions {\n  visible?: boolean\n  shouldFocus?: boolean\n  preventScroll?: boolean\n  focusRef?: React.RefObject<FocusableElement>\n}\n\nconst defaultOptions: UseFocusOnShowOptions = {\n  preventScroll: true,\n  shouldFocus: false,\n}\n\nexport function useFocusOnShow<T extends HTMLElement>(\n  target: React.RefObject<T> | T,\n  options = defaultOptions,\n) {\n  const { focusRef, preventScroll, shouldFocus, visible } = options\n  const element = isRefObject(target) ? target.current : target\n\n  const autoFocusValue = shouldFocus && visible\n  const autoFocusRef = useRef(autoFocusValue)\n  const lastVisibleRef = useRef(visible)\n\n  useSafeLayoutEffect(() => {\n    if (!lastVisibleRef.current && visible) {\n      autoFocusRef.current = autoFocusValue\n    }\n    lastVisibleRef.current = visible\n  }, [visible, autoFocusValue])\n\n  const onFocus = useCallback(() => {\n    if (!visible || !element || !autoFocusRef.current) return\n    autoFocusRef.current = false\n\n    if (element.contains(document.activeElement as HTMLElement)) return\n\n    if (focusRef?.current) {\n      requestAnimationFrame(() => {\n        focusRef.current?.focus({ preventScroll })\n      })\n    } else {\n      const tabbableEls = getAllFocusable(element)\n      if (tabbableEls.length > 0) {\n        requestAnimationFrame(() => {\n          tabbableEls[0].focus({ preventScroll })\n        })\n      }\n    }\n  }, [visible, preventScroll, element, focusRef])\n\n  useUpdateEffect(() => {\n    onFocus()\n  }, [onFocus])\n\n  useEventListener(element, \"transitionend\", onFocus)\n}\n\nfunction isRefObject(val: any): val is { current: any } {\n  return \"current\" in val\n}\n"]},"metadata":{},"sourceType":"module"}