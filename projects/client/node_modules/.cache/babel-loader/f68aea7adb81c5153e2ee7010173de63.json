{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { createContext as createReactContext, useContext as useReactContext } from \"react\";\n\nfunction getErrorMessage(hook, provider) {\n  return `${hook} returned \\`undefined\\`. Seems you forgot to wrap component within ${provider}`;\n}\n\nfunction createContext() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage,\n    defaultValue\n  } = options;\n  const Context = createReactContext(defaultValue);\n  Context.displayName = name;\n\n  function useContext() {\n    var _a;\n\n    const context = useReactContext(Context);\n\n    if (!context && strict) {\n      const error = new Error(errorMessage != null ? errorMessage : getErrorMessage(hookName, providerName));\n      error.name = \"ContextError\";\n      (_a = Error.captureStackTrace) == null ? void 0 : _a.call(Error, error, useContext);\n      throw error;\n    }\n\n    return context;\n  }\n\n  return [Context.Provider, useContext, Context];\n}\n\nexport { createContext };","map":{"version":3,"mappings":";;AAAA,SACEA,iBAAiBC,kBADnB,EAEEC,cAAcC,eAFhB,QAGO,OAHP;;AAoBA,SAASC,eAAT,CAAyBC,IAAzB,EAAuCC,QAAvC,EAAyD;EACvD,OAAO,GAAGD,0EAA0EC,UAApF;AACF;;AAEO,SAASN,aAAT,GAAiE;EAAA,IAAvCO,OAAuC,uEAAJ,EAAI;EACtE,MAAM;IACJC,IADI;IAEJC,SAAS,IAFL;IAGJC,WAAW,YAHP;IAIJC,eAAe,UAJX;IAKJC,YALI;IAMJC;EANI,IAOFN,OAPJ;EASA,MAAMO,UAAUb,mBAAkCY,YAAlC,CAAhB;EAEAC,QAAQC,WAAR,GAAsBP,IAAtB;;EAEA,SAASN,UAAT,GAAsB;IAtCxB;;IAuCI,MAAMc,UAAUb,gBAAgBW,OAAhB,CAAhB;;IAEA,IAAI,CAACE,OAAD,IAAYP,MAAhB,EAAwB;MACtB,MAAMQ,QAAQ,IAAIC,KAAJ,CACZN,sCAAgBR,gBAAgBM,QAAhB,EAA0BC,YAA1B,CADJ,CAAd;MAGAM,MAAMT,IAAN,GAAa,cAAb;MACA,YAAMW,iBAAN,oCAA0BF,KAA1B,EAAiCf,UAAjC;MACA,MAAMe,KAAN;IACF;;IAEA,OAAOD,OAAP;EACF;;EAEA,OAAO,CAACF,QAAQM,QAAT,EAAmBlB,UAAnB,EAA+BY,OAA/B,CAAP;AACF","names":["createContext","createReactContext","useContext","useReactContext","getErrorMessage","hook","provider","options","name","strict","hookName","providerName","errorMessage","defaultValue","Context","displayName","context","error","Error","captureStackTrace","Provider"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\react-context\\src\\index.ts"],"sourcesContent":["import {\n  createContext as createReactContext,\n  useContext as useReactContext,\n} from \"react\"\n\nexport interface CreateContextOptions<T> {\n  strict?: boolean\n  hookName?: string\n  providerName?: string\n  errorMessage?: string\n  name?: string\n  defaultValue?: T\n}\n\nexport type CreateContextReturn<T> = [\n  React.Provider<T>,\n  () => T,\n  React.Context<T>,\n]\n\nfunction getErrorMessage(hook: string, provider: string) {\n  return `${hook} returned \\`undefined\\`. Seems you forgot to wrap component within ${provider}`\n}\n\nexport function createContext<T>(options: CreateContextOptions<T> = {}) {\n  const {\n    name,\n    strict = true,\n    hookName = \"useContext\",\n    providerName = \"Provider\",\n    errorMessage,\n    defaultValue,\n  } = options\n\n  const Context = createReactContext<T | undefined>(defaultValue)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = useReactContext(Context)\n\n    if (!context && strict) {\n      const error = new Error(\n        errorMessage ?? getErrorMessage(hookName, providerName),\n      )\n      error.name = \"ContextError\"\n      Error.captureStackTrace?.(error, useContext)\n      throw error\n    }\n\n    return context\n  }\n\n  return [Context.Provider, useContext, Context] as CreateContextReturn<T>\n}\n"]},"metadata":{},"sourceType":"module"}