{"ast":null,"code":"'use client'; // src/use-pin-input.ts\n\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallback, useEffect, useState, useId } from \"react\";\nvar [PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant] = createDescendantContext();\nvar [PinInputProvider, usePinInputContext] = createContext({\n  name: \"PinInputContext\",\n  errorMessage: \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\"\n});\n\nvar toArray = value => value == null ? void 0 : value.split(\"\");\n\nfunction validate(value, type) {\n  const NUMERIC_REGEX = /^[0-9]+$/;\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;\n  return regex.test(value);\n}\n\nfunction usePinInput() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"\\u25CB\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask\n  } = props;\n  const uuid = useId();\n  const id = idProp != null ? idProp : `pin-input-${uuid}`;\n  const descendants = usePinInputDescendants();\n  const [moveFocus, setMoveFocus] = useState(true);\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  const [values, setValues] = useControllableState({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: values2 => onChange == null ? void 0 : onChange(values2.join(\"\"))\n  });\n  useEffect(() => {\n    if (autoFocus) {\n      const first = descendants.first();\n\n      if (first) {\n        requestAnimationFrame(() => {\n          first.node.focus();\n        });\n      }\n    }\n  }, [descendants]);\n  const focusNext = useCallback(index => {\n    if (!moveFocus || !manageFocus) return;\n    const next = descendants.next(index, false);\n\n    if (next) {\n      requestAnimationFrame(() => {\n        next.node.focus();\n      });\n    }\n  }, [descendants, moveFocus, manageFocus]);\n  const setValue = useCallback(function (value2, index) {\n    let handleFocus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const nextValues = [...values];\n    nextValues[index] = value2;\n    setValues(nextValues);\n    const isComplete = value2 !== \"\" && nextValues.length === descendants.count() && nextValues.every(inputValue => inputValue != null && inputValue !== \"\");\n\n    if (isComplete) {\n      onComplete == null ? void 0 : onComplete(nextValues.join(\"\"));\n    } else {\n      if (handleFocus) focusNext(index);\n    }\n  }, [values, setValues, focusNext, onComplete, descendants]);\n  const clear = useCallback(() => {\n    var _a;\n\n    const values2 = Array(descendants.count()).fill(\"\");\n    setValues(values2);\n    const first = descendants.first();\n    (_a = first == null ? void 0 : first.node) == null ? void 0 : _a.focus();\n  }, [descendants, setValues]);\n  const getNextValue = useCallback((value2, eventValue) => {\n    let nextValue = eventValue;\n\n    if ((value2 == null ? void 0 : value2.length) > 0) {\n      if (value2[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1);\n      } else if (value2[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0);\n      }\n    }\n\n    return nextValue;\n  }, []);\n  const getInputProps = useCallback(props2 => {\n    const {\n      index,\n      ...rest\n    } = props2;\n\n    const onChange2 = event => {\n      const eventValue = event.target.value;\n      const currentValue = values[index];\n      const nextValue = getNextValue(currentValue, eventValue);\n\n      if (nextValue === \"\") {\n        setValue(\"\", index);\n        return;\n      }\n\n      if (eventValue.length > 2) {\n        if (validate(eventValue, type)) {\n          const nextValue2 = eventValue.split(\"\").filter((_, index2) => index2 < descendants.count());\n          setValues(nextValue2);\n\n          if (nextValue2.length === descendants.count()) {\n            onComplete == null ? void 0 : onComplete(nextValue2.join(\"\"));\n          }\n        }\n      } else {\n        if (validate(nextValue, type)) {\n          setValue(nextValue, index);\n        }\n\n        setMoveFocus(true);\n      }\n    };\n\n    const onKeyDown = event => {\n      var _a;\n\n      if (event.key === \"Backspace\" && manageFocus) {\n        if (event.target.value === \"\") {\n          const prevInput = descendants.prev(index, false);\n\n          if (prevInput) {\n            setValue(\"\", index - 1, false);\n            (_a = prevInput.node) == null ? void 0 : _a.focus();\n            setMoveFocus(true);\n          }\n        } else {\n          setMoveFocus(false);\n        }\n      }\n    };\n\n    const onFocus = () => {\n      setFocusedIndex(index);\n    };\n\n    const onBlur = () => {\n      setFocusedIndex(-1);\n    };\n\n    const hasFocus = focusedIndex === index;\n    const inputType = type === \"number\" ? \"tel\" : \"text\";\n    return {\n      \"aria-label\": \"Please enter your pin code\",\n      inputMode: type === \"number\" ? \"numeric\" : \"text\",\n      type: mask ? \"password\" : inputType,\n      ...rest,\n      id: `${id}-${index}`,\n      disabled: isDisabled,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      onChange: callAllHandlers(rest.onChange, onChange2),\n      onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(rest.onFocus, onFocus),\n      onBlur: callAllHandlers(rest.onBlur, onBlur),\n      value: values[index] || \"\",\n      autoComplete: otp ? \"one-time-code\" : \"off\",\n      placeholder: hasFocus ? \"\" : placeholder\n    };\n  }, [descendants, focusedIndex, getNextValue, id, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues, type, values]);\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear\n  };\n}\n\nfunction usePinInputField() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const {\n    getInputProps\n  } = usePinInputContext();\n  const {\n    index,\n    register\n  } = usePinInputDescendant();\n  return getInputProps({ ...props,\n    ref: mergeRefs(register, ref),\n    index\n  });\n}\n\nexport { PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant, PinInputProvider, usePinInputContext, usePinInput, usePinInputField };","map":{"version":3,"mappings":"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","names":["createDescendantContext","useControllableState","ariaAttr","callAllHandlers","createContext","mergeRefs","useCallback","useEffect","useState","useId","PinInputDescendantsProvider","usePinInputDescendantsContext","usePinInputDescendants","usePinInputDescendant","PinInputProvider","usePinInputContext","name","errorMessage","toArray","value","split","validate","type","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","test","usePinInput","props","autoFocus","defaultValue","onChange","onComplete","placeholder","manageFocus","otp","id","idProp","isDisabled","isInvalid","mask","uuid","descendants","moveFocus","setMoveFocus","focusedIndex","setFocusedIndex","values","setValues","join","first","requestAnimationFrame","node","focus","focusNext","index","next","setValue","handleFocus","nextValues","isComplete","length","count","every","inputValue","clear","Array","fill","getNextValue","eventValue","nextValue","charAt","getInputProps","rest","event","target","currentValue","filter","_","onKeyDown","key","prevInput","prev","onFocus","onBlur","hasFocus","inputType","inputMode","disabled","autoComplete","usePinInputField","ref","register"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\pin-input\\src\\use-pin-input.ts"],"sourcesContent":["import { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallback, useEffect, useState, useId } from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  PinInputDescendantsProvider,\n  usePinInputDescendantsContext,\n  usePinInputDescendants,\n  usePinInputDescendant,\n] = createDescendantContext<HTMLInputElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context that stores pin-input logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PinInputContext = Omit<UsePinInputReturn, \"descendants\"> & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nexport const [PinInputProvider, usePinInputContext] =\n  createContext<PinInputContext>({\n    name: \"PinInputContext\",\n    errorMessage:\n      \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n  })\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput - handles the general pin input logic\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"○\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const descendants = usePinInputDescendants()\n\n  const [moveFocus, setMoveFocus] = useState(true)\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  useEffect(() => {\n    if (autoFocus) {\n      const first = descendants.first()\n      if (first) {\n        requestAnimationFrame(() => {\n          first.node.focus()\n        })\n      }\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n      const next = descendants.next(index, false)\n      if (next) {\n        requestAnimationFrame(() => {\n          next.node.focus()\n        })\n      }\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = useCallback(\n    (value: string, index: number, handleFocus: boolean = true) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        nextValues.length === descendants.count() &&\n        nextValues.every(\n          (inputValue) => inputValue != null && inputValue !== \"\",\n        )\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        if (handleFocus) focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants],\n  )\n\n  const clear = useCallback(() => {\n    const values: string[] = Array(descendants.count()).fill(\"\")\n    setValues(values)\n    const first = descendants.first()\n    first?.node?.focus()\n  }, [descendants, setValues])\n\n  const getNextValue = useCallback((value: string, eventValue: string) => {\n    let nextValue = eventValue\n    if (value?.length > 0) {\n      if (value[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1)\n      } else if (value[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0)\n      }\n    }\n    return nextValue\n  }, [])\n\n  const getInputProps = useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.count())\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.count()) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants.prev(index, false)\n            if (prevInput) {\n              setValue(\"\", index - 1, false)\n              prevInput.node?.focus()\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\n/**\n * @internal\n */\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { getInputProps } = usePinInputContext()\n  const { index, register } = usePinInputDescendant()\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(register, ref),\n    index,\n  })\n}\n\ninterface InputProps\n  extends Omit<\n    React.ComponentPropsWithRef<\"input\">,\n    \"color\" | \"height\" | \"width\"\n  > {}\n"]},"metadata":{},"sourceType":"module"}