{"ast":null,"code":"'use client'; // src/use-event-listeners.ts\n\nimport { useCallback, useEffect, useRef } from \"react\";\n\nfunction useEventListeners() {\n  const listeners = useRef( /* @__PURE__ */new Map());\n  const currentListeners = listeners.current;\n  const add = useCallback((el, type, listener, options) => {\n    listeners.current.set(listener, {\n      type,\n      el,\n      options\n    });\n    el.addEventListener(type, listener, options);\n  }, []);\n  const remove = useCallback((el, type, listener, options) => {\n    el.removeEventListener(type, listener, options);\n    listeners.current.delete(listener);\n  }, []);\n  useEffect(() => () => {\n    currentListeners.forEach((value, key) => {\n      remove(value.el, value.type, key, value.options);\n    });\n  }, [remove, currentListeners]);\n  return {\n    add,\n    remove\n  };\n}\n\nexport { useEventListeners };","map":{"version":3,"mappings":";;AAAA,SAASA,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,QAA+C,OAA/C;;AA6BO,SAASC,iBAAT,GAA6C;EAClD,MAAMC,YAAYF,QAAO,mBAAIG,GAAJ,EAAP,CAAlB;EACA,MAAMC,mBAAmBF,UAAUG,OAAnC;EAEA,MAAMC,MAAMR,YAAY,CAACS,EAAD,EAAUC,IAAV,EAAqBC,QAArB,EAAoCC,OAApC,KAAqD;IAC3ER,UAAUG,OAAV,CAAkBM,GAAlB,CAAsBF,QAAtB,EAAgC;MAAED,IAAF;MAAQD,EAAR;MAAYG;IAAZ,CAAhC;IACAH,GAAGK,gBAAH,CAAoBJ,IAApB,EAA0BC,QAA1B,EAAoCC,OAApC;EACF,CAHY,EAGT,EAHS,CAAZ;EAKA,MAAMG,SAASf,YACb,CAACS,EAAD,EAAUC,IAAV,EAAqBC,QAArB,EAAoCC,OAApC,KAAqD;IACnDH,GAAGO,mBAAH,CAAuBN,IAAvB,EAA6BC,QAA7B,EAAuCC,OAAvC;IACAR,UAAUG,OAAV,CAAkBU,MAAlB,CAAyBN,QAAzB;EACF,CAJa,EAKb,EALa,CAAf;EAQAV,UACE,MAAM,MAAM;IACVK,iBAAiBY,OAAjB,CAAyB,CAACC,KAAD,EAAQC,GAAR,KAAgB;MACvCL,OAAOI,MAAMV,EAAb,EAAiBU,MAAMT,IAAvB,EAA6BU,GAA7B,EAAkCD,MAAMP,OAAxC;IACD,CAFD;EAGF,CALF,EAME,CAACG,MAAD,EAAST,gBAAT,CANF;EASA,OAAO;IAAEE,GAAF;IAAOO;EAAP,CAAP;AACF","names":["useCallback","useEffect","useRef","useEventListeners","listeners","Map","currentListeners","current","add","el","type","listener","options","set","addEventListener","remove","removeEventListener","delete","forEach","value","key"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\clickable\\src\\use-event-listeners.ts"],"sourcesContent":["import { useCallback, useEffect, useRef } from \"react\"\n\ninterface EventListeners {\n  add<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  add(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions,\n  ): void\n  remove<K extends keyof DocumentEventMap>(\n    el: EventTarget,\n    type: K,\n    listener: (this: Document, ev: DocumentEventMap[K]) => any,\n    options?: boolean | EventListenerOptions,\n  ): void\n  remove(\n    el: EventTarget,\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions,\n  ): void\n}\n\nexport function useEventListeners(): EventListeners {\n  const listeners = useRef(new Map())\n  const currentListeners = listeners.current\n\n  const add = useCallback((el: any, type: any, listener: any, options: any) => {\n    listeners.current.set(listener, { type, el, options })\n    el.addEventListener(type, listener, options)\n  }, [])\n\n  const remove = useCallback(\n    (el: any, type: any, listener: any, options: any) => {\n      el.removeEventListener(type, listener, options)\n      listeners.current.delete(listener)\n    },\n    [],\n  )\n\n  useEffect(\n    () => () => {\n      currentListeners.forEach((value, key) => {\n        remove(value.el, value.type, key, value.options)\n      })\n    },\n    [remove, currentListeners],\n  )\n\n  return { add, remove }\n}\n"]},"metadata":{},"sourceType":"module"}