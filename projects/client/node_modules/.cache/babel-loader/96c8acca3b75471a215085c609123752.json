{"ast":null,"code":"'use client';\n\nimport { MenuDescendantsProvider, MenuProvider, useMenu } from \"./chunk-2D5GRB32.mjs\"; // src/menu.tsx\n\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { omitThemingProps, useMultiStyleConfig, useTheme } from \"@chakra-ui/system\";\nimport { runIfFn } from \"@chakra-ui/shared-utils\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [MenuStylesProvider, useMenuStyles] = createContext({\n  name: `MenuStylesContext`,\n  errorMessage: `useMenuStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Menu />\" `\n});\n\nvar Menu = props => {\n  const {\n    children\n  } = props;\n  const styles = useMultiStyleConfig(\"Menu\", props);\n  const ownProps = omitThemingProps(props);\n  const {\n    direction\n  } = useTheme();\n  const {\n    descendants,\n    ...ctx\n  } = useMenu({ ...ownProps,\n    direction\n  });\n  const context = useMemo(() => ctx, [ctx]);\n  const {\n    isOpen,\n    onClose,\n    forceUpdate\n  } = context;\n  return /* @__PURE__ */jsx(MenuDescendantsProvider, {\n    value: descendants,\n    children: /* @__PURE__ */jsx(MenuProvider, {\n      value: context,\n      children: /* @__PURE__ */jsx(MenuStylesProvider, {\n        value: styles,\n        children: runIfFn(children, {\n          isOpen,\n          onClose,\n          forceUpdate\n        })\n      })\n    })\n  });\n};\n\nMenu.displayName = \"Menu\";\nexport { useMenuStyles, Menu };","map":{"version":3,"mappings":";;;;AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SACEC,gBADF,EAIEC,mBAJF,EAKEC,QALF,QAMO,mBANP;AAOA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,OAAT,QAAwB,OAAxB;AA+CQ;AAvCR,IAAM,CAACC,kBAAD,EAAqBC,aAArB,IAAsCP,cAE1C;EACAQ,MAAM,mBADN;EAEAC,cAAc;AAFd,CAF0C,CAA5C;;AAyBO,IAAMC,OAA6BC,KAAD,IAAW;EAClD,MAAM;IAAEC;EAAF,IAAeD,KAArB;EAEA,MAAME,SAASX,oBAAoB,MAApB,EAA4BS,KAA5B,CAAf;EACA,MAAMG,WAAWb,iBAAiBU,KAAjB,CAAjB;EACA,MAAM;IAAEI;EAAF,IAAgBZ,UAAtB;EACA,MAAM;IAAEa,WAAF;IAAe,GAAGC;EAAlB,IAA0BC,QAAQ,EAAE,GAAGJ,QAAL;IAAeC;EAAf,CAAR,CAAhC;EACA,MAAMI,UAAUd,QAAQ,MAAMY,GAAd,EAAmB,CAACA,GAAD,CAAnB,CAAhB;EAEA,MAAM;IAAEG,MAAF;IAAUC,OAAV;IAAmBC;EAAnB,IAAmCH,OAAzC;EAEA,OACE,mBAACI,uBAAD,EAAC;IAAwBC,OAAOR,WAA/B;IACCJ,6BAACa,YAAD,EAAC;MAAaD,OAAOL,OAApB;MACCP,6BAACN,kBAAD,EAAC;QAAmBkB,OAAOX,MAA1B;QACED,kBAAQA,QAAR,EAAkB;UAAEQ,MAAF;UAAUC,OAAV;UAAmBC;QAAnB,CAAlB;MADF,CAAD;IADD,CAAD;EADD,CAAD,CADF;AASF,CApBO;;AAsBPZ,KAAKgB,WAAL,GAAmB,MAAnB","names":["createContext","omitThemingProps","useMultiStyleConfig","useTheme","runIfFn","useMemo","MenuStylesProvider","useMenuStyles","name","errorMessage","Menu","props","children","styles","ownProps","direction","descendants","ctx","useMenu","context","isOpen","onClose","forceUpdate","MenuDescendantsProvider","value","MenuProvider","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\menu\\src\\menu.tsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport {\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  useTheme,\n} from \"@chakra-ui/system\"\nimport { runIfFn } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport {\n  MenuDescendantsProvider,\n  MenuProvider,\n  useMenu,\n  UseMenuProps,\n} from \"./use-menu\"\n\nconst [MenuStylesProvider, useMenuStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `MenuStylesContext`,\n  errorMessage: `useMenuStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Menu />\" `,\n})\n\nexport { useMenuStyles }\n\ntype MaybeRenderProp<P> = React.ReactNode | ((props: P) => React.ReactNode)\n\nexport interface MenuProps extends UseMenuProps, ThemingProps<\"Menu\"> {\n  children: MaybeRenderProp<{\n    isOpen: boolean\n    onClose: () => void\n    forceUpdate: (() => void) | undefined\n  }>\n}\n\n/**\n * Menu provides context, state, and focus management\n * to its sub-components. It doesn't render any DOM node.\n *\n * @see Docs https://chakra-ui.com/docs/components/menu\n */\nexport const Menu: React.FC<MenuProps> = (props) => {\n  const { children } = props\n\n  const styles = useMultiStyleConfig(\"Menu\", props)\n  const ownProps = omitThemingProps(props)\n  const { direction } = useTheme()\n  const { descendants, ...ctx } = useMenu({ ...ownProps, direction })\n  const context = useMemo(() => ctx, [ctx])\n\n  const { isOpen, onClose, forceUpdate } = context\n\n  return (\n    <MenuDescendantsProvider value={descendants}>\n      <MenuProvider value={context}>\n        <MenuStylesProvider value={styles}>\n          {runIfFn(children, { isOpen, onClose, forceUpdate })}\n        </MenuStylesProvider>\n      </MenuProvider>\n    </MenuDescendantsProvider>\n  )\n}\n\nMenu.displayName = \"Menu\"\n"]},"metadata":{},"sourceType":"module"}