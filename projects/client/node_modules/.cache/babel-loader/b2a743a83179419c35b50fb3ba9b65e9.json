{"ast":null,"code":"import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\nconst types = {\n  decay: inertia,\n  inertia,\n  tween: keyframes,\n  keyframes: keyframes,\n  spring\n};\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\n\nfunction animateValue(_ref) {\n  let {\n    autoplay = true,\n    delay = 0,\n    driver = frameloopDriver,\n    keyframes: keyframes$1,\n    type = \"keyframes\",\n    repeat = 0,\n    repeatDelay = 0,\n    repeatType = \"loop\",\n    onPlay,\n    onStop,\n    onComplete,\n    onUpdate,\n    ...options\n  } = _ref;\n  let speed = 1;\n  let hasStopped = false;\n  let resolveFinishedPromise;\n  let currentFinishedPromise;\n  /**\n   * Resolve the current Promise every time we enter the\n   * finished state. This is WAAPI-compatible behaviour.\n   */\n\n  const updateFinishedPromise = () => {\n    currentFinishedPromise = new Promise(resolve => {\n      resolveFinishedPromise = resolve;\n    });\n  }; // Create the first finished promise\n\n\n  updateFinishedPromise();\n  let animationDriver;\n  const generatorFactory = types[type] || keyframes;\n  /**\n   * If this isn't the keyframes generator and we've been provided\n   * strings as keyframes, we need to interpolate these.\n   * TODO: Support velocity for units and complex value types/\n   */\n\n  let mapNumbersToKeyframes;\n\n  if (generatorFactory !== keyframes && typeof keyframes$1[0] !== \"number\") {\n    mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n      clamp: false\n    });\n    keyframes$1 = [0, 100];\n  }\n\n  const generator = generatorFactory({ ...options,\n    keyframes: keyframes$1\n  });\n  let mirroredGenerator;\n\n  if (repeatType === \"mirror\") {\n    mirroredGenerator = generatorFactory({ ...options,\n      keyframes: [...keyframes$1].reverse(),\n      velocity: -(options.velocity || 0)\n    });\n  }\n\n  let playState = \"idle\";\n  let holdTime = null;\n  let startTime = null;\n  let cancelTime = null;\n  /**\n   * If duration is undefined and we have repeat options,\n   * we need to calculate a duration from the generator.\n   *\n   * We set it to the generator itself to cache the duration.\n   * Any timeline resolver will need to have already precalculated\n   * the duration by this step.\n   */\n\n  if (generator.calculatedDuration === null && repeat) {\n    generator.calculatedDuration = calcGeneratorDuration(generator);\n  }\n\n  const {\n    calculatedDuration\n  } = generator;\n  let resolvedDuration = Infinity;\n  let totalDuration = Infinity;\n\n  if (calculatedDuration !== null) {\n    resolvedDuration = calculatedDuration + repeatDelay;\n    totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n  }\n\n  let currentTime = 0;\n\n  const tick = timestamp => {\n    if (startTime === null) return;\n    /**\n     * requestAnimationFrame timestamps can come through as lower than\n     * the startTime as set by performance.now(). Here we prevent this,\n     * though in the future it could be possible to make setting startTime\n     * a pending operation that gets resolved here.\n     */\n\n    if (speed > 0) startTime = Math.min(startTime, timestamp);\n    if (speed < 0) startTime = Math.min(timestamp - totalDuration / speed, startTime);\n\n    if (holdTime !== null) {\n      currentTime = holdTime;\n    } else {\n      // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n      // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n      // example.\n      currentTime = Math.round(timestamp - startTime) * speed;\n    } // Rebase on delay\n\n\n    const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);\n    const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;\n    currentTime = Math.max(timeWithoutDelay, 0);\n    /**\n     * If this animation has finished, set the current time\n     * to the total duration.\n     */\n\n    if (playState === \"finished\" && holdTime === null) {\n      currentTime = totalDuration;\n    }\n\n    let elapsed = currentTime;\n    let frameGenerator = generator;\n\n    if (repeat) {\n      /**\n       * Get the current progress (0-1) of the animation. If t is >\n       * than duration we'll get values like 2.5 (midway through the\n       * third iteration)\n       */\n      const progress = currentTime / resolvedDuration;\n      /**\n       * Get the current iteration (0 indexed). For instance the floor of\n       * 2.5 is 2.\n       */\n\n      let currentIteration = Math.floor(progress);\n      /**\n       * Get the current progress of the iteration by taking the remainder\n       * so 2.5 is 0.5 through iteration 2\n       */\n\n      let iterationProgress = progress % 1.0;\n      /**\n       * If iteration progress is 1 we count that as the end\n       * of the previous iteration.\n       */\n\n      if (!iterationProgress && progress >= 1) {\n        iterationProgress = 1;\n      }\n\n      iterationProgress === 1 && currentIteration--;\n      currentIteration = Math.min(currentIteration, repeat + 1);\n      /**\n       * Reverse progress if we're not running in \"normal\" direction\n       */\n\n      const iterationIsOdd = Boolean(currentIteration % 2);\n\n      if (iterationIsOdd) {\n        if (repeatType === \"reverse\") {\n          iterationProgress = 1 - iterationProgress;\n\n          if (repeatDelay) {\n            iterationProgress -= repeatDelay / resolvedDuration;\n          }\n        } else if (repeatType === \"mirror\") {\n          frameGenerator = mirroredGenerator;\n        }\n      }\n\n      let p = clamp(0, 1, iterationProgress);\n\n      if (currentTime > totalDuration) {\n        p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n      }\n\n      elapsed = p * resolvedDuration;\n    }\n    /**\n     * If we're in negative time, set state as the initial keyframe.\n     * This prevents delay: x, duration: 0 animations from finishing\n     * instantly.\n     */\n\n\n    const state = isInDelayPhase ? {\n      done: false,\n      value: keyframes$1[0]\n    } : frameGenerator.next(elapsed);\n\n    if (mapNumbersToKeyframes) {\n      state.value = mapNumbersToKeyframes(state.value);\n    }\n\n    let {\n      done\n    } = state;\n\n    if (!isInDelayPhase && calculatedDuration !== null) {\n      done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;\n    }\n\n    const isAnimationFinished = holdTime === null && (playState === \"finished\" || playState === \"running\" && done);\n\n    if (onUpdate) {\n      onUpdate(state.value);\n    }\n\n    if (isAnimationFinished) {\n      finish();\n    }\n\n    return state;\n  };\n\n  const stopAnimationDriver = () => {\n    animationDriver && animationDriver.stop();\n    animationDriver = undefined;\n  };\n\n  const cancel = () => {\n    playState = \"idle\";\n    stopAnimationDriver();\n    resolveFinishedPromise();\n    updateFinishedPromise();\n    startTime = cancelTime = null;\n  };\n\n  const finish = () => {\n    playState = \"finished\";\n    onComplete && onComplete();\n    stopAnimationDriver();\n    resolveFinishedPromise();\n  };\n\n  const play = () => {\n    if (hasStopped) return;\n    if (!animationDriver) animationDriver = driver(tick);\n    const now = animationDriver.now();\n    onPlay && onPlay();\n\n    if (holdTime !== null) {\n      startTime = now - holdTime;\n    } else if (!startTime || playState === \"finished\") {\n      startTime = now;\n    }\n\n    if (playState === \"finished\") {\n      updateFinishedPromise();\n    }\n\n    cancelTime = startTime;\n    holdTime = null;\n    /**\n     * Set playState to running only after we've used it in\n     * the previous logic.\n     */\n\n    playState = \"running\";\n    animationDriver.start();\n  };\n\n  if (autoplay) {\n    play();\n  }\n\n  const controls = {\n    then(resolve, reject) {\n      return currentFinishedPromise.then(resolve, reject);\n    },\n\n    get time() {\n      return millisecondsToSeconds(currentTime);\n    },\n\n    set time(newTime) {\n      newTime = secondsToMilliseconds(newTime);\n      currentTime = newTime;\n\n      if (holdTime !== null || !animationDriver || speed === 0) {\n        holdTime = newTime;\n      } else {\n        startTime = animationDriver.now() - newTime / speed;\n      }\n    },\n\n    get duration() {\n      const duration = generator.calculatedDuration === null ? calcGeneratorDuration(generator) : generator.calculatedDuration;\n      return millisecondsToSeconds(duration);\n    },\n\n    get speed() {\n      return speed;\n    },\n\n    set speed(newSpeed) {\n      if (newSpeed === speed || !animationDriver) return;\n      speed = newSpeed;\n      controls.time = millisecondsToSeconds(currentTime);\n    },\n\n    get state() {\n      return playState;\n    },\n\n    play,\n    pause: () => {\n      playState = \"paused\";\n      holdTime = currentTime;\n    },\n    stop: () => {\n      hasStopped = true;\n      if (playState === \"idle\") return;\n      playState = \"idle\";\n      onStop && onStop();\n      cancel();\n    },\n    cancel: () => {\n      if (cancelTime !== null) tick(cancelTime);\n      cancel();\n    },\n    complete: () => {\n      playState = \"finished\";\n    },\n    sample: elapsed => {\n      startTime = 0;\n      return tick(elapsed);\n    }\n  };\n  return controls;\n}\n\nexport { animateValue };","map":{"version":3,"names":["keyframes","spring","inertia","frameloopDriver","interpolate","clamp","millisecondsToSeconds","secondsToMilliseconds","calcGeneratorDuration","types","decay","tween","animateValue","autoplay","delay","driver","keyframes$1","type","repeat","repeatDelay","repeatType","onPlay","onStop","onComplete","onUpdate","options","speed","hasStopped","resolveFinishedPromise","currentFinishedPromise","updateFinishedPromise","Promise","resolve","animationDriver","generatorFactory","mapNumbersToKeyframes","generator","mirroredGenerator","reverse","velocity","playState","holdTime","startTime","cancelTime","calculatedDuration","resolvedDuration","Infinity","totalDuration","currentTime","tick","timestamp","Math","min","round","timeWithoutDelay","isInDelayPhase","max","elapsed","frameGenerator","progress","currentIteration","floor","iterationProgress","iterationIsOdd","Boolean","p","state","done","value","next","isAnimationFinished","finish","stopAnimationDriver","stop","undefined","cancel","play","now","start","controls","then","reject","time","newTime","duration","newSpeed","pause","complete","sample"],"sources":["C:/Purwadhika/JCWD Bandung/4. REAL PROJECT/JCWD0108-03/node_modules/framer-motion/dist/es/animation/animators/js/index.mjs"],"sourcesContent":["import { keyframes } from '../../generators/keyframes.mjs';\nimport { spring } from '../../generators/spring/index.mjs';\nimport { inertia } from '../../generators/inertia.mjs';\nimport { frameloopDriver } from './driver-frameloop.mjs';\nimport { interpolate } from '../../../utils/interpolate.mjs';\nimport { clamp } from '../../../utils/clamp.mjs';\nimport { millisecondsToSeconds, secondsToMilliseconds } from '../../../utils/time-conversion.mjs';\nimport { calcGeneratorDuration } from '../../generators/utils/calc-duration.mjs';\n\nconst types = {\n    decay: inertia,\n    inertia,\n    tween: keyframes,\n    keyframes: keyframes,\n    spring,\n};\n/**\n * Animate a single value on the main thread.\n *\n * This function is written, where functionality overlaps,\n * to be largely spec-compliant with WAAPI to allow fungibility\n * between the two.\n */\nfunction animateValue({ autoplay = true, delay = 0, driver = frameloopDriver, keyframes: keyframes$1, type = \"keyframes\", repeat = 0, repeatDelay = 0, repeatType = \"loop\", onPlay, onStop, onComplete, onUpdate, ...options }) {\n    let speed = 1;\n    let hasStopped = false;\n    let resolveFinishedPromise;\n    let currentFinishedPromise;\n    /**\n     * Resolve the current Promise every time we enter the\n     * finished state. This is WAAPI-compatible behaviour.\n     */\n    const updateFinishedPromise = () => {\n        currentFinishedPromise = new Promise((resolve) => {\n            resolveFinishedPromise = resolve;\n        });\n    };\n    // Create the first finished promise\n    updateFinishedPromise();\n    let animationDriver;\n    const generatorFactory = types[type] || keyframes;\n    /**\n     * If this isn't the keyframes generator and we've been provided\n     * strings as keyframes, we need to interpolate these.\n     * TODO: Support velocity for units and complex value types/\n     */\n    let mapNumbersToKeyframes;\n    if (generatorFactory !== keyframes &&\n        typeof keyframes$1[0] !== \"number\") {\n        mapNumbersToKeyframes = interpolate([0, 100], keyframes$1, {\n            clamp: false,\n        });\n        keyframes$1 = [0, 100];\n    }\n    const generator = generatorFactory({ ...options, keyframes: keyframes$1 });\n    let mirroredGenerator;\n    if (repeatType === \"mirror\") {\n        mirroredGenerator = generatorFactory({\n            ...options,\n            keyframes: [...keyframes$1].reverse(),\n            velocity: -(options.velocity || 0),\n        });\n    }\n    let playState = \"idle\";\n    let holdTime = null;\n    let startTime = null;\n    let cancelTime = null;\n    /**\n     * If duration is undefined and we have repeat options,\n     * we need to calculate a duration from the generator.\n     *\n     * We set it to the generator itself to cache the duration.\n     * Any timeline resolver will need to have already precalculated\n     * the duration by this step.\n     */\n    if (generator.calculatedDuration === null && repeat) {\n        generator.calculatedDuration = calcGeneratorDuration(generator);\n    }\n    const { calculatedDuration } = generator;\n    let resolvedDuration = Infinity;\n    let totalDuration = Infinity;\n    if (calculatedDuration !== null) {\n        resolvedDuration = calculatedDuration + repeatDelay;\n        totalDuration = resolvedDuration * (repeat + 1) - repeatDelay;\n    }\n    let currentTime = 0;\n    const tick = (timestamp) => {\n        if (startTime === null)\n            return;\n        /**\n         * requestAnimationFrame timestamps can come through as lower than\n         * the startTime as set by performance.now(). Here we prevent this,\n         * though in the future it could be possible to make setting startTime\n         * a pending operation that gets resolved here.\n         */\n        if (speed > 0)\n            startTime = Math.min(startTime, timestamp);\n        if (speed < 0)\n            startTime = Math.min(timestamp - totalDuration / speed, startTime);\n        if (holdTime !== null) {\n            currentTime = holdTime;\n        }\n        else {\n            // Rounding the time because floating point arithmetic is not always accurate, e.g. 3000.367 - 1000.367 =\n            // 2000.0000000000002. This is a problem when we are comparing the currentTime with the duration, for\n            // example.\n            currentTime = Math.round(timestamp - startTime) * speed;\n        }\n        // Rebase on delay\n        const timeWithoutDelay = currentTime - delay * (speed >= 0 ? 1 : -1);\n        const isInDelayPhase = speed >= 0 ? timeWithoutDelay < 0 : timeWithoutDelay > totalDuration;\n        currentTime = Math.max(timeWithoutDelay, 0);\n        /**\n         * If this animation has finished, set the current time\n         * to the total duration.\n         */\n        if (playState === \"finished\" && holdTime === null) {\n            currentTime = totalDuration;\n        }\n        let elapsed = currentTime;\n        let frameGenerator = generator;\n        if (repeat) {\n            /**\n             * Get the current progress (0-1) of the animation. If t is >\n             * than duration we'll get values like 2.5 (midway through the\n             * third iteration)\n             */\n            const progress = currentTime / resolvedDuration;\n            /**\n             * Get the current iteration (0 indexed). For instance the floor of\n             * 2.5 is 2.\n             */\n            let currentIteration = Math.floor(progress);\n            /**\n             * Get the current progress of the iteration by taking the remainder\n             * so 2.5 is 0.5 through iteration 2\n             */\n            let iterationProgress = progress % 1.0;\n            /**\n             * If iteration progress is 1 we count that as the end\n             * of the previous iteration.\n             */\n            if (!iterationProgress && progress >= 1) {\n                iterationProgress = 1;\n            }\n            iterationProgress === 1 && currentIteration--;\n            currentIteration = Math.min(currentIteration, repeat + 1);\n            /**\n             * Reverse progress if we're not running in \"normal\" direction\n             */\n            const iterationIsOdd = Boolean(currentIteration % 2);\n            if (iterationIsOdd) {\n                if (repeatType === \"reverse\") {\n                    iterationProgress = 1 - iterationProgress;\n                    if (repeatDelay) {\n                        iterationProgress -= repeatDelay / resolvedDuration;\n                    }\n                }\n                else if (repeatType === \"mirror\") {\n                    frameGenerator = mirroredGenerator;\n                }\n            }\n            let p = clamp(0, 1, iterationProgress);\n            if (currentTime > totalDuration) {\n                p = repeatType === \"reverse\" && iterationIsOdd ? 1 : 0;\n            }\n            elapsed = p * resolvedDuration;\n        }\n        /**\n         * If we're in negative time, set state as the initial keyframe.\n         * This prevents delay: x, duration: 0 animations from finishing\n         * instantly.\n         */\n        const state = isInDelayPhase\n            ? { done: false, value: keyframes$1[0] }\n            : frameGenerator.next(elapsed);\n        if (mapNumbersToKeyframes) {\n            state.value = mapNumbersToKeyframes(state.value);\n        }\n        let { done } = state;\n        if (!isInDelayPhase && calculatedDuration !== null) {\n            done = speed >= 0 ? currentTime >= totalDuration : currentTime <= 0;\n        }\n        const isAnimationFinished = holdTime === null &&\n            (playState === \"finished\" || (playState === \"running\" && done));\n        if (onUpdate) {\n            onUpdate(state.value);\n        }\n        if (isAnimationFinished) {\n            finish();\n        }\n        return state;\n    };\n    const stopAnimationDriver = () => {\n        animationDriver && animationDriver.stop();\n        animationDriver = undefined;\n    };\n    const cancel = () => {\n        playState = \"idle\";\n        stopAnimationDriver();\n        resolveFinishedPromise();\n        updateFinishedPromise();\n        startTime = cancelTime = null;\n    };\n    const finish = () => {\n        playState = \"finished\";\n        onComplete && onComplete();\n        stopAnimationDriver();\n        resolveFinishedPromise();\n    };\n    const play = () => {\n        if (hasStopped)\n            return;\n        if (!animationDriver)\n            animationDriver = driver(tick);\n        const now = animationDriver.now();\n        onPlay && onPlay();\n        if (holdTime !== null) {\n            startTime = now - holdTime;\n        }\n        else if (!startTime || playState === \"finished\") {\n            startTime = now;\n        }\n        if (playState === \"finished\") {\n            updateFinishedPromise();\n        }\n        cancelTime = startTime;\n        holdTime = null;\n        /**\n         * Set playState to running only after we've used it in\n         * the previous logic.\n         */\n        playState = \"running\";\n        animationDriver.start();\n    };\n    if (autoplay) {\n        play();\n    }\n    const controls = {\n        then(resolve, reject) {\n            return currentFinishedPromise.then(resolve, reject);\n        },\n        get time() {\n            return millisecondsToSeconds(currentTime);\n        },\n        set time(newTime) {\n            newTime = secondsToMilliseconds(newTime);\n            currentTime = newTime;\n            if (holdTime !== null || !animationDriver || speed === 0) {\n                holdTime = newTime;\n            }\n            else {\n                startTime = animationDriver.now() - newTime / speed;\n            }\n        },\n        get duration() {\n            const duration = generator.calculatedDuration === null\n                ? calcGeneratorDuration(generator)\n                : generator.calculatedDuration;\n            return millisecondsToSeconds(duration);\n        },\n        get speed() {\n            return speed;\n        },\n        set speed(newSpeed) {\n            if (newSpeed === speed || !animationDriver)\n                return;\n            speed = newSpeed;\n            controls.time = millisecondsToSeconds(currentTime);\n        },\n        get state() {\n            return playState;\n        },\n        play,\n        pause: () => {\n            playState = \"paused\";\n            holdTime = currentTime;\n        },\n        stop: () => {\n            hasStopped = true;\n            if (playState === \"idle\")\n                return;\n            playState = \"idle\";\n            onStop && onStop();\n            cancel();\n        },\n        cancel: () => {\n            if (cancelTime !== null)\n                tick(cancelTime);\n            cancel();\n        },\n        complete: () => {\n            playState = \"finished\";\n        },\n        sample: (elapsed) => {\n            startTime = 0;\n            return tick(elapsed);\n        },\n    };\n    return controls;\n}\n\nexport { animateValue };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}