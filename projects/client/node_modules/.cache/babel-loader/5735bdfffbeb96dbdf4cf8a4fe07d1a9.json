{"ast":null,"code":"'use client';\n\nimport { baseStyle } from \"./chunk-V7PAE35Z.mjs\"; // src/avatar-group.tsx\n\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"; // ../../utilities/object-utils/src/compact.ts\n\nfunction compact(object) {\n  const clone = Object.assign({}, object);\n\n  for (let key in clone) {\n    if (clone[key] === void 0) delete clone[key];\n  }\n\n  return clone;\n} // src/avatar-group.tsx\n\n\nimport { cloneElement } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar AvatarGroup = forwardRef(function AvatarGroup2(props, ref) {\n  const styles = useMultiStyleConfig(\"Avatar\", props);\n  const {\n    children,\n    borderColor,\n    max,\n    spacing = \"-0.75rem\",\n    borderRadius = \"full\",\n    ...rest\n  } = omitThemingProps(props);\n  const validChildren = getValidChildren(children);\n  const childrenWithinMax = max != null ? validChildren.slice(0, max) : validChildren;\n  const excess = max != null ? validChildren.length - max : 0;\n  const reversedChildren = childrenWithinMax.reverse();\n  const clones = reversedChildren.map((child, index) => {\n    var _a;\n\n    const isFirstAvatar = index === 0;\n    const childProps = {\n      marginEnd: isFirstAvatar ? 0 : spacing,\n      size: props.size,\n      borderColor: (_a = child.props.borderColor) != null ? _a : borderColor,\n      showBorder: true\n    };\n    return cloneElement(child, compact(childProps));\n  });\n  const groupStyles = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    flexDirection: \"row-reverse\",\n    ...styles.group\n  };\n  const excessStyles = {\n    borderRadius,\n    marginStart: spacing,\n    ...baseStyle,\n    ...styles.excessLabel\n  };\n  return /* @__PURE__ */jsxs(chakra.div, {\n    ref,\n    role: \"group\",\n    __css: groupStyles,\n    ...rest,\n    className: cx(\"chakra-avatar__group\", props.className),\n    children: [excess > 0 && /* @__PURE__ */jsx(chakra.span, {\n      className: \"chakra-avatar__excess\",\n      __css: excessStyles,\n      children: `+${excess}`\n    }), clones]\n  });\n});\nAvatarGroup.displayName = \"AvatarGroup\";\nexport { AvatarGroup };","map":{"version":3,"mappings":";;;;AAAA,SACEA,MADF,EAEEC,UAFF,EAGEC,gBAHF,EAOEC,mBAPF,QASO,mBATP;AAUA,SAASC,EAAT,QAAmB,yBAAnB;AACA,SAASC,gBAAT,QAAiC,iCAAjC,C;;ACXO,SAASC,OAAT,CAA6CC,MAA7C,EAAwD;EAC7D,MAAMC,QAAQC,OAAOC,MAAP,CAAc,EAAd,EAAkBH,MAAlB,CAAd;;EACA,SAASI,GAAT,IAAgBH,KAAhB,EAAuB;IACrB,IAAIA,MAAMG,GAAN,MAAe,MAAnB,EAA8B,OAAOH,MAAMG,GAAN,CAAP;EAChC;;EACA,OAAOH,KAAP;AACF,C;;;ADQA,SAASI,YAAT,QAA6B,OAA7B;AA0FM,SAQIC,GARJ;AA7DC,IAAMC,cAAcb,WACzB,SAASa,YAAT,CAAqBC,KAArB,EAA4BC,GAA5B,EAAiC;EAC/B,MAAMC,SAASd,oBAAoB,QAApB,EAA8BY,KAA9B,CAAf;EAEA,MAAM;IACJG,QADI;IAEJC,WAFI;IAGJC,GAHI;IAIJC,UAAU,UAJN;IAKJC,eAAe,MALX;IAMJ,GAAGC;EANC,IAOFrB,iBAAiBa,KAAjB,CAPJ;EASA,MAAMS,gBAAgBnB,iBAAiBa,QAAjB,CAAtB;EAKA,MAAMO,oBACJL,OAAO,IAAP,GAAcI,cAAcE,KAAd,CAAoB,CAApB,EAAuBN,GAAvB,CAAd,GAA4CI,aAD9C;EAMA,MAAMG,SAASP,OAAO,IAAP,GAAcI,cAAcI,MAAd,GAAuBR,GAArC,GAA2C,CAA1D;EAMA,MAAMS,mBAAmBJ,kBAAkBK,OAAlB,EAAzB;EAEA,MAAMC,SAASF,iBAAiBG,GAAjB,CAAqB,CAACC,KAAD,EAAQC,KAAR,KAAkB;IA3E1D;;IA4EM,MAAMC,gBAAgBD,UAAU,CAAhC;IAEA,MAAME,aAAa;MACjBC,WAAWF,gBAAgB,CAAhB,GAAoBd,OADd;MAEjBiB,MAAMvB,MAAMuB,IAFK;MAGjBnB,cAAaoB,WAAMxB,KAAN,CAAYI,WAAzB,KAAa,IAAb,GAAaoB,EAAb,GAAwCpB,WAHvB;MAIjBqB,YAAY;IAJK,CAAnB;IAOA,OAAO5B,aAAaqB,KAAb,EAAoB3B,QAAQ8B,UAAR,CAApB,CAAP;EACD,CAXc,CAAf;EAaA,MAAMK,cAAiC;IACrCC,SAAS,MAD4B;IAErCC,YAAY,QAFyB;IAGrCC,gBAAgB,UAHqB;IAIrCC,eAAe,aAJsB;IAKrC,GAAG5B,OAAO6B;EAL2B,CAAvC;EAQA,MAAMC,eAAkC;IACtCzB,YADsC;IAEtC0B,aAAa3B,OAFyB;IAGtC,GAAG4B,SAHmC;IAItC,GAAGhC,OAAOiC;EAJ4B,CAAxC;EAOA,OACE,oBAAClD,OAAOmD,GAAR,EAAC;IACCnC,GADD;IAECoC,MAAK,OAFN;IAGCC,OAAOZ,WAHR;IAIE,GAAGlB,IAJL;IAKC+B,WAAWlD,GAAG,sBAAH,EAA2BW,MAAMuC,SAAjC,CALZ;IAOEpC,oBAAS,CAAT,IACC,mBAAClB,OAAOuD,IAAR,EAAC;MAAYD,WAAU,uBAAtB;MAA8CD,OAAON,YAArD;MACE7B,cAAIS;IADN,CAAD,CADD,EAKAI,MALA;EAPF,CAAD,CADF;AAgBF,CA5EyB,CAApB;AA+EPjB,YAAY0C,WAAZ,GAA0B,aAA1B","names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","getValidChildren","compact","object","clone","Object","assign","key","cloneElement","jsx","AvatarGroup","props","ref","styles","children","borderColor","max","spacing","borderRadius","rest","validChildren","childrenWithinMax","slice","excess","length","reversedChildren","reverse","clones","map","child","index","isFirstAvatar","childProps","marginEnd","size","_a","showBorder","groupStyles","display","alignItems","justifyContent","flexDirection","group","excessStyles","marginStart","baseStyle","excessLabel","div","role","__css","className","span","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\avatar\\src\\avatar-group.tsx","C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\utilities\\object-utils\\src\\compact.ts"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { baseStyle } from \"./avatar\"\nimport { cloneElement } from \"react\"\n\ninterface AvatarGroupOptions {\n  /**\n   * The children of the avatar group.\n   *\n   * Ideally should be `Avatar` and `MoreIndicator` components\n   */\n  children: React.ReactNode\n  /**\n   * The space between the avatars in the group.\n   * @default \"-0.75rem\"\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The maximum number of visible avatars\n   */\n  max?: number\n}\n\nexport interface AvatarGroupProps\n  extends AvatarGroupOptions,\n    Omit<HTMLChakraProps<\"div\">, \"children\">,\n    ThemingProps<\"Avatar\"> {}\n\n/**\n * AvatarGroup displays a number of avatars grouped together in a stack.\n */\nexport const AvatarGroup = forwardRef<AvatarGroupProps, \"div\">(\n  function AvatarGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Avatar\", props)\n\n    const {\n      children,\n      borderColor,\n      max,\n      spacing = \"-0.75rem\",\n      borderRadius = \"full\",\n      ...rest\n    } = omitThemingProps(props)\n\n    const validChildren = getValidChildren(children)\n\n    /**\n     * get the avatars within the max\n     */\n    const childrenWithinMax =\n      max != null ? validChildren.slice(0, max) : validChildren\n\n    /**\n     * get the remaining avatar count\n     */\n    const excess = max != null ? validChildren.length - max : 0\n\n    /**\n     * Reversing the children is a great way to avoid using zIndex\n     * to overlap the avatars\n     */\n    const reversedChildren = childrenWithinMax.reverse()\n\n    const clones = reversedChildren.map((child, index) => {\n      const isFirstAvatar = index === 0\n\n      const childProps = {\n        marginEnd: isFirstAvatar ? 0 : spacing,\n        size: props.size,\n        borderColor: child.props.borderColor ?? borderColor,\n        showBorder: true,\n      }\n\n      return cloneElement(child, compact(childProps))\n    })\n\n    const groupStyles: SystemStyleObject = {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"flex-end\",\n      flexDirection: \"row-reverse\",\n      ...styles.group,\n    }\n\n    const excessStyles: SystemStyleObject = {\n      borderRadius,\n      marginStart: spacing,\n      ...baseStyle,\n      ...styles.excessLabel,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        role=\"group\"\n        __css={groupStyles}\n        {...rest}\n        className={cx(\"chakra-avatar__group\", props.className)}\n      >\n        {excess > 0 && (\n          <chakra.span className=\"chakra-avatar__excess\" __css={excessStyles}>\n            {`+${excess}`}\n          </chakra.span>\n        )}\n        {clones}\n      </chakra.div>\n    )\n  },\n)\n\nAvatarGroup.displayName = \"AvatarGroup\"\n","export function compact<T extends Record<any, any>>(object: T) {\n  const clone = Object.assign({}, object)\n  for (let key in clone) {\n    if (clone[key] === undefined) delete clone[key]\n  }\n  return clone\n}\n"]},"metadata":{},"sourceType":"module"}