{"ast":null,"code":"'use client'; // src/css-var.ts\n\nfunction isDecimal(value) {\n  return !Number.isInteger(parseFloat(value.toString()));\n}\n\nfunction replaceWhiteSpace(value) {\n  let replaceValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"-\";\n  return value.replace(/\\s+/g, replaceValue);\n}\n\nfunction escape(value) {\n  const valueStr = replaceWhiteSpace(value.toString());\n  if (valueStr.includes(\"\\\\.\")) return value;\n  return isDecimal(value) ? valueStr.replace(\".\", `\\\\.`) : value;\n}\n\nfunction addPrefix(value) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return [prefix, escape(value)].filter(Boolean).join(\"-\");\n}\n\nfunction toVarRef(name, fallback) {\n  return `var(${escape(name)}${fallback ? `, ${fallback}` : \"\"})`;\n}\n\nfunction toVar(value) {\n  let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  return `--${addPrefix(value, prefix)}`;\n}\n\nfunction cssVar(name, options) {\n  const cssVariable = toVar(name, options == null ? void 0 : options.prefix);\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options == null ? void 0 : options.fallback))\n  };\n}\n\nfunction getFallback(fallback) {\n  if (typeof fallback === \"string\") return fallback;\n  return fallback == null ? void 0 : fallback.reference;\n}\n\nexport { isDecimal, addPrefix, toVarRef, toVar, cssVar };","map":{"version":3,"mappings":";;AAAO,SAASA,SAAT,CAAmBC,KAAnB,EAA+B;EACpC,OAAO,CAACC,OAAOC,SAAP,CAAiBC,WAAWH,MAAMI,QAAN,EAAX,CAAjB,CAAR;AACF;;AAEA,SAASC,iBAAT,CAA2BL,KAA3B,EAA8D;EAAA,IAApBM,YAAoB,uEAAL,GAAK;EAC5D,OAAON,MAAMO,OAAN,CAAc,MAAd,EAAsBD,YAAtB,CAAP;AACF;;AAEA,SAASE,MAAT,CAAgBR,KAAhB,EAAwC;EACtC,MAAMS,WAAWJ,kBAAkBL,MAAMI,QAAN,EAAlB,CAAjB;EACA,IAAIK,SAASC,QAAT,CAAkB,KAAlB,CAAJ,EAA8B,OAAOV,KAAP;EAC9B,OAAOD,UAAUC,KAAV,IAAmBS,SAASF,OAAT,CAAiB,GAAjB,EAAsB,KAAtB,CAAnB,GAAkDP,KAAzD;AACF;;AAEO,SAASW,SAAT,CAAmBX,KAAnB,EAA+C;EAAA,IAAbY,MAAa,uEAAJ,EAAI;EACpD,OAAO,CAACA,MAAD,EAASJ,OAAOR,KAAP,CAAT,EAAwBa,MAAxB,CAA+BC,OAA/B,EAAwCC,IAAxC,CAA6C,GAA7C,CAAP;AACF;;AAEO,SAASC,QAAT,CAAkBC,IAAlB,EAAgCC,QAAhC,EAAmD;EACxD,OAAO,OAAOV,OAAOS,IAAP,CAAW,GAAIC,WAAW,KAAKA,UAAhB,GAA6B,KAA1D;AACF;;AAEO,SAASC,KAAT,CAAenB,KAAf,EAA2C;EAAA,IAAbY,MAAa,uEAAJ,EAAI;EAChD,OAAO,KAAKD,UAAUX,KAAV,EAAiBY,MAAjB,CAAuB,EAAnC;AACF;;AAYO,SAASQ,MAAT,CAAgBH,IAAhB,EAA8BI,OAA9B,EAAuD;EAC5D,MAAMC,cAAcH,MAAMF,IAAN,EAAYI,mCAAST,MAArB,CAApB;EACA,OAAO;IACLW,UAAUD,WADL;IAELE,WAAWR,SAASM,WAAT,EAAsBG,YAAYJ,mCAASH,QAArB,CAAtB;EAFN,CAAP;AAIF;;AAEA,SAASO,WAAT,CAAqBP,QAArB,EAAiD;EAC/C,IAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC,OAAOA,QAAP;EAClC,OAAOA,qCAAUM,SAAjB;AACF","names":["isDecimal","value","Number","isInteger","parseFloat","toString","replaceWhiteSpace","replaceValue","replace","escape","valueStr","includes","addPrefix","prefix","filter","Boolean","join","toVarRef","name","fallback","toVar","cssVar","options","cssVariable","variable","reference","getFallback"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\theme-tools\\src\\css-var.ts"],"sourcesContent":["export function isDecimal(value: any) {\n  return !Number.isInteger(parseFloat(value.toString()))\n}\n\nfunction replaceWhiteSpace(value: string, replaceValue = \"-\") {\n  return value.replace(/\\s+/g, replaceValue)\n}\n\nfunction escape(value: string | number) {\n  const valueStr = replaceWhiteSpace(value.toString())\n  if (valueStr.includes(\"\\\\.\")) return value\n  return isDecimal(value) ? valueStr.replace(\".\", `\\\\.`) : value\n}\n\nexport function addPrefix(value: string, prefix = \"\") {\n  return [prefix, escape(value)].filter(Boolean).join(\"-\")\n}\n\nexport function toVarRef(name: string, fallback?: string) {\n  return `var(${escape(name)}${fallback ? `, ${fallback}` : \"\"})`\n}\n\nexport function toVar(value: string, prefix = \"\") {\n  return `--${addPrefix(value, prefix)}`\n}\n\nexport type CSSVar = {\n  variable: string\n  reference: string\n}\n\nexport type CSSVarOptions = {\n  fallback?: string | CSSVar\n  prefix?: string\n}\n\nexport function cssVar(name: string, options?: CSSVarOptions) {\n  const cssVariable = toVar(name, options?.prefix)\n  return {\n    variable: cssVariable,\n    reference: toVarRef(cssVariable, getFallback(options?.fallback)),\n  }\n}\n\nfunction getFallback(fallback?: string | CSSVar) {\n  if (typeof fallback === \"string\") return fallback\n  return fallback?.reference\n}\n"]},"metadata":{},"sourceType":"module"}