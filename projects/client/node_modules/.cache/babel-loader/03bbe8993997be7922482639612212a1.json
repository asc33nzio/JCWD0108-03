{"ast":null,"code":"'use client'; // src/use-spinner.ts\n\nimport { useInterval } from \"@chakra-ui/react-use-interval\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nvar CONTINUOUS_CHANGE_INTERVAL = 50;\nvar CONTINUOUS_CHANGE_DELAY = 300;\n\nfunction useSpinner(increment, decrement) {\n  const [isSpinning, setIsSpinning] = useState(false);\n  const [action, setAction] = useState(null);\n  const [runOnce, setRunOnce] = useState(true);\n  const timeoutRef = useRef(null);\n\n  const removeTimeout = () => clearTimeout(timeoutRef.current);\n\n  useInterval(() => {\n    if (action === \"increment\") {\n      increment();\n    }\n\n    if (action === \"decrement\") {\n      decrement();\n    }\n  }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null);\n  const up = useCallback(() => {\n    if (runOnce) {\n      increment();\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"increment\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [increment, runOnce]);\n  const down = useCallback(() => {\n    if (runOnce) {\n      decrement();\n    }\n\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"decrement\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [decrement, runOnce]);\n  const stop = useCallback(() => {\n    setRunOnce(true);\n    setIsSpinning(false);\n    removeTimeout();\n  }, []);\n  useEffect(() => {\n    return () => removeTimeout();\n  }, []);\n  return {\n    up,\n    down,\n    stop,\n    isSpinning\n  };\n}\n\nexport { useSpinner };","map":{"version":3,"mappings":";;AAAA,SAASA,WAAT,QAA4B,+BAA5B;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;AAKA,IAAMC,6BAA6B,EAAnC;AAKA,IAAMC,0BAA0B,GAAhC;;AAWO,SAASC,UAAT,CAAoBC,SAApB,EAAyCC,SAAzC,EAA8D;EAInE,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BP,SAAS,KAAT,CAApC;EAGA,MAAM,CAACQ,MAAD,EAASC,SAAT,IAAsBT,SAAwB,IAAxB,CAA5B;EAGA,MAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,SAAS,IAAT,CAA9B;EAGA,MAAMY,aAAab,OAAY,IAAZ,CAAnB;;EAGA,MAAMc,gBAAgB,MAAMC,aAAaF,WAAWG,OAAxB,CAA5B;;EAMAnB,YACE,MAAM;IACJ,IAAIY,WAAW,WAAf,EAA4B;MAC1BJ;IACF;;IACA,IAAII,WAAW,WAAf,EAA4B;MAC1BH;IACF;EACF,CARF,EASEC,aAAaL,0BAAb,GAA0C,IAT5C;EAaA,MAAMe,KAAKnB,YAAY,MAAM;IAE3B,IAAIa,OAAJ,EAAa;MACXN;IACF;;IAGAQ,WAAWG,OAAX,GAAqBE,WAAW,MAAM;MACpCN,WAAW,KAAX;MACAJ,cAAc,IAAd;MACAE,UAAU,WAAV;IACF,CAJqB,EAIlBP,uBAJkB,CAArB;EAKF,CAZW,EAYR,CAACE,SAAD,EAAYM,OAAZ,CAZQ,CAAX;EAeA,MAAMQ,OAAOrB,YAAY,MAAM;IAE7B,IAAIa,OAAJ,EAAa;MACXL;IACF;;IAGAO,WAAWG,OAAX,GAAqBE,WAAW,MAAM;MACpCN,WAAW,KAAX;MACAJ,cAAc,IAAd;MACAE,UAAU,WAAV;IACF,CAJqB,EAIlBP,uBAJkB,CAArB;EAKF,CAZa,EAYV,CAACG,SAAD,EAAYK,OAAZ,CAZU,CAAb;EAeA,MAAMS,OAAOtB,YAAY,MAAM;IAC7Bc,WAAW,IAAX;IACAJ,cAAc,KAAd;IACAM;EACF,CAJa,EAIV,EAJU,CAAb;EAUAf,UAAU,MAAM;IACd,OAAO,MAAMe,eAAb;EACF,CAFA,EAEG,EAFH;EAIA,OAAO;IAAEG,EAAF;IAAME,IAAN;IAAYC,IAAZ;IAAkBb;EAAlB,CAAP;AACF","names":["useInterval","useCallback","useEffect","useRef","useState","CONTINUOUS_CHANGE_INTERVAL","CONTINUOUS_CHANGE_DELAY","useSpinner","increment","decrement","isSpinning","setIsSpinning","action","setAction","runOnce","setRunOnce","timeoutRef","removeTimeout","clearTimeout","current","up","setTimeout","down","stop"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\number-input\\src\\use-spinner.ts"],"sourcesContent":["import { useInterval } from \"@chakra-ui/react-use-interval\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\nconst CONTINUOUS_CHANGE_INTERVAL = 50\n\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\nconst CONTINUOUS_CHANGE_DELAY = 300\n\ntype Action = \"increment\" | \"decrement\"\n\n/**\n * React hook used in the number input to spin its\n * value on long press of the spin buttons\n *\n * @param increment the function to increment\n * @param decrement the function to decrement\n */\nexport function useSpinner(increment: Function, decrement: Function) {\n  /**\n   * To keep incrementing/decrementing on press, we call that `spinning`\n   */\n  const [isSpinning, setIsSpinning] = useState(false)\n\n  // This state keeps track of the action (\"increment\" or \"decrement\")\n  const [action, setAction] = useState<Action | null>(null)\n\n  // To increment the value the first time you mousedown, we call that `runOnce`\n  const [runOnce, setRunOnce] = useState(true)\n\n  // Store the timeout instance id in a ref, so we can clear the timeout later\n  const timeoutRef = useRef<any>(null)\n\n  // Clears the timeout from memory\n  const removeTimeout = () => clearTimeout(timeoutRef.current)\n\n  /**\n   * useInterval hook provides a performant way to\n   * update the state value at specific interval\n   */\n  useInterval(\n    () => {\n      if (action === \"increment\") {\n        increment()\n      }\n      if (action === \"decrement\") {\n        decrement()\n      }\n    },\n    isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null,\n  )\n\n  // Function to activate the spinning and increment the value\n  const up = useCallback(() => {\n    // increment the first time\n    if (runOnce) {\n      increment()\n    }\n\n    // after a delay, keep incrementing at interval (\"spinning up\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"increment\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [increment, runOnce])\n\n  // Function to activate the spinning and increment the value\n  const down = useCallback(() => {\n    // decrement the first time\n    if (runOnce) {\n      decrement()\n    }\n\n    // after a delay, keep decrementing at interval (\"spinning down\")\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false)\n      setIsSpinning(true)\n      setAction(\"decrement\")\n    }, CONTINUOUS_CHANGE_DELAY)\n  }, [decrement, runOnce])\n\n  // Function to stop spinning (useful for mouseup, keyup handlers)\n  const stop = useCallback(() => {\n    setRunOnce(true)\n    setIsSpinning(false)\n    removeTimeout()\n  }, [])\n\n  /**\n   * If the component unmounts while spinning,\n   * let's clear the timeout as well\n   */\n  useEffect(() => {\n    return () => removeTimeout()\n  }, [])\n\n  return { up, down, stop, isSpinning }\n}\n"]},"metadata":{},"sourceType":"module"}