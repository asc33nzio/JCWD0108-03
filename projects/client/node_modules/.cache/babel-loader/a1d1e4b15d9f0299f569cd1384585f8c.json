{"ast":null,"code":"'use client';\n\nimport { useInputGroupStyles } from \"./chunk-FKYN3ZGE.mjs\"; // src/input-element.tsx\n\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar StyledInputElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2\n  }\n});\nvar InputElement = forwardRef(function InputElement2(props, ref) {\n  var _a, _b;\n\n  const {\n    placement = \"left\",\n    ...rest\n  } = props;\n  const styles = useInputGroupStyles();\n  const input = styles.field;\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\";\n  const elementStyles = {\n    [attr]: \"0\",\n    width: (_a = input == null ? void 0 : input.height) != null ? _a : input == null ? void 0 : input.h,\n    height: (_b = input == null ? void 0 : input.height) != null ? _b : input == null ? void 0 : input.h,\n    fontSize: input == null ? void 0 : input.fontSize,\n    ...styles.element\n  };\n  return /* @__PURE__ */jsx(StyledInputElement, {\n    ref,\n    __css: elementStyles,\n    ...rest\n  });\n});\nInputElement.id = \"InputElement\";\nInputElement.displayName = \"InputElement\";\nvar InputLeftElement = forwardRef(function InputLeftElement2(props, ref) {\n  const {\n    className,\n    ...rest\n  } = props;\n\n  const _className = cx(\"chakra-input__left-element\", className);\n\n  return /* @__PURE__ */jsx(InputElement, {\n    ref,\n    placement: \"left\",\n    className: _className,\n    ...rest\n  });\n});\nInputLeftElement.id = \"InputLeftElement\";\nInputLeftElement.displayName = \"InputLeftElement\";\nvar InputRightElement = forwardRef(function InputRightElement2(props, ref) {\n  const {\n    className,\n    ...rest\n  } = props;\n\n  const _className = cx(\"chakra-input__right-element\", className);\n\n  return /* @__PURE__ */jsx(InputElement, {\n    ref,\n    placement: \"right\",\n    className: _className,\n    ...rest\n  });\n});\nInputRightElement.id = \"InputRightElement\";\nInputRightElement.displayName = \"InputRightElement\";\nexport { InputLeftElement, InputRightElement };","map":{"version":3,"mappings":";;;;AAAA,SACEA,MADF,EAEEC,UAFF,QAKO,mBALP;AAMA,SAASC,EAAT,QAAmB,yBAAnB;AAqCS;AA9BT,IAAMC,qBAAqBH,OAAO,KAAP,EAAc;EACvCI,WAAW;IACTC,SAAS,MADA;IAETC,YAAY,QAFH;IAGTC,gBAAgB,QAHP;IAITC,UAAU,UAJD;IAKTC,KAAK,GALI;IAMTC,QAAQ;EANC;AAD4B,CAAd,CAA3B;AAWA,IAAMC,eAAeV,WAAqC,SAASU,aAAT,CACxDC,KADwD,EAExDC,GAFwD,EAGxD;EA3BF;;EA4BE,MAAM;IAAEC,YAAY,MAAd;IAAsB,GAAGC;EAAzB,IAAkCH,KAAxC;EAEA,MAAMI,SAASC,qBAAf;EACA,MAAMC,QAAaF,OAAOG,KAA1B;EAEA,MAAMC,OAAON,cAAc,MAAd,GAAuB,YAAvB,GAAsC,UAAnD;EAEA,MAAMO,gBAAmC;IACvC,CAACD,IAAD,GAAQ,GAD+B;IAEvCE,QAAOC,oCAAOC,MAAd,KAAO,IAAP,GAAOD,EAAP,GAAwBL,+BAAOO,CAFQ;IAGvCD,SAAQE,oCAAOF,MAAf,KAAQ,IAAR,GAAQE,EAAR,GAAyBR,+BAAOO,CAHO;IAIvCE,UAAUT,+BAAOS,QAJsB;IAKvC,GAAGX,OAAOY;EAL6B,CAAzC;EAQA,OAAO,mBAACzB,kBAAD,EAAC;IAAmBU,GAAnB;IAA6BgB,OAAOR,aAApC;IAAoD,GAAGN;EAAvD,CAAD,CAAP;AACD,CApBoB,CAArB;AAuBAJ,aAAamB,EAAb,GAAkB,cAAlB;AAEAnB,aAAaoB,WAAb,GAA2B,cAA3B;AAIO,IAAMC,mBAAmB/B,WAC9B,SAAS+B,iBAAT,CAA0BpB,KAA1B,EAAiCC,GAAjC,EAAsC;EACpC,MAAM;IAAEoB,SAAF;IAAa,GAAGlB;EAAhB,IAAyBH,KAA/B;;EACA,MAAMsB,aAAahC,GAAG,4BAAH,EAAiC+B,SAAjC,CAAnB;;EAEA,OACE,mBAACtB,YAAD,EAAC;IACCE,GADD;IAECC,WAAU,MAFX;IAGCmB,WAAWC,UAHZ;IAIE,GAAGnB;EAJL,CAAD,CADF;AAQF,CAb8B,CAAzB;AAiBPiB,iBAAiBF,EAAjB,GAAsB,kBAAtB;AAEAE,iBAAiBD,WAAjB,GAA+B,kBAA/B;AAIO,IAAMI,oBAAoBlC,WAC/B,SAASkC,kBAAT,CAA2BvB,KAA3B,EAAkCC,GAAlC,EAAuC;EACrC,MAAM;IAAEoB,SAAF;IAAa,GAAGlB;EAAhB,IAAyBH,KAA/B;;EACA,MAAMsB,aAAahC,GAAG,6BAAH,EAAkC+B,SAAlC,CAAnB;;EAEA,OACE,mBAACtB,YAAD,EAAC;IACCE,GADD;IAECC,WAAU,OAFX;IAGCmB,WAAWC,UAHZ;IAIE,GAAGnB;EAJL,CAAD,CADF;AAQF,CAb+B,CAA1B;AAiBPoB,kBAAkBL,EAAlB,GAAuB,mBAAvB;AAEAK,kBAAkBJ,WAAlB,GAAgC,mBAAhC","names":["chakra","forwardRef","cx","StyledInputElement","baseStyle","display","alignItems","justifyContent","position","top","zIndex","InputElement","props","ref","placement","rest","styles","useInputGroupStyles","input","field","attr","elementStyles","width","_a","height","h","_b","fontSize","element","__css","id","displayName","InputLeftElement","className","_className","InputRightElement"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\input\\src\\input-element.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  SystemStyleObject,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useInputGroupStyles } from \"./input-group\"\n\nexport interface InputElementProps extends HTMLChakraProps<\"div\"> {\n  placement?: \"left\" | \"right\"\n}\n\nconst StyledInputElement = chakra(\"div\", {\n  baseStyle: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    position: \"absolute\",\n    top: \"0\",\n    zIndex: 2,\n  },\n})\n\nconst InputElement = forwardRef<InputElementProps, \"div\">(function InputElement(\n  props,\n  ref,\n) {\n  const { placement = \"left\", ...rest } = props\n\n  const styles = useInputGroupStyles()\n  const input: any = styles.field\n\n  const attr = placement === \"left\" ? \"insetStart\" : \"insetEnd\"\n\n  const elementStyles: SystemStyleObject = {\n    [attr]: \"0\",\n    width: input?.height ?? input?.h,\n    height: input?.height ?? input?.h,\n    fontSize: input?.fontSize,\n    ...styles.element,\n  }\n\n  return <StyledInputElement ref={ref} __css={elementStyles} {...rest} />\n})\n\n// This is used in `input-group.tsx`\nInputElement.id = \"InputElement\"\n\nInputElement.displayName = \"InputElement\"\n\nexport type InputLeftElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputLeftElement = forwardRef<InputLeftElementProps, \"div\">(\n  function InputLeftElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__left-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"left\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputLeftElement.id = \"InputLeftElement\"\n\nInputLeftElement.displayName = \"InputLeftElement\"\n\nexport type InputRightElementProps = Omit<InputElementProps, \"placement\">\n\nexport const InputRightElement = forwardRef<InputRightElementProps, \"div\">(\n  function InputRightElement(props, ref) {\n    const { className, ...rest } = props\n    const _className = cx(\"chakra-input__right-element\", className)\n\n    return (\n      <InputElement\n        ref={ref}\n        placement=\"right\"\n        className={_className}\n        {...rest}\n      />\n    )\n  },\n)\n\n// This is used in `input-group.tsx`\nInputRightElement.id = \"InputRightElement\"\n\nInputRightElement.displayName = \"InputRightElement\"\n"]},"metadata":{},"sourceType":"module"}