{"ast":null,"code":"// src/refs.ts\nimport { isFunction } from \"@chakra-ui/utils\";\n\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (isFunction(ref)) {\n    ref(value);\n    return;\n  }\n\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\n\nfunction mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return node => {\n    refs.forEach(ref => assignRef(ref, node));\n  };\n}\n\nexport { assignRef, mergeRefs };","map":{"version":3,"names":["isFunction","assignRef","ref","value","current","error","Error","mergeRefs","refs","node","forEach"],"sources":["C:/Purwadhika/JCWD Bandung/4. REAL PROJECT/JCWD0108-03/node_modules/@chakra-ui/react-utils/dist/chunk-A3EAUGIL.mjs"],"sourcesContent":["// src/refs.ts\nimport { isFunction } from \"@chakra-ui/utils\";\nfunction assignRef(ref, value) {\n  if (ref == null)\n    return;\n  if (isFunction(ref)) {\n    ref(value);\n    return;\n  }\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\nfunction mergeRefs(...refs) {\n  return (node) => {\n    refs.forEach((ref) => assignRef(ref, node));\n  };\n}\n\nexport {\n  assignRef,\n  mergeRefs\n};\n"],"mappings":"AAAA;AACA,SAASA,UAAT,QAA2B,kBAA3B;;AACA,SAASC,SAAT,CAAmBC,GAAnB,EAAwBC,KAAxB,EAA+B;EAC7B,IAAID,GAAG,IAAI,IAAX,EACE;;EACF,IAAIF,UAAU,CAACE,GAAD,CAAd,EAAqB;IACnBA,GAAG,CAACC,KAAD,CAAH;IACA;EACD;;EACD,IAAI;IACFD,GAAG,CAACE,OAAJ,GAAcD,KAAd;EACD,CAFD,CAEE,OAAOE,KAAP,EAAc;IACd,MAAM,IAAIC,KAAJ,CAAW,wBAAuBH,KAAM,aAAYD,GAAI,GAAxD,CAAN;EACD;AACF;;AACD,SAASK,SAAT,GAA4B;EAAA,kCAANC,IAAM;IAANA,IAAM;EAAA;;EAC1B,OAAQC,IAAD,IAAU;IACfD,IAAI,CAACE,OAAL,CAAcR,GAAD,IAASD,SAAS,CAACC,GAAD,EAAMO,IAAN,CAA/B;EACD,CAFD;AAGD;;AAED,SACER,SADF,EAEEM,SAFF"},"metadata":{},"sourceType":"module"}