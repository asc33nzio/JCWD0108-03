{"ast":null,"code":"'use client';\n\nvar __defProp = Object.defineProperty;\n\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, {\n  enumerable: true,\n  configurable: true,\n  writable: true,\n  value\n}) : obj[key] = value;\n\nvar __publicField = (obj, key, value) => {\n  __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\n\n  return value;\n}; // src/pan-event.ts\n\n\nimport { addPointerEvent, getEventPoint, isMultiTouchEvent } from \"@chakra-ui/event-utils\";\nimport sync, { cancelSync, getFrameData } from \"framesync\";\nvar PanEvent = class {\n  constructor(event, handlers, threshold) {\n    /**\n     * We use this to keep track of the `x` and `y` pan session history\n     * as the pan event happens. It helps to calculate the `offset` and `delta`\n     */\n    __publicField(this, \"history\", []); // The pointer event that started the pan session\n\n\n    __publicField(this, \"startEvent\", null); // The current pointer event for the pan session\n\n\n    __publicField(this, \"lastEvent\", null); // The current pointer event info for the pan session\n\n\n    __publicField(this, \"lastEventInfo\", null);\n\n    __publicField(this, \"handlers\", {});\n\n    __publicField(this, \"removeListeners\", () => {});\n    /**\n     * Minimal pan distance required before recognizing the pan.\n     * @default \"3px\"\n     */\n\n\n    __publicField(this, \"threshold\", 3);\n\n    __publicField(this, \"win\");\n\n    __publicField(this, \"updatePoint\", () => {\n      if (!(this.lastEvent && this.lastEventInfo)) return;\n      const info = getPanInfo(this.lastEventInfo, this.history);\n      const isPanStarted = this.startEvent !== null;\n      const isDistancePastThreshold = distance(info.offset, {\n        x: 0,\n        y: 0\n      }) >= this.threshold;\n      if (!isPanStarted && !isDistancePastThreshold) return;\n      const {\n        timestamp\n      } = getFrameData();\n      this.history.push({ ...info.point,\n        timestamp\n      });\n      const {\n        onStart,\n        onMove\n      } = this.handlers;\n\n      if (!isPanStarted) {\n        onStart == null ? void 0 : onStart(this.lastEvent, info);\n        this.startEvent = this.lastEvent;\n      }\n\n      onMove == null ? void 0 : onMove(this.lastEvent, info);\n    });\n\n    __publicField(this, \"onPointerMove\", (event, info) => {\n      this.lastEvent = event;\n      this.lastEventInfo = info;\n      sync.update(this.updatePoint, true);\n    });\n\n    __publicField(this, \"onPointerUp\", (event, info) => {\n      const panInfo = getPanInfo(info, this.history);\n      const {\n        onEnd,\n        onSessionEnd\n      } = this.handlers;\n      onSessionEnd == null ? void 0 : onSessionEnd(event, panInfo);\n      this.end();\n      if (!onEnd || !this.startEvent) return;\n      onEnd == null ? void 0 : onEnd(event, panInfo);\n    });\n\n    var _a;\n\n    this.win = (_a = event.view) != null ? _a : window;\n    if (isMultiTouchEvent(event)) return;\n    this.handlers = handlers;\n\n    if (threshold) {\n      this.threshold = threshold;\n    }\n\n    event.stopPropagation();\n    event.preventDefault();\n    const info = {\n      point: getEventPoint(event)\n    };\n    const {\n      timestamp\n    } = getFrameData();\n    this.history = [{ ...info.point,\n      timestamp\n    }];\n    const {\n      onSessionStart\n    } = handlers;\n    onSessionStart == null ? void 0 : onSessionStart(event, getPanInfo(info, this.history));\n    this.removeListeners = pipe(addPointerEvent(this.win, \"pointermove\", this.onPointerMove), addPointerEvent(this.win, \"pointerup\", this.onPointerUp), addPointerEvent(this.win, \"pointercancel\", this.onPointerUp));\n  }\n\n  updateHandlers(handlers) {\n    this.handlers = handlers;\n  }\n\n  end() {\n    var _a;\n\n    (_a = this.removeListeners) == null ? void 0 : _a.call(this);\n    cancelSync.update(this.updatePoint);\n  }\n\n};\n\nfunction subtract(a, b) {\n  return {\n    x: a.x - b.x,\n    y: a.y - b.y\n  };\n}\n\nfunction getPanInfo(info, history) {\n  return {\n    point: info.point,\n    delta: subtract(info.point, history[history.length - 1]),\n    offset: subtract(info.point, history[0]),\n    velocity: getVelocity(history, 0.1)\n  };\n}\n\nvar toMilliseconds = v => v * 1e3;\n\nfunction getVelocity(history, timeDelta) {\n  if (history.length < 2) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  let i = history.length - 1;\n  let timestampedPoint = null;\n  const lastPoint = history[history.length - 1];\n\n  while (i >= 0) {\n    timestampedPoint = history[i];\n\n    if (lastPoint.timestamp - timestampedPoint.timestamp > toMilliseconds(timeDelta)) {\n      break;\n    }\n\n    i--;\n  }\n\n  if (!timestampedPoint) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1e3;\n\n  if (time === 0) {\n    return {\n      x: 0,\n      y: 0\n    };\n  }\n\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time\n  };\n\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0;\n  }\n\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0;\n  }\n\n  return currentVelocity;\n}\n\nfunction pipe() {\n  for (var _len = arguments.length, fns = new Array(_len), _key = 0; _key < _len; _key++) {\n    fns[_key] = arguments[_key];\n  }\n\n  return v => fns.reduce((a, b) => b(a), v);\n}\n\nfunction distance1D(a, b) {\n  return Math.abs(a - b);\n}\n\nfunction isPoint(point) {\n  return \"x\" in point && \"y\" in point;\n}\n\nfunction distance(a, b) {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return distance1D(a, b);\n  }\n\n  if (isPoint(a) && isPoint(b)) {\n    const xDelta = distance1D(a.x, b.x);\n    const yDelta = distance1D(a.y, b.y);\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2);\n  }\n\n  return 0;\n}\n\nexport { PanEvent, distance };","map":{"version":3,"mappings":"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","names":["addPointerEvent","getEventPoint","isMultiTouchEvent","sync","cancelSync","getFrameData","PanEvent","constructor","event","handlers","threshold","__publicField","lastEvent","lastEventInfo","info","getPanInfo","history","isPanStarted","startEvent","isDistancePastThreshold","distance","offset","x","y","timestamp","push","point","onStart","onMove","update","updatePoint","panInfo","onEnd","onSessionEnd","end","win","_a","view","window","stopPropagation","preventDefault","onSessionStart","removeListeners","pipe","onPointerMove","onPointerUp","updateHandlers","subtract","a","b","delta","length","velocity","getVelocity","toMilliseconds","v","timeDelta","i","timestampedPoint","lastPoint","time","currentVelocity","Infinity","fns","reduce","distance1D","Math","abs","isPoint","xDelta","yDelta","sqrt"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\react-use-pan-event\\src\\pan-event.ts"],"sourcesContent":["import {\n  addPointerEvent,\n  getEventPoint,\n  isMultiTouchEvent,\n} from \"@chakra-ui/event-utils\"\nimport sync, { cancelSync, getFrameData } from \"framesync\"\nimport {\n  AnyPointerEvent,\n  PanEventHandlers,\n  PanEventHistory,\n  Point,\n  PointerEventInfo,\n  TimestampedPoint,\n} from \"./types\"\n\n/**\n * A Pan Session is recognized when the pointer is down\n * and moved in the allowed direction.\n */\nexport class PanEvent {\n  /**\n   * We use this to keep track of the `x` and `y` pan session history\n   * as the pan event happens. It helps to calculate the `offset` and `delta`\n   */\n  private history: PanEventHistory = []\n\n  // The pointer event that started the pan session\n  private startEvent: AnyPointerEvent | null = null\n\n  // The current pointer event for the pan session\n  private lastEvent: AnyPointerEvent | null = null\n\n  // The current pointer event info for the pan session\n  private lastEventInfo: PointerEventInfo | null = null\n\n  private handlers: Partial<PanEventHandlers> = {}\n\n  private removeListeners: Function = () => {}\n\n  /**\n   * Minimal pan distance required before recognizing the pan.\n   * @default \"3px\"\n   */\n  private threshold = 3\n\n  private win: typeof globalThis\n\n  constructor(\n    event: AnyPointerEvent,\n    handlers: Partial<PanEventHandlers>,\n    threshold?: number,\n  ) {\n    this.win = (event.view ?? window) as typeof globalThis.window\n\n    // If we have more than one touch, don't start detecting this gesture\n    if (isMultiTouchEvent(event)) return\n\n    this.handlers = handlers\n\n    if (threshold) {\n      this.threshold = threshold\n    }\n\n    // stop default browser behavior\n    event.stopPropagation()\n    event.preventDefault()\n\n    // get and save the `pointerdown` event info in history\n    // we'll use it to compute the `offset`\n    const info = { point: getEventPoint(event) }\n    const { timestamp } = getFrameData()\n    this.history = [{ ...info.point, timestamp }]\n\n    // notify pan session start\n    const { onSessionStart } = handlers\n    onSessionStart?.(event, getPanInfo(info, this.history))\n\n    // attach event listeners and return a single function to remove them all\n    this.removeListeners = pipe(\n      addPointerEvent(this.win, \"pointermove\", this.onPointerMove),\n      addPointerEvent(this.win, \"pointerup\", this.onPointerUp),\n      addPointerEvent(this.win, \"pointercancel\", this.onPointerUp),\n    )\n  }\n\n  private updatePoint = () => {\n    if (!(this.lastEvent && this.lastEventInfo)) return\n\n    const info = getPanInfo(this.lastEventInfo, this.history)\n\n    const isPanStarted = this.startEvent !== null\n\n    const isDistancePastThreshold =\n      distance(info.offset, { x: 0, y: 0 }) >= this.threshold\n\n    if (!isPanStarted && !isDistancePastThreshold) return\n\n    const { timestamp } = getFrameData()\n    this.history.push({ ...info.point, timestamp })\n\n    const { onStart, onMove } = this.handlers\n\n    if (!isPanStarted) {\n      onStart?.(this.lastEvent, info)\n      this.startEvent = this.lastEvent\n    }\n\n    onMove?.(this.lastEvent, info)\n  }\n\n  private onPointerMove = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    this.lastEvent = event\n    this.lastEventInfo = info\n\n    // Throttle mouse move event to once per frame\n    sync.update(this.updatePoint, true)\n  }\n\n  private onPointerUp = (event: AnyPointerEvent, info: PointerEventInfo) => {\n    // notify pan session ended\n    const panInfo = getPanInfo(info, this.history)\n    const { onEnd, onSessionEnd } = this.handlers\n\n    onSessionEnd?.(event, panInfo)\n    this.end()\n\n    // if panning never started, no need to call `onEnd`\n    // panning requires a pointermove of at least 3px\n    if (!onEnd || !this.startEvent) return\n\n    onEnd?.(event, panInfo)\n  }\n\n  updateHandlers(handlers: Partial<PanEventHandlers>) {\n    this.handlers = handlers\n  }\n\n  end() {\n    this.removeListeners?.()\n    cancelSync.update(this.updatePoint)\n  }\n}\n\n/* -----------------------------------------------------------------------------\n * Utilities\n * -----------------------------------------------------------------------------*/\n\nfunction subtract(a: Point, b: Point) {\n  return { x: a.x - b.x, y: a.y - b.y }\n}\n\nfunction getPanInfo(info: PointerEventInfo, history: PanEventHistory) {\n  return {\n    point: info.point,\n    delta: subtract(info.point, history[history.length - 1]),\n    offset: subtract(info.point, history[0]),\n    velocity: getVelocity(history, 0.1),\n  }\n}\n\nconst toMilliseconds = (v: number) => v * 1000\n\nfunction getVelocity(history: TimestampedPoint[], timeDelta: number): Point {\n  if (history.length < 2) {\n    return { x: 0, y: 0 }\n  }\n\n  let i = history.length - 1\n  let timestampedPoint: TimestampedPoint | null = null\n  const lastPoint = history[history.length - 1]\n  while (i >= 0) {\n    timestampedPoint = history[i]\n    if (\n      lastPoint.timestamp - timestampedPoint.timestamp >\n      toMilliseconds(timeDelta)\n    ) {\n      break\n    }\n    i--\n  }\n\n  if (!timestampedPoint) {\n    return { x: 0, y: 0 }\n  }\n\n  const time = (lastPoint.timestamp - timestampedPoint.timestamp) / 1000\n  if (time === 0) {\n    return { x: 0, y: 0 }\n  }\n\n  const currentVelocity = {\n    x: (lastPoint.x - timestampedPoint.x) / time,\n    y: (lastPoint.y - timestampedPoint.y) / time,\n  }\n\n  if (currentVelocity.x === Infinity) {\n    currentVelocity.x = 0\n  }\n  if (currentVelocity.y === Infinity) {\n    currentVelocity.y = 0\n  }\n\n  return currentVelocity\n}\n\nfunction pipe<R>(...fns: Array<(a: R) => R>) {\n  return (v: R) => fns.reduce((a, b) => b(a), v)\n}\n\nfunction distance1D(a: number, b: number) {\n  return Math.abs(a - b)\n}\n\nfunction isPoint(point: any): point is { x: number; y: number } {\n  return \"x\" in point && \"y\" in point\n}\n\nexport function distance<P extends Point | number>(a: P, b: P) {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return distance1D(a, b)\n  }\n\n  if (isPoint(a) && isPoint(b)) {\n    const xDelta = distance1D(a.x, b.x)\n    const yDelta = distance1D(a.y, b.y)\n    return Math.sqrt(xDelta ** 2 + yDelta ** 2)\n  }\n\n  return 0\n}\n"]},"metadata":{},"sourceType":"module"}