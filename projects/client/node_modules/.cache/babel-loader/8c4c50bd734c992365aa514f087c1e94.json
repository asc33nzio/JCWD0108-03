{"ast":null,"code":"'use client'; // src/use-attr-observer.ts\n\nimport { useEffect } from \"react\";\n\nfunction useAttributeObserver(ref, attributes, fn, enabled) {\n  useEffect(() => {\n    var _a;\n\n    if (!ref.current || !enabled) return;\n    const win = (_a = ref.current.ownerDocument.defaultView) != null ? _a : window;\n    const attrs = Array.isArray(attributes) ? attributes : [attributes];\n    const obs = new win.MutationObserver(changes => {\n      for (const change of changes) {\n        if (change.type === \"attributes\" && change.attributeName && attrs.includes(change.attributeName)) {\n          fn(change);\n        }\n      }\n    });\n    obs.observe(ref.current, {\n      attributes: true,\n      attributeFilter: attrs\n    });\n    return () => obs.disconnect();\n  });\n}\n\nexport { useAttributeObserver };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,QAA0B,OAA1B;;AAEO,SAASC,oBAAT,CACLC,GADK,EAELC,UAFK,EAGLC,EAHK,EAILC,OAJK,EAKL;EACAL,UAAU,MAAM;IARlB;;IASI,IAAI,CAACE,IAAII,OAAL,IAAgB,CAACD,OAArB,EAA8B;IAC9B,MAAME,OAAMC,SAAIF,OAAJ,CAAYG,aAAZ,CAA0BC,WAAhC,KAAM,IAAN,GAAMF,EAAN,GAA+CG,MAArD;IACA,MAAMC,QAAQC,MAAMC,OAAN,CAAcX,UAAd,IAA4BA,UAA5B,GAAyC,CAACA,UAAD,CAAvD;IACA,MAAMY,MAAM,IAAIR,IAAIS,gBAAR,CAA0BC,OAAD,IAAa;MAChD,WAAWC,MAAX,IAAqBD,OAArB,EAA8B;QAC5B,IACEC,OAAOC,IAAP,KAAgB,YAAhB,IACAD,OAAOE,aADP,IAEAR,MAAMS,QAAN,CAAeH,OAAOE,aAAtB,CAHF,EAIE;UACAhB,GAAGc,MAAH;QACF;MACF;IACD,CAVW,CAAZ;IAYAH,IAAIO,OAAJ,CAAYpB,IAAII,OAAhB,EAAyB;MAAEH,YAAY,IAAd;MAAoBoB,iBAAiBX;IAArC,CAAzB;IAEA,OAAO,MAAMG,IAAIS,UAAJ,EAAb;EACD,CAnBD;AAoBF","names":["useEffect","useAttributeObserver","ref","attributes","fn","enabled","current","win","_a","ownerDocument","defaultView","window","attrs","Array","isArray","obs","MutationObserver","changes","change","type","attributeName","includes","observe","attributeFilter","disconnect"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\number-input\\src\\use-attr-observer.ts"],"sourcesContent":["import { useEffect } from \"react\"\n\nexport function useAttributeObserver(\n  ref: React.RefObject<HTMLElement | null>,\n  attributes: string | string[],\n  fn: (v: MutationRecord) => void,\n  enabled: boolean,\n) {\n  useEffect(() => {\n    if (!ref.current || !enabled) return\n    const win = ref.current.ownerDocument.defaultView ?? window\n    const attrs = Array.isArray(attributes) ? attributes : [attributes]\n    const obs = new win.MutationObserver((changes) => {\n      for (const change of changes) {\n        if (\n          change.type === \"attributes\" &&\n          change.attributeName &&\n          attrs.includes(change.attributeName)\n        ) {\n          fn(change)\n        }\n      }\n    })\n\n    obs.observe(ref.current, { attributes: true, attributeFilter: attrs })\n\n    return () => obs.disconnect()\n  })\n}\n"]},"metadata":{},"sourceType":"module"}