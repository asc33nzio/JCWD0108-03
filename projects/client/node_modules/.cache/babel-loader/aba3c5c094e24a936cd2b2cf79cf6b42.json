{"ast":null,"code":"'use client'; // src/css-calc.ts\n\nimport { isObject } from \"@chakra-ui/shared-utils\";\n\nfunction toRef(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n\n  return String(operand);\n}\n\nvar toExpr = function (operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n\n  return operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\");\n};\n\nvar add = function () {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n\n  return `calc(${toExpr(\"+\", ...operands)})`;\n};\n\nvar subtract = function () {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n\n  return `calc(${toExpr(\"-\", ...operands)})`;\n};\n\nvar multiply = function () {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n\n  return `calc(${toExpr(\"*\", ...operands)})`;\n};\n\nvar divide = function () {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n\n  return `calc(${toExpr(\"/\", ...operands)})`;\n};\n\nvar negate = x => {\n  const value = toRef(x);\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`;\n  }\n\n  return multiply(value, -1);\n};\n\nvar calc = Object.assign(x => ({\n  add: function () {\n    for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      operands[_key6] = arguments[_key6];\n    }\n\n    return calc(add(x, ...operands));\n  },\n  subtract: function () {\n    for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      operands[_key7] = arguments[_key7];\n    }\n\n    return calc(subtract(x, ...operands));\n  },\n  multiply: function () {\n    for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      operands[_key8] = arguments[_key8];\n    }\n\n    return calc(multiply(x, ...operands));\n  },\n  divide: function () {\n    for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      operands[_key9] = arguments[_key9];\n    }\n\n    return calc(divide(x, ...operands));\n  },\n  negate: () => calc(negate(x)),\n  toString: () => x.toString()\n}), {\n  add,\n  subtract,\n  multiply,\n  divide,\n  negate\n});\nexport { calc };","map":{"version":3,"mappings":";;AAAA,SAASA,QAAT,QAAyB,yBAAzB;;AAQA,SAASC,KAAT,CAAeC,OAAf,EAAyC;EACvC,IAAIF,SAASE,OAAT,KAAqBA,QAAQC,SAAjC,EAA4C;IAC1C,OAAOD,QAAQC,SAAf;EACF;;EACA,OAAOC,OAAOF,OAAP,CAAP;AACF;;AAEA,IAAMG,SAAS,UAACC,QAAD;EAAA,kCAAwBC,QAAxB;IAAwBA,QAAxB;EAAA;;EAAA,OACbA,SAASC,GAAT,CAAaP,KAAb,EAAoBQ,IAApB,CAAyB,IAAIH,WAA7B,EAA0CI,OAA1C,CAAkD,OAAlD,EAA2D,EAA3D,CADa;AAAA,CAAf;;AAGA,IAAMC,MAAM;EAAA,mCAAIJ,QAAJ;IAAIA,QAAJ;EAAA;;EAAA,OAA2B,QAAQF,OAAO,GAAP,EAAY,GAAGE,QAAf,CAAuB,GAA1D;AAAA,CAAZ;;AAEA,IAAMK,WAAW;EAAA,mCAAIL,QAAJ;IAAIA,QAAJ;EAAA;;EAAA,OAA2B,QAAQF,OAAO,GAAP,EAAY,GAAGE,QAAf,CAAuB,GAA1D;AAAA,CAAjB;;AAEA,IAAMM,WAAW;EAAA,mCAAIN,QAAJ;IAAIA,QAAJ;EAAA;;EAAA,OAA2B,QAAQF,OAAO,GAAP,EAAY,GAAGE,QAAf,CAAuB,GAA1D;AAAA,CAAjB;;AAEA,IAAMO,SAAS;EAAA,mCAAIP,QAAJ;IAAIA,QAAJ;EAAA;;EAAA,OAA2B,QAAQF,OAAO,GAAP,EAAY,GAAGE,QAAf,CAAuB,GAA1D;AAAA,CAAf;;AAEA,IAAMQ,SAAUC,CAAD,IAAgB;EAC7B,MAAMC,QAAQhB,MAAMe,CAAN,CAAd;;EAEA,IAAIC,SAAS,IAAT,IAAiB,CAACC,OAAOC,KAAP,CAAaC,WAAWH,KAAX,CAAb,CAAtB,EAAuD;IACrD,OAAOb,OAAOa,KAAP,EAAcI,UAAd,CAAyB,GAAzB,IAAgCjB,OAAOa,KAAP,EAAcK,KAAd,CAAoB,CAApB,CAAhC,GAAyD,IAAIL,OAApE;EACF;;EAEA,OAAOJ,SAASI,KAAT,EAAgB,EAAhB,CAAP;AACF,CARA;;AAmBO,IAAMM,OAAOC,OAAOC,MAAP,CACjBT,CAAD,KAA4B;EAC1BL,KAAK;IAAA,mCAAIJ,QAAJ;MAAIA,QAAJ;IAAA;;IAAA,OAAiBgB,KAAKZ,IAAIK,CAAJ,EAAO,GAAGT,QAAV,CAAL,CAAjB;EAAA,CADqB;EAE1BK,UAAU;IAAA,mCAAIL,QAAJ;MAAIA,QAAJ;IAAA;;IAAA,OAAiBgB,KAAKX,SAASI,CAAT,EAAY,GAAGT,QAAf,CAAL,CAAjB;EAAA,CAFgB;EAG1BM,UAAU;IAAA,mCAAIN,QAAJ;MAAIA,QAAJ;IAAA;;IAAA,OAAiBgB,KAAKV,SAASG,CAAT,EAAY,GAAGT,QAAf,CAAL,CAAjB;EAAA,CAHgB;EAI1BO,QAAQ;IAAA,mCAAIP,QAAJ;MAAIA,QAAJ;IAAA;;IAAA,OAAiBgB,KAAKT,OAAOE,CAAP,EAAU,GAAGT,QAAb,CAAL,CAAjB;EAAA,CAJkB;EAK1BQ,QAAQ,MAAMQ,KAAKR,OAAOC,CAAP,CAAL,CALY;EAM1BU,UAAU,MAAMV,EAAEU,QAAF;AANU,CAA5B,CADkB,EASlB;EACEf,GADF;EAEEC,QAFF;EAGEC,QAHF;EAIEC,MAJF;EAKEC;AALF,CATkB,CAAb","names":["isObject","toRef","operand","reference","String","toExpr","operator","operands","map","join","replace","add","subtract","multiply","divide","negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","Object","assign","toString"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\theme-tools\\src\\css-calc.ts"],"sourcesContent":["import { isObject } from \"@chakra-ui/shared-utils\"\nimport { CSSVar } from \"./css-var\"\n\nexport type Operand = string | number | CSSVar\ntype Operands = Operand[]\n\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction toRef(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpr = (operator: Operator, ...operands: Operands) =>\n  operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Operands) => `calc(${toExpr(\"+\", ...operands)})`\n\nconst subtract = (...operands: Operands) => `calc(${toExpr(\"-\", ...operands)})`\n\nconst multiply = (...operands: Operands) => `calc(${toExpr(\"*\", ...operands)})`\n\nconst divide = (...operands: Operands) => `calc(${toExpr(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = toRef(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\nexport interface CalcChain {\n  add: (...operands: Operands) => CalcChain\n  subtract: (...operands: Operands) => CalcChain\n  multiply: (...operands: Operands) => CalcChain\n  divide: (...operands: Operands) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"]},"metadata":{},"sourceType":"module"}