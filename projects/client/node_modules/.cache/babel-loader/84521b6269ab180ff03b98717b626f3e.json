{"ast":null,"code":"'use client';\n\nimport { Modal } from \"./chunk-YEXLRKHC.mjs\"; // src/drawer.tsx\n\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { useTheme } from \"@chakra-ui/system\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [DrawerContextProvider, useDrawerContext] = createContext();\nvar placementMap = {\n  start: {\n    ltr: \"left\",\n    rtl: \"right\"\n  },\n  end: {\n    ltr: \"right\",\n    rtl: \"left\"\n  }\n};\n\nfunction getDrawerPlacement(placement, dir) {\n  var _a, _b;\n\n  if (!placement) return;\n  return (_b = (_a = placementMap[placement]) == null ? void 0 : _a[dir]) != null ? _b : placement;\n}\n\nfunction Drawer(props) {\n  var _a;\n\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props;\n  const theme = useTheme();\n  const drawerStyleConfig = (_a = theme.components) == null ? void 0 : _a.Drawer;\n  const placement = getDrawerPlacement(placementProp, theme.direction);\n  return /* @__PURE__ */jsx(DrawerContextProvider, {\n    value: {\n      placement\n    },\n    children: /* @__PURE__ */jsx(Modal, {\n      isOpen,\n      onClose,\n      styleConfig: drawerStyleConfig,\n      ...rest,\n      children\n    })\n  });\n}\n\nexport { useDrawerContext, Drawer };","map":{"version":3,"mappings":";;;;AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SAAuBC,QAAvB,QAAuC,mBAAvC;AAqEM;AAjEN,IAAM,CAACC,qBAAD,EAAwBC,gBAAxB,IAA4CH,eAAlD;AASA,IAAMI,eAAoC;EACxCC,OAAO;IAAEC,KAAK,MAAP;IAAeC,KAAK;EAApB,CADiC;EAExCC,KAAK;IAAEF,KAAK,OAAP;IAAgBC,KAAK;EAArB;AAFmC,CAA1C;;AAKA,SAASE,kBAAT,CACEC,SADF,EAEEC,GAFF,EAGE;EAtBF;;EAuBE,IAAI,CAACD,SAAL,EAAgB;EAEhB,QAAOE,wBAAaF,SAAb,yBAA0BC,GAA1B,CAAP,KAAO,IAAP,GAAOC,EAAP,GAAyCF,SAAzC;AACF;;AA6BO,SAASG,MAAT,CAAgBC,KAAhB,EAAoC;EAvD3C;;EAwDE,MAAM;IACJC,MADI;IAEJC,OAFI;IAGJN,WAAWO,gBAAgB,OAHvB;IAIJC,QAJI;IAKJ,GAAGC;EALC,IAMFL,KANJ;EAQA,MAAMM,QAAQnB,UAAd;EACA,MAAMoB,qBAAoBC,WAAMC,UAA1B,KAAoB,IAApB,GAAoB,MAApB,GAAoBD,GAAkBT,MAA5C;EACA,MAAMH,YAAYD,mBAAmBQ,aAAnB,EAAkCG,MAAMI,SAAxC,CAAlB;EAEA,OACE,mBAACtB,qBAAD,EAAC;IAAsBuB,OAAO;MAAEf;IAAF,CAA7B;IACCQ,6BAACQ,KAAD,EAAC;MACCX,MADD;MAECC,OAFD;MAGCW,aAAaN,iBAHd;MAIE,GAAGF,IAJL;MAMED;IANF,CAAD;EADD,CAAD,CADF;AAYF","names":["createContext","useTheme","DrawerContextProvider","useDrawerContext","placementMap","start","ltr","rtl","end","getDrawerPlacement","placement","dir","_b","Drawer","props","isOpen","onClose","placementProp","children","rest","theme","drawerStyleConfig","_a","components","direction","value","Modal","styleConfig"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\modal\\src\\drawer.tsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps, useTheme } from \"@chakra-ui/system\"\nimport { SlideOptions } from \"@chakra-ui/transition\"\nimport { Modal, ModalProps } from \"./modal\"\n\nconst [DrawerContextProvider, useDrawerContext] = createContext<DrawerOptions>()\n\ntype LogicalPlacement = \"start\" | \"end\"\ntype LogicalPlacementMap = Record<\n  LogicalPlacement,\n  { ltr: SlideOptions[\"direction\"]; rtl: SlideOptions[\"direction\"] }\n>\ntype DrawerPlacement = SlideOptions[\"direction\"] | LogicalPlacement\n\nconst placementMap: LogicalPlacementMap = {\n  start: { ltr: \"left\", rtl: \"right\" },\n  end: { ltr: \"right\", rtl: \"left\" },\n}\n\nfunction getDrawerPlacement(\n  placement: DrawerPlacement | undefined,\n  dir: \"ltr\" | \"rtl\",\n) {\n  if (!placement) return\n  //@ts-expect-error\n  return placementMap[placement]?.[dir] ?? placement\n}\n\ninterface DrawerOptions {\n  /**\n   * The placement of the drawer\n   * @default \"right\"\n   */\n  placement?: DrawerPlacement\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport interface DrawerProps\n  extends DrawerOptions,\n    ThemingProps<\"Drawer\">,\n    Omit<\n      ModalProps,\n      \"scrollBehavior\" | \"motionPreset\" | \"isCentered\" | keyof ThemingProps\n    > {}\n\n/**\n * The Drawer component is a panel that slides out from the edge of the screen.\n * It can be useful when you need users to complete a task or view some details without leaving the current page.\n *\n * @see Docs https://chakra-ui.com/docs/components/drawer\n */\nexport function Drawer(props: DrawerProps) {\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n  const placement = getDrawerPlacement(placementProp, theme.direction)\n\n  return (\n    <DrawerContextProvider value={{ placement }}>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        styleConfig={drawerStyleConfig}\n        {...rest}\n      >\n        {children}\n      </Modal>\n    </DrawerContextProvider>\n  )\n}\n\nexport { ModalBody as DrawerBody } from \"./modal-body\"\nexport { ModalCloseButton as DrawerCloseButton } from \"./modal-close-button\"\nexport { ModalFooter as DrawerFooter } from \"./modal-footer\"\nexport { ModalHeader as DrawerHeader } from \"./modal-header\"\nexport { ModalOverlay as DrawerOverlay } from \"./modal-overlay\"\n\nexport { useDrawerContext }\n"]},"metadata":{},"sourceType":"module"}