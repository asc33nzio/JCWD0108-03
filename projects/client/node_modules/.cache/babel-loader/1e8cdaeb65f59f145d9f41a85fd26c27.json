{"ast":null,"code":"'use client';\n\nimport { Skeleton } from \"./chunk-GOJLRND4.mjs\"; // src/skeleton-text.tsx\n\nimport { useBreakpointValue } from \"@chakra-ui/media-query\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction range(count) {\n  return Array(count).fill(1).map((_, index) => index + 1);\n}\n\nvar defaultNoOfLines = 3;\n\nvar SkeletonText = props => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    variant,\n    size,\n    colorScheme,\n    children,\n    ...rest\n  } = props;\n  const noOfLinesValue = useBreakpointValue(typeof noOfLines === \"number\" ? [noOfLines] : noOfLines) || defaultNoOfLines;\n  const numbers = range(noOfLinesValue);\n\n  const getWidth = index => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\";\n    }\n\n    return \"100%\";\n  };\n\n  const _className = cx(\"chakra-skeleton__group\", className);\n\n  return /* @__PURE__ */jsx(chakra.div, {\n    className: _className,\n    ...rest,\n    children: numbers.map((number, index) => {\n      if (isLoaded && index > 0) {\n        return null;\n      }\n\n      const sizeProps = isLoaded ? null : {\n        mb: number === numbers.length ? \"0\" : spacing,\n        width: getWidth(number),\n        height: skeletonHeight\n      };\n      return /* @__PURE__ */jsx(Skeleton, {\n        startColor,\n        endColor,\n        isLoaded,\n        fadeDuration,\n        speed,\n        variant,\n        size,\n        colorScheme,\n        ...sizeProps,\n        // allows animating the children\n        children: index === 0 ? children : void 0\n      }, numbers.length.toString() + number);\n    })\n  });\n};\n\nSkeletonText.displayName = \"SkeletonText\";\nexport { SkeletonText };","map":{"version":3,"mappings":";;;;AAAA,SAASA,kBAAT,QAAmC,wBAAnC;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,EAAT,QAAmB,yBAAnB;AAyEU;;AAtEV,SAASC,KAAT,CAAeC,KAAf,EAA8B;EAC5B,OAAOC,MAAMD,KAAN,EACJE,IADI,CACC,CADD,EAEJC,GAFI,CAEA,CAACC,CAAD,EAAIC,KAAJ,KAAcA,QAAQ,CAFtB,CAAP;AAGF;;AASA,IAAMC,mBAAmB,CAAzB;;AAOO,IAAMC,eAA6CC,KAAD,IAAW;EAClE,MAAM;IACJC,YAAYH,gBADR;IAEJI,UAAU,QAFN;IAGJC,iBAAiB,QAHb;IAIJC,SAJI;IAKJC,UALI;IAMJC,QANI;IAOJC,QAPI;IAQJC,YARI;IASJC,KATI;IAUJC,OAVI;IAWJC,IAXI;IAYJC,WAZI;IAaJC,QAbI;IAcJ,GAAGC;EAdC,IAeFd,KAfJ;EAiBA,MAAMe,iBACJ3B,mBACE,OAAOa,SAAP,KAAqB,QAArB,GAAgC,CAACA,SAAD,CAAhC,GAA8CA,SADhD,KAEKH,gBAHP;EAIA,MAAMkB,UAAUzB,MAAMwB,cAAN,CAAhB;;EAEA,MAAME,WAAYpB,KAAD,IAAmB;IAClC,IAAIkB,iBAAiB,CAArB,EAAwB;MACtB,OAAOlB,UAAUmB,QAAQE,MAAlB,GAA2B,KAA3B,GAAmC,MAA1C;IACF;;IACA,OAAO,MAAP;EACF,CALA;;EAOA,MAAMC,aAAa7B,GAAG,wBAAH,EAA6Bc,SAA7B,CAAnB;;EAEA,OACE,mBAACf,OAAO+B,GAAR,EAAC;IAAWhB,WAAWe,UAAtB;IAAmC,GAAGL,IAAtC;IACED,kBAAQlB,GAAR,CAAY,CAAC0B,MAAD,EAASxB,KAAT,KAAmB;MAC9B,IAAIU,YAAYV,QAAQ,CAAxB,EAA2B;QAEzB,OAAO,IAAP;MACF;;MAEA,MAAMyB,YAAYf,WACd,IADc,GAEd;QACEgB,IAAIF,WAAWL,QAAQE,MAAnB,GAA4B,GAA5B,GAAkChB,OADxC;QAEEsB,OAAOP,SAASI,MAAT,CAFT;QAGEI,QAAQtB;MAHV,CAFJ;MAQA,OACE,mBAACuB,QAAD,EAAC;QAECrB,UAFD;QAGCC,QAHD;QAICC,QAJD;QAKCC,YALD;QAMCC,KAND;QAOCC,OAPD;QAQCC,IARD;QASCC,WATD;QAUE,GAAGU,SAVL;QAUK;QAIFT,oBAAU,CAAV,GAAcA,QAAd,GAAyB;MAd5B,CAAD,EACOG,QAAQE,MAAR,CAAeS,QAAf,KAA4BN,MADnC,CADF;IAmBD,CAjCA;EADF,CAAD,CADF;AAsCF,CAvEO;;AAyEPtB,aAAa6B,WAAb,GAA2B,cAA3B","names":["useBreakpointValue","chakra","cx","range","count","Array","fill","map","_","index","defaultNoOfLines","SkeletonText","props","noOfLines","spacing","skeletonHeight","className","startColor","endColor","isLoaded","fadeDuration","speed","variant","size","colorScheme","children","rest","noOfLinesValue","numbers","getWidth","length","_className","div","number","sizeProps","mb","width","height","Skeleton","toString","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\skeleton\\src\\skeleton-text.tsx"],"sourcesContent":["import { useBreakpointValue } from \"@chakra-ui/media-query\"\nimport { chakra } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { SkeletonProps, Skeleton } from \"./skeleton\"\n\nfunction range(count: number) {\n  return Array(count)\n    .fill(1)\n    .map((_, index) => index + 1)\n}\n\nexport interface SkeletonTextProps extends SkeletonProps {\n  spacing?: SkeletonProps[\"margin\"]\n  skeletonHeight?: SkeletonProps[\"height\"]\n  startColor?: SkeletonProps[\"startColor\"]\n  endColor?: SkeletonProps[\"endColor\"]\n  isLoaded?: SkeletonProps[\"isLoaded\"]\n}\nconst defaultNoOfLines = 3\n/**\n * `SkeletonText` is used to display the loading state in the form of text.\n *\n * @see Docs https://chakra-ui.com/docs/components/skeleton\n */\n\nexport const SkeletonText: React.FC<SkeletonTextProps> = (props) => {\n  const {\n    noOfLines = defaultNoOfLines,\n    spacing = \"0.5rem\",\n    skeletonHeight = \"0.5rem\",\n    className,\n    startColor,\n    endColor,\n    isLoaded,\n    fadeDuration,\n    speed,\n    variant,\n    size,\n    colorScheme,\n    children,\n    ...rest\n  } = props\n\n  const noOfLinesValue =\n    useBreakpointValue(\n      typeof noOfLines === \"number\" ? [noOfLines] : noOfLines,\n    ) || defaultNoOfLines\n  const numbers = range(noOfLinesValue)\n\n  const getWidth = (index: number) => {\n    if (noOfLinesValue > 1) {\n      return index === numbers.length ? \"80%\" : \"100%\"\n    }\n    return \"100%\"\n  }\n\n  const _className = cx(\"chakra-skeleton__group\", className)\n\n  return (\n    <chakra.div className={_className} {...rest}>\n      {numbers.map((number, index) => {\n        if (isLoaded && index > 0) {\n          // skip other lines\n          return null\n        }\n\n        const sizeProps = isLoaded\n          ? null\n          : {\n              mb: number === numbers.length ? \"0\" : spacing,\n              width: getWidth(number),\n              height: skeletonHeight,\n            }\n\n        return (\n          <Skeleton\n            key={numbers.length.toString() + number}\n            startColor={startColor}\n            endColor={endColor}\n            isLoaded={isLoaded}\n            fadeDuration={fadeDuration}\n            speed={speed}\n            variant={variant}\n            size={size}\n            colorScheme={colorScheme}\n            {...sizeProps}\n          >\n            {\n              // allows animating the children\n              index === 0 ? children : undefined\n            }\n          </Skeleton>\n        )\n      })}\n    </chakra.div>\n  )\n}\n\nSkeletonText.displayName = \"SkeletonText\"\n"]},"metadata":{},"sourceType":"module"}