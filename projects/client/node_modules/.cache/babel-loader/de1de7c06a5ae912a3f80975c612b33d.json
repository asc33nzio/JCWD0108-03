{"ast":null,"code":"'use client'; // src/use-steps.ts\n\nimport { useState } from \"react\";\n\nfunction useSteps() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    index = 0,\n    count\n  } = props;\n  const [activeStep, setActiveStep] = useState(index);\n  const maxStep = typeof count === \"number\" ? count - 1 : 0;\n  const activeStepPercent = activeStep / maxStep;\n  return {\n    activeStep,\n    setActiveStep,\n    activeStepPercent,\n\n    isActiveStep(step) {\n      return step === activeStep;\n    },\n\n    isCompleteStep(step) {\n      return step < activeStep;\n    },\n\n    isIncompleteStep(step) {\n      return step > activeStep;\n    },\n\n    getStatus(step) {\n      if (step < activeStep) return \"complete\";\n      if (step > activeStep) return \"incomplete\";\n      return \"active\";\n    },\n\n    goToNext() {\n      setActiveStep(step => {\n        return typeof count === \"number\" ? Math.min(count, step + 1) : step + 1;\n      });\n    },\n\n    goToPrevious() {\n      setActiveStep(step => Math.max(0, step - 1));\n    }\n\n  };\n}\n\nexport { useSteps };","map":{"version":3,"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AASO,SAASC,QAAT,GAA6C;EAAA,IAA3BC,KAA2B,uEAAJ,EAAI;EAClD,MAAM;IAAEC,QAAQ,CAAV;IAAaC;EAAb,IAAuBF,KAA7B;EAEA,MAAM,CAACG,UAAD,EAAaC,aAAb,IAA8BN,SAASG,KAAT,CAApC;EAEA,MAAMI,UAAU,OAAOH,KAAP,KAAiB,QAAjB,GAA4BA,QAAQ,CAApC,GAAwC,CAAxD;EACA,MAAMI,oBAAoBH,aAAaE,OAAvC;EAEA,OAAO;IACLF,UADK;IAELC,aAFK;IAGLE,iBAHK;;IAILC,aAAaC,IAAb,EAA2B;MACzB,OAAOA,SAASL,UAAhB;IACF,CANK;;IAOLM,eAAeD,IAAf,EAA6B;MAC3B,OAAOA,OAAOL,UAAd;IACF,CATK;;IAULO,iBAAiBF,IAAjB,EAA+B;MAC7B,OAAOA,OAAOL,UAAd;IACF,CAZK;;IAaLQ,UAAUH,IAAV,EAAoC;MAClC,IAAIA,OAAOL,UAAX,EAAuB,OAAO,UAAP;MACvB,IAAIK,OAAOL,UAAX,EAAuB,OAAO,YAAP;MACvB,OAAO,QAAP;IACF,CAjBK;;IAkBLS,WAAW;MACTR,cAAeI,IAAD,IAAU;QACtB,OAAO,OAAON,KAAP,KAAiB,QAAjB,GAA4BW,KAAKC,GAAL,CAASZ,KAAT,EAAgBM,OAAO,CAAvB,CAA5B,GAAwDA,OAAO,CAAtE;MACD,CAFD;IAGF,CAtBK;;IAuBLO,eAAe;MACbX,cAAeI,IAAD,IAAUK,KAAKG,GAAL,CAAS,CAAT,EAAYR,OAAO,CAAnB,CAAxB;IACF;;EAzBK,CAAP;AA2BF","names":["useState","useSteps","props","index","count","activeStep","setActiveStep","maxStep","activeStepPercent","isActiveStep","step","isCompleteStep","isIncompleteStep","getStatus","goToNext","Math","min","goToPrevious","max"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\stepper\\src\\use-steps.ts"],"sourcesContent":["import { useState } from \"react\"\n\nexport type UseStepsProps = {\n  index?: number\n  count?: number\n}\n\nexport type StepStatus = \"complete\" | \"active\" | \"incomplete\"\n\nexport function useSteps(props: UseStepsProps = {}) {\n  const { index = 0, count } = props\n\n  const [activeStep, setActiveStep] = useState(index)\n\n  const maxStep = typeof count === \"number\" ? count - 1 : 0\n  const activeStepPercent = activeStep / maxStep\n\n  return {\n    activeStep,\n    setActiveStep,\n    activeStepPercent,\n    isActiveStep(step: number) {\n      return step === activeStep\n    },\n    isCompleteStep(step: number) {\n      return step < activeStep\n    },\n    isIncompleteStep(step: number) {\n      return step > activeStep\n    },\n    getStatus(step: number): StepStatus {\n      if (step < activeStep) return \"complete\"\n      if (step > activeStep) return \"incomplete\"\n      return \"active\"\n    },\n    goToNext() {\n      setActiveStep((step) => {\n        return typeof count === \"number\" ? Math.min(count, step + 1) : step + 1\n      })\n    },\n    goToPrevious() {\n      setActiveStep((step) => Math.max(0, step - 1))\n    },\n  }\n}\n\nexport type UseStepsReturn = ReturnType<typeof useSteps>\n"]},"metadata":{},"sourceType":"module"}