{"ast":null,"code":"'use client'; // src/indicator.tsx\n\nimport { mapResponsive } from \"@chakra-ui/breakpoint-utils\";\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { useMemo } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Indicator = forwardRef(function Indicator2(props, ref) {\n  const {\n    offsetX,\n    offsetY,\n    offset = \"0\",\n    placement = \"top-end\",\n    ...rest\n  } = props;\n  const styles = useMemo(() => ({\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    position: \"absolute\",\n    insetBlockStart: mapResponsive(placement, v => {\n      const [side] = v.split(\"-\");\n      const map = {\n        top: offsetY != null ? offsetY : offset,\n        middle: \"50%\",\n        bottom: \"auto\"\n      };\n      return map[side];\n    }),\n    insetBlockEnd: mapResponsive(placement, v => {\n      const [side] = v.split(\"-\");\n      const map = {\n        top: \"auto\",\n        middle: \"50%\",\n        bottom: offsetY != null ? offsetY : offset\n      };\n      return map[side];\n    }),\n    insetStart: mapResponsive(placement, v => {\n      const [, align] = v.split(\"-\");\n      const map = {\n        start: offsetX != null ? offsetX : offset,\n        center: \"50%\",\n        end: \"auto\"\n      };\n      return map[align];\n    }),\n    insetEnd: mapResponsive(placement, v => {\n      const [, align] = v.split(\"-\");\n      const map = {\n        start: \"auto\",\n        center: \"50%\",\n        end: offsetX != null ? offsetX : offset\n      };\n      return map[align];\n    }),\n    translate: mapResponsive(placement, v => {\n      const [side, align] = v.split(\"-\");\n      const mapX = {\n        start: \"-50%\",\n        center: \"-50%\",\n        end: \"50%\"\n      };\n      const mapY = {\n        top: \"-50%\",\n        middle: \"-50%\",\n        bottom: \"50%\"\n      };\n      return `${mapX[align]} ${mapY[side]}`;\n    })\n  }), [offset, offsetX, offsetY, placement]);\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    __css: styles,\n    ...rest\n  });\n});\nexport { Indicator };","map":{"version":3,"mappings":";;AAAA,SAASA,aAAT,QAA8B,6BAA9B;AACA,SAIEC,MAJF,EAKEC,UALF,QAMO,mBANP;AAOA,SAASC,OAAT,QAAwB,OAAxB;AAsGS;AAhEF,IAAMC,YAAYF,WAAkC,SAASE,UAAT,CACzDC,KADyD,EAEzDC,GAFyD,EAGzD;EACA,MAAM;IACJC,OADI;IAEJC,OAFI;IAGJC,SAAS,GAHL;IAIJC,YAAY,SAJR;IAKJ,GAAGC;EALC,IAMFN,KANJ;EAQA,MAAMO,SAA4BT,QAChC,OAAO;IACLU,SAAS,aADJ;IAELC,gBAAgB,QAFX;IAGLC,YAAY,QAHP;IAILC,UAAU,UAJL;IAKLC,iBAAiBjB,cAAcU,SAAd,EAA0BQ,CAAD,IAAO;MAC/C,MAAM,CAACC,IAAD,IAASD,EAAEE,KAAF,CAAQ,GAAR,CAAf;MACA,MAAMC,MAAY;QAChBC,KAAKd,4BAAWC,MADA;QAEhBc,QAAQ,KAFQ;QAGhBC,QAAQ;MAHQ,CAAlB;MAKA,OAAOH,IAAIF,IAAJ,CAAP;IACD,CARgB,CALZ;IAcLM,eAAezB,cAAcU,SAAd,EAA0BQ,CAAD,IAAO;MAC7C,MAAM,CAACC,IAAD,IAASD,EAAEE,KAAF,CAAQ,GAAR,CAAf;MACA,MAAMC,MAAY;QAChBC,KAAK,MADW;QAEhBC,QAAQ,KAFQ;QAGhBC,QAAQhB,4BAAWC;MAHH,CAAlB;MAKA,OAAOY,IAAIF,IAAJ,CAAP;IACD,CARc,CAdV;IAuBLO,YAAY1B,cAAcU,SAAd,EAA0BQ,CAAD,IAAO;MAC1C,MAAM,GAAGS,KAAH,IAAYT,EAAEE,KAAF,CAAQ,GAAR,CAAlB;MACA,MAAMC,MAAY;QAChBO,OAAOrB,4BAAWE,MADF;QAEhBoB,QAAQ,KAFQ;QAGhBC,KAAK;MAHW,CAAlB;MAKA,OAAOT,IAAIM,KAAJ,CAAP;IACD,CARW,CAvBP;IAgCLI,UAAU/B,cAAcU,SAAd,EAA0BQ,CAAD,IAAO;MACxC,MAAM,GAAGS,KAAH,IAAYT,EAAEE,KAAF,CAAQ,GAAR,CAAlB;MACA,MAAMC,MAAY;QAChBO,OAAO,MADS;QAEhBC,QAAQ,KAFQ;QAGhBC,KAAKvB,4BAAWE;MAHA,CAAlB;MAKA,OAAOY,IAAIM,KAAJ,CAAP;IACD,CARS,CAhCL;IAyCLK,WAAWhC,cAAcU,SAAd,EAA0BQ,CAAD,IAAO;MACzC,MAAM,CAACC,IAAD,EAAOQ,KAAP,IAAgBT,EAAEE,KAAF,CAAQ,GAAR,CAAtB;MACA,MAAMa,OAAa;QAAEL,OAAO,MAAT;QAAiBC,QAAQ,MAAzB;QAAiCC,KAAK;MAAtC,CAAnB;MACA,MAAMI,OAAa;QAAEZ,KAAK,MAAP;QAAeC,QAAQ,MAAvB;QAA+BC,QAAQ;MAAvC,CAAnB;MACA,OAAO,GAAGS,KAAKN,KAAL,CAAU,IAAKO,KAAKf,IAAL,CAAS,EAAlC;IACD,CALU;EAzCN,CAAP,CADgC,EAiDhC,CAACV,MAAD,EAASF,OAAT,EAAkBC,OAAlB,EAA2BE,SAA3B,CAjDgC,CAAlC;EAoDA,OAAO,mBAACT,OAAOkC,GAAR,EAAC;IAAW7B,GAAX;IAAqB8B,OAAOxB,MAA5B;IAAqC,GAAGD;EAAxC,CAAD,CAAP;AACD,CAjEwB,CAAlB","names":["mapResponsive","chakra","forwardRef","useMemo","Indicator","props","ref","offsetX","offsetY","offset","placement","rest","styles","display","justifyContent","alignItems","position","insetBlockStart","v","side","split","map","top","middle","bottom","insetBlockEnd","insetStart","align","start","center","end","insetEnd","translate","mapX","mapY","div","__css"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\layout\\src\\indicator.tsx"],"sourcesContent":["import { mapResponsive } from \"@chakra-ui/breakpoint-utils\"\nimport {\n  HTMLChakraProps,\n  ResponsiveValue,\n  SystemStyleObject,\n  chakra,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { useMemo } from \"react\"\n\ntype Dict = Record<string, any>\n\nexport interface IndicatorOptions {\n  /**\n   * The x offset of the indicator\n   */\n  offsetX?: SystemStyleObject[\"left\"]\n  /**\n   * The y offset of the indicator\n   */\n  offsetY?: SystemStyleObject[\"top\"]\n  /**\n   * The x and y offset of the indicator\n   */\n  offset?: SystemStyleObject[\"top\"]\n  /**\n   * The placement of the indicator\n   * @default \"top-end\"\n   */\n  placement?: ResponsiveValue<\n    | \"bottom-end\"\n    | \"bottom-start\"\n    | \"top-end\"\n    | \"top-start\"\n    | \"bottom-center\"\n    | \"top-center\"\n    | \"middle-center\"\n    | \"middle-end\"\n    | \"middle-start\"\n  >\n}\n\nexport interface IndicatorProps\n  extends Omit<HTMLChakraProps<\"div\">, keyof IndicatorOptions>,\n    IndicatorOptions {}\n\nexport const Indicator = forwardRef<IndicatorProps, \"div\">(function Indicator(\n  props,\n  ref,\n) {\n  const {\n    offsetX,\n    offsetY,\n    offset = \"0\",\n    placement = \"top-end\",\n    ...rest\n  } = props\n\n  const styles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"inline-flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      position: \"absolute\",\n      insetBlockStart: mapResponsive(placement, (v) => {\n        const [side] = v.split(\"-\")\n        const map: Dict = {\n          top: offsetY ?? offset,\n          middle: \"50%\",\n          bottom: \"auto\",\n        }\n        return map[side]\n      }),\n      insetBlockEnd: mapResponsive(placement, (v) => {\n        const [side] = v.split(\"-\")\n        const map: Dict = {\n          top: \"auto\",\n          middle: \"50%\",\n          bottom: offsetY ?? offset,\n        }\n        return map[side]\n      }),\n      insetStart: mapResponsive(placement, (v) => {\n        const [, align] = v.split(\"-\")\n        const map: Dict = {\n          start: offsetX ?? offset,\n          center: \"50%\",\n          end: \"auto\",\n        }\n        return map[align]\n      }),\n      insetEnd: mapResponsive(placement, (v) => {\n        const [, align] = v.split(\"-\")\n        const map: Dict = {\n          start: \"auto\",\n          center: \"50%\",\n          end: offsetX ?? offset,\n        }\n        return map[align]\n      }),\n      translate: mapResponsive(placement, (v) => {\n        const [side, align] = v.split(\"-\")\n        const mapX: Dict = { start: \"-50%\", center: \"-50%\", end: \"50%\" }\n        const mapY: Dict = { top: \"-50%\", middle: \"-50%\", bottom: \"50%\" }\n        return `${mapX[align]} ${mapY[side]}`\n      }),\n    }),\n    [offset, offsetX, offsetY, placement],\n  )\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n"]},"metadata":{},"sourceType":"module"}