{"ast":null,"code":"import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\nconst thresholdNames = {\n  some: 0,\n  all: 1\n};\n\nclass InViewFeature extends Feature {\n  constructor() {\n    super(...arguments);\n    this.hasEnteredView = false;\n    this.isInView = false;\n  }\n\n  startObserver() {\n    this.unmount();\n    const {\n      viewport = {}\n    } = this.node.getProps();\n    const {\n      root,\n      margin: rootMargin,\n      amount = \"some\",\n      once\n    } = viewport;\n    const options = {\n      root: root ? root.current : undefined,\n      rootMargin,\n      threshold: typeof amount === \"number\" ? amount : thresholdNames[amount]\n    };\n\n    const onIntersectionUpdate = entry => {\n      const {\n        isIntersecting\n      } = entry;\n      /**\n       * If there's been no change in the viewport state, early return.\n       */\n\n      if (this.isInView === isIntersecting) return;\n      this.isInView = isIntersecting;\n      /**\n       * Handle hasEnteredView. If this is only meant to run once, and\n       * element isn't visible, early return. Otherwise set hasEnteredView to true.\n       */\n\n      if (once && !isIntersecting && this.hasEnteredView) {\n        return;\n      } else if (isIntersecting) {\n        this.hasEnteredView = true;\n      }\n\n      if (this.node.animationState) {\n        this.node.animationState.setActive(\"whileInView\", isIntersecting);\n      }\n      /**\n       * Use the latest committed props rather than the ones in scope\n       * when this observer is created\n       */\n\n\n      const {\n        onViewportEnter,\n        onViewportLeave\n      } = this.node.getProps();\n      const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n      callback && callback(entry);\n    };\n\n    return observeIntersection(this.node.current, options, onIntersectionUpdate);\n  }\n\n  mount() {\n    this.startObserver();\n  }\n\n  update() {\n    if (typeof IntersectionObserver === \"undefined\") return;\n    const {\n      props,\n      prevProps\n    } = this.node;\n    const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n\n    if (hasOptionsChanged) {\n      this.startObserver();\n    }\n  }\n\n  unmount() {}\n\n}\n\nfunction hasViewportOptionChanged(_ref) {\n  let {\n    viewport = {}\n  } = _ref;\n  let {\n    viewport: prevViewport = {}\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return name => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };","map":{"version":3,"names":["Feature","observeIntersection","thresholdNames","some","all","InViewFeature","constructor","arguments","hasEnteredView","isInView","startObserver","unmount","viewport","node","getProps","root","margin","rootMargin","amount","once","options","current","undefined","threshold","onIntersectionUpdate","entry","isIntersecting","animationState","setActive","onViewportEnter","onViewportLeave","callback","mount","update","IntersectionObserver","props","prevProps","hasOptionsChanged","hasViewportOptionChanged","prevViewport","name"],"sources":["C:/Purwadhika/JCWD Bandung/4. REAL PROJECT/JCWD0108-03/node_modules/framer-motion/dist/es/motion/features/viewport/index.mjs"],"sourcesContent":["import { Feature } from '../Feature.mjs';\nimport { observeIntersection } from './observers.mjs';\n\nconst thresholdNames = {\n    some: 0,\n    all: 1,\n};\nclass InViewFeature extends Feature {\n    constructor() {\n        super(...arguments);\n        this.hasEnteredView = false;\n        this.isInView = false;\n    }\n    startObserver() {\n        this.unmount();\n        const { viewport = {} } = this.node.getProps();\n        const { root, margin: rootMargin, amount = \"some\", once } = viewport;\n        const options = {\n            root: root ? root.current : undefined,\n            rootMargin,\n            threshold: typeof amount === \"number\" ? amount : thresholdNames[amount],\n        };\n        const onIntersectionUpdate = (entry) => {\n            const { isIntersecting } = entry;\n            /**\n             * If there's been no change in the viewport state, early return.\n             */\n            if (this.isInView === isIntersecting)\n                return;\n            this.isInView = isIntersecting;\n            /**\n             * Handle hasEnteredView. If this is only meant to run once, and\n             * element isn't visible, early return. Otherwise set hasEnteredView to true.\n             */\n            if (once && !isIntersecting && this.hasEnteredView) {\n                return;\n            }\n            else if (isIntersecting) {\n                this.hasEnteredView = true;\n            }\n            if (this.node.animationState) {\n                this.node.animationState.setActive(\"whileInView\", isIntersecting);\n            }\n            /**\n             * Use the latest committed props rather than the ones in scope\n             * when this observer is created\n             */\n            const { onViewportEnter, onViewportLeave } = this.node.getProps();\n            const callback = isIntersecting ? onViewportEnter : onViewportLeave;\n            callback && callback(entry);\n        };\n        return observeIntersection(this.node.current, options, onIntersectionUpdate);\n    }\n    mount() {\n        this.startObserver();\n    }\n    update() {\n        if (typeof IntersectionObserver === \"undefined\")\n            return;\n        const { props, prevProps } = this.node;\n        const hasOptionsChanged = [\"amount\", \"margin\", \"root\"].some(hasViewportOptionChanged(props, prevProps));\n        if (hasOptionsChanged) {\n            this.startObserver();\n        }\n    }\n    unmount() { }\n}\nfunction hasViewportOptionChanged({ viewport = {} }, { viewport: prevViewport = {} } = {}) {\n    return (name) => viewport[name] !== prevViewport[name];\n}\n\nexport { InViewFeature };\n"],"mappings":"AAAA,SAASA,OAAT,QAAwB,gBAAxB;AACA,SAASC,mBAAT,QAAoC,iBAApC;AAEA,MAAMC,cAAc,GAAG;EACnBC,IAAI,EAAE,CADa;EAEnBC,GAAG,EAAE;AAFc,CAAvB;;AAIA,MAAMC,aAAN,SAA4BL,OAA5B,CAAoC;EAChCM,WAAW,GAAG;IACV,MAAM,GAAGC,SAAT;IACA,KAAKC,cAAL,GAAsB,KAAtB;IACA,KAAKC,QAAL,GAAgB,KAAhB;EACH;;EACDC,aAAa,GAAG;IACZ,KAAKC,OAAL;IACA,MAAM;MAAEC,QAAQ,GAAG;IAAb,IAAoB,KAAKC,IAAL,CAAUC,QAAV,EAA1B;IACA,MAAM;MAAEC,IAAF;MAAQC,MAAM,EAAEC,UAAhB;MAA4BC,MAAM,GAAG,MAArC;MAA6CC;IAA7C,IAAsDP,QAA5D;IACA,MAAMQ,OAAO,GAAG;MACZL,IAAI,EAAEA,IAAI,GAAGA,IAAI,CAACM,OAAR,GAAkBC,SADhB;MAEZL,UAFY;MAGZM,SAAS,EAAE,OAAOL,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsChB,cAAc,CAACgB,MAAD;IAHnD,CAAhB;;IAKA,MAAMM,oBAAoB,GAAIC,KAAD,IAAW;MACpC,MAAM;QAAEC;MAAF,IAAqBD,KAA3B;MACA;AACZ;AACA;;MACY,IAAI,KAAKhB,QAAL,KAAkBiB,cAAtB,EACI;MACJ,KAAKjB,QAAL,GAAgBiB,cAAhB;MACA;AACZ;AACA;AACA;;MACY,IAAIP,IAAI,IAAI,CAACO,cAAT,IAA2B,KAAKlB,cAApC,EAAoD;QAChD;MACH,CAFD,MAGK,IAAIkB,cAAJ,EAAoB;QACrB,KAAKlB,cAAL,GAAsB,IAAtB;MACH;;MACD,IAAI,KAAKK,IAAL,CAAUc,cAAd,EAA8B;QAC1B,KAAKd,IAAL,CAAUc,cAAV,CAAyBC,SAAzB,CAAmC,aAAnC,EAAkDF,cAAlD;MACH;MACD;AACZ;AACA;AACA;;;MACY,MAAM;QAAEG,eAAF;QAAmBC;MAAnB,IAAuC,KAAKjB,IAAL,CAAUC,QAAV,EAA7C;MACA,MAAMiB,QAAQ,GAAGL,cAAc,GAAGG,eAAH,GAAqBC,eAApD;MACAC,QAAQ,IAAIA,QAAQ,CAACN,KAAD,CAApB;IACH,CA5BD;;IA6BA,OAAOxB,mBAAmB,CAAC,KAAKY,IAAL,CAAUQ,OAAX,EAAoBD,OAApB,EAA6BI,oBAA7B,CAA1B;EACH;;EACDQ,KAAK,GAAG;IACJ,KAAKtB,aAAL;EACH;;EACDuB,MAAM,GAAG;IACL,IAAI,OAAOC,oBAAP,KAAgC,WAApC,EACI;IACJ,MAAM;MAAEC,KAAF;MAASC;IAAT,IAAuB,KAAKvB,IAAlC;IACA,MAAMwB,iBAAiB,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,MAArB,EAA6BlC,IAA7B,CAAkCmC,wBAAwB,CAACH,KAAD,EAAQC,SAAR,CAA1D,CAA1B;;IACA,IAAIC,iBAAJ,EAAuB;MACnB,KAAK3B,aAAL;IACH;EACJ;;EACDC,OAAO,GAAG,CAAG;;AA1DmB;;AA4DpC,SAAS2B,wBAAT,OAA2F;EAAA,IAAzD;IAAE1B,QAAQ,GAAG;EAAb,CAAyD;EAAA,IAAtC;IAAEA,QAAQ,EAAE2B,YAAY,GAAG;EAA3B,CAAsC,uEAAJ,EAAI;EACvF,OAAQC,IAAD,IAAU5B,QAAQ,CAAC4B,IAAD,CAAR,KAAmBD,YAAY,CAACC,IAAD,CAAhD;AACH;;AAED,SAASnC,aAAT"},"metadata":{},"sourceType":"module"}