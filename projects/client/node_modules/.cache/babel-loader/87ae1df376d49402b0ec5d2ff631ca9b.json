{"ast":null,"code":"'use client';\n\nimport { ariaAttr, callAllHandlers, dataAttr } from \"./chunk-DX64QB22.mjs\";\nimport { getIsReversed, getStyles } from \"./chunk-E23N4XEN.mjs\"; // src/use-slider.ts\n\nimport { usePanEvent } from \"@chakra-ui/react-use-pan-event\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { useSize } from \"@chakra-ui/react-use-size\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\";\nimport { clampValue, percentToValue, roundValueToStep, valueToPercent } from \"@chakra-ui/number-utils\";\nimport { useCallback, useMemo, useRef, useId, useState } from \"react\";\n\nfunction useSlider(props) {\n  var _a;\n\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    value: valueProp,\n    defaultValue,\n    isReversed: isReversedProp,\n    direction = \"ltr\",\n    orientation = \"horizontal\",\n    id: idProp,\n    isDisabled,\n    isReadOnly,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    step = 1,\n    getAriaValueText: getAriaValueTextProp,\n    \"aria-valuetext\": ariaValueText,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    name,\n    focusThumbOnChange = true,\n    ...htmlProps\n  } = props;\n  const onChangeStart = useCallbackRef(onChangeStartProp);\n  const onChangeEnd = useCallbackRef(onChangeEndProp);\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp);\n  const isReversed = getIsReversed({\n    isReversed: isReversedProp,\n    direction,\n    orientation\n  });\n  const [computedValue, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue != null ? defaultValue : getDefaultValue(min, max),\n    onChange\n  });\n  const [isDragging, setDragging] = useState(false);\n  const [isFocused, setFocused] = useState(false);\n  const isInteractive = !(isDisabled || isReadOnly);\n  const tenSteps = (max - min) / 10;\n  const oneStep = step || (max - min) / 100;\n  const value = clampValue(computedValue, min, max);\n  const reversedValue = max - value + min;\n  const trackValue = isReversed ? reversedValue : value;\n  const thumbPercent = valueToPercent(trackValue, min, max);\n  const isVertical = orientation === \"vertical\";\n  const stateRef = useLatestRef({\n    min,\n    max,\n    step,\n    isDisabled,\n    value,\n    isInteractive,\n    isReversed,\n    isVertical,\n    eventSource: null,\n    focusThumbOnChange,\n    orientation\n  });\n  const trackRef = useRef(null);\n  const thumbRef = useRef(null);\n  const rootRef = useRef(null);\n  const reactId = useId();\n  const uuid = idProp != null ? idProp : reactId;\n  const [thumbId, trackId] = [`slider-thumb-${uuid}`, `slider-track-${uuid}`];\n  const getValueFromPointer = useCallback(event => {\n    var _a2, _b;\n\n    if (!trackRef.current) return;\n    const state2 = stateRef.current;\n    state2.eventSource = \"pointer\";\n    const trackRect = trackRef.current.getBoundingClientRect();\n    const {\n      clientX,\n      clientY\n    } = (_b = (_a2 = event.touches) == null ? void 0 : _a2[0]) != null ? _b : event;\n    const diff = isVertical ? trackRect.bottom - clientY : clientX - trackRect.left;\n    const length = isVertical ? trackRect.height : trackRect.width;\n    let percent = diff / length;\n\n    if (isReversed) {\n      percent = 1 - percent;\n    }\n\n    let nextValue = percentToValue(percent, state2.min, state2.max);\n\n    if (state2.step) {\n      nextValue = parseFloat(roundValueToStep(nextValue, state2.min, state2.step));\n    }\n\n    nextValue = clampValue(nextValue, state2.min, state2.max);\n    return nextValue;\n  }, [isVertical, isReversed, stateRef]);\n  const constrain = useCallback(value2 => {\n    const state2 = stateRef.current;\n    if (!state2.isInteractive) return;\n    value2 = parseFloat(roundValueToStep(value2, state2.min, oneStep));\n    value2 = clampValue(value2, state2.min, state2.max);\n    setValue(value2);\n  }, [oneStep, setValue, stateRef]);\n  const actions = useMemo(() => ({\n    stepUp() {\n      let step2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : oneStep;\n      const next = isReversed ? value - step2 : value + step2;\n      constrain(next);\n    },\n\n    stepDown() {\n      let step2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : oneStep;\n      const next = isReversed ? value + step2 : value - step2;\n      constrain(next);\n    },\n\n    reset() {\n      constrain(defaultValue || 0);\n    },\n\n    stepTo(value2) {\n      constrain(value2);\n    }\n\n  }), [constrain, isReversed, value, oneStep, defaultValue]);\n  const onKeyDown = useCallback(event => {\n    const state2 = stateRef.current;\n    const keyMap = {\n      ArrowRight: () => actions.stepUp(),\n      ArrowUp: () => actions.stepUp(),\n      ArrowLeft: () => actions.stepDown(),\n      ArrowDown: () => actions.stepDown(),\n      PageUp: () => actions.stepUp(tenSteps),\n      PageDown: () => actions.stepDown(tenSteps),\n      Home: () => constrain(state2.min),\n      End: () => constrain(state2.max)\n    };\n    const action = keyMap[event.key];\n\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n      state2.eventSource = \"keyboard\";\n    }\n  }, [actions, constrain, tenSteps, stateRef]);\n  const valueText = (_a = getAriaValueText == null ? void 0 : getAriaValueText(value)) != null ? _a : ariaValueText;\n  const thumbSize = useSize(thumbRef);\n  const {\n    getThumbStyle,\n    rootStyle,\n    trackStyle,\n    innerTrackStyle\n  } = useMemo(() => {\n    const state2 = stateRef.current;\n    const thumbRect = thumbSize != null ? thumbSize : {\n      width: 0,\n      height: 0\n    };\n    return getStyles({\n      isReversed,\n      orientation: state2.orientation,\n      thumbRects: [thumbRect],\n      thumbPercents: [thumbPercent]\n    });\n  }, [isReversed, thumbSize, thumbPercent, stateRef]);\n  const focusThumb = useCallback(() => {\n    const state2 = stateRef.current;\n\n    if (state2.focusThumbOnChange) {\n      setTimeout(() => {\n        var _a2;\n\n        return (_a2 = thumbRef.current) == null ? void 0 : _a2.focus();\n      });\n    }\n  }, [stateRef]);\n  useUpdateEffect(() => {\n    const state2 = stateRef.current;\n    focusThumb();\n\n    if (state2.eventSource === \"keyboard\") {\n      onChangeEnd == null ? void 0 : onChangeEnd(state2.value);\n    }\n  }, [value, onChangeEnd]);\n\n  function setValueFromPointer(event) {\n    const nextValue = getValueFromPointer(event);\n\n    if (nextValue != null && nextValue !== stateRef.current.value) {\n      setValue(nextValue);\n    }\n  }\n\n  usePanEvent(rootRef, {\n    onPanSessionStart(event) {\n      const state2 = stateRef.current;\n      if (!state2.isInteractive) return;\n      setDragging(true);\n      focusThumb();\n      setValueFromPointer(event);\n      onChangeStart == null ? void 0 : onChangeStart(state2.value);\n    },\n\n    onPanSessionEnd() {\n      const state2 = stateRef.current;\n      if (!state2.isInteractive) return;\n      setDragging(false);\n      onChangeEnd == null ? void 0 : onChangeEnd(state2.value);\n    },\n\n    onPan(event) {\n      const state2 = stateRef.current;\n      if (!state2.isInteractive) return;\n      setValueFromPointer(event);\n    }\n\n  });\n  const getRootProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ...htmlProps,\n      ref: mergeRefs(ref, rootRef),\n      tabIndex: -1,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"data-focused\": dataAttr(isFocused),\n      style: { ...props2.style,\n        ...rootStyle\n      }\n    };\n  }, [htmlProps, isDisabled, isFocused, rootStyle]);\n  const getTrackProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: mergeRefs(ref, trackRef),\n      id: trackId,\n      \"data-disabled\": dataAttr(isDisabled),\n      style: { ...props2.style,\n        ...trackStyle\n      }\n    };\n  }, [isDisabled, trackId, trackStyle]);\n  const getInnerTrackProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref,\n      style: { ...props2.style,\n        ...innerTrackStyle\n      }\n    };\n  }, [innerTrackStyle]);\n  const getThumbProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: mergeRefs(ref, thumbRef),\n      role: \"slider\",\n      tabIndex: isInteractive ? 0 : void 0,\n      id: thumbId,\n      \"data-active\": dataAttr(isDragging),\n      \"aria-valuetext\": valueText,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": value,\n      \"aria-orientation\": orientation,\n      \"aria-disabled\": ariaAttr(isDisabled),\n      \"aria-readonly\": ariaAttr(isReadOnly),\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabel ? void 0 : ariaLabelledBy,\n      style: { ...props2.style,\n        ...getThumbStyle(0)\n      },\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props2.onFocus, () => setFocused(true)),\n      onBlur: callAllHandlers(props2.onBlur, () => setFocused(false))\n    };\n  }, [isInteractive, thumbId, isDragging, valueText, min, max, value, orientation, isDisabled, isReadOnly, ariaLabel, ariaLabelledBy, getThumbStyle, onKeyDown]);\n  const getMarkerProps = useCallback(function (props2) {\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const isInRange = !(props2.value < min || props2.value > max);\n    const isHighlighted = value >= props2.value;\n    const markerPercent = valueToPercent(props2.value, min, max);\n    const markerStyle = {\n      position: \"absolute\",\n      pointerEvents: \"none\",\n      ...orient({\n        orientation,\n        vertical: {\n          bottom: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`\n        },\n        horizontal: {\n          left: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`\n        }\n      })\n    };\n    return { ...props2,\n      ref,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(!isInRange),\n      \"data-highlighted\": dataAttr(isHighlighted),\n      style: { ...props2.style,\n        ...markerStyle\n      }\n    };\n  }, [isDisabled, isReversed, max, min, orientation, value]);\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref,\n      type: \"hidden\",\n      value,\n      name\n    };\n  }, [name, value]);\n  const state = {\n    value,\n    isFocused,\n    isDragging\n  };\n  return {\n    state,\n    actions,\n    getRootProps,\n    getTrackProps,\n    getInnerTrackProps,\n    getThumbProps,\n    getMarkerProps,\n    getInputProps\n  };\n}\n\nfunction orient(options) {\n  const {\n    orientation,\n    vertical,\n    horizontal\n  } = options;\n  return orientation === \"vertical\" ? vertical : horizontal;\n}\n\nfunction getDefaultValue(min, max) {\n  return max < min ? min : min + (max - min) / 2;\n}\n\nexport { useSlider };","map":{"version":3,"mappings":"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","names":["usePanEvent","useCallbackRef","useUpdateEffect","useControllableState","useSize","mergeRefs","useLatestRef","clampValue","percentToValue","roundValueToStep","valueToPercent","useCallback","useMemo","useRef","useId","useState","useSlider","props","min","max","onChange","value","valueProp","defaultValue","isReversed","isReversedProp","direction","orientation","id","idProp","isDisabled","isReadOnly","onChangeStart","onChangeStartProp","onChangeEnd","onChangeEndProp","step","getAriaValueText","getAriaValueTextProp","ariaValueText","ariaLabel","ariaLabelledBy","name","focusThumbOnChange","htmlProps","getIsReversed","computedValue","setValue","getDefaultValue","isDragging","setDragging","isFocused","setFocused","isInteractive","tenSteps","oneStep","reversedValue","trackValue","thumbPercent","isVertical","stateRef","eventSource","trackRef","thumbRef","rootRef","reactId","uuid","thumbId","trackId","getValueFromPointer","event","current","state","trackRect","getBoundingClientRect","clientX","clientY","_b","touches","_a","diff","bottom","left","length","height","width","percent","nextValue","parseFloat","constrain","actions","stepUp","next","stepDown","reset","stepTo","onKeyDown","keyMap","ArrowRight","ArrowUp","ArrowLeft","ArrowDown","PageUp","PageDown","Home","End","action","key","preventDefault","stopPropagation","valueText","thumbSize","getThumbStyle","rootStyle","trackStyle","innerTrackStyle","thumbRect","getStyles","thumbRects","thumbPercents","focusThumb","setTimeout","focus","setValueFromPointer","onPanSessionStart","onPanSessionEnd","onPan","getRootProps","ref","tabIndex","ariaAttr","dataAttr","style","getTrackProps","getInnerTrackProps","getThumbProps","role","callAllHandlers","onFocus","onBlur","getMarkerProps","isInRange","isHighlighted","markerPercent","markerStyle","position","pointerEvents","orient","vertical","horizontal","getInputProps","type","options"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\slider\\src\\use-slider.ts"],"sourcesContent":["import { usePanEvent } from \"@chakra-ui/react-use-pan-event\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { useSize } from \"@chakra-ui/react-use-size\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\"\nimport type { PropGetter, RequiredPropGetter } from \"@chakra-ui/react-types\"\nimport {\n  clampValue,\n  percentToValue,\n  roundValueToStep,\n  valueToPercent,\n} from \"@chakra-ui/number-utils\"\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/utils\"\nimport { useCallback, useMemo, useRef, useId, useState } from \"react\"\nimport { getIsReversed, getStyles } from \"./slider-utils\"\n\nexport interface UseSliderProps {\n  /**\n   * The minimum allowed value of the slider. Cannot be greater than max.\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum allowed value of the slider. Cannot be less than min.\n   * @default 100\n   */\n  max?: number\n  /**\n   * The step in which increments/decrements have to be made\n   * @default 1\n   */\n  step?: number\n  /**\n   * The value of the slider in controlled mode\n   */\n  value?: number\n  /**\n   * The initial value of the slider in uncontrolled mode\n   */\n  defaultValue?: number\n  /**\n   * Orientation of the slider\n   * @default \"horizontal\"\n   */\n  orientation?: \"horizontal\" | \"vertical\"\n  /**\n   * If `true`, the value will be incremented or decremented in reverse.\n   */\n  isReversed?: boolean\n  /**\n   * Function called when the user starts selecting a new value (by dragging or clicking)\n   */\n  onChangeStart?(value: number): void\n  /**\n   * Function called when the user is done selecting a new value (by dragging or clicking)\n   */\n  onChangeEnd?(value: number): void\n  /**\n   * Function called whenever the slider value changes  (by dragging or clicking)\n   */\n  onChange?(value: number): void\n  /**\n   * The base `id` to use for the slider and its components\n   */\n  id?: string\n  /**\n   * The name attribute of the hidden `input` field.\n   * This is particularly useful in forms\n   */\n  name?: string\n  /**\n   * If `true`, the slider will be disabled\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the slider will be in `read-only` state\n   * @default false\n   */\n  isReadOnly?: boolean\n  /**\n   * Function that returns the `aria-valuetext` for screen readers.\n   * It is mostly used to generate a more human-readable\n   * representation of the value for assistive technologies\n   */\n  getAriaValueText?(value: number): string\n  /**\n   * If `false`, the slider handle will not capture focus when value changes.\n   * @default true\n   */\n  focusThumbOnChange?: boolean\n  /**\n   * The static string to use used for `aria-valuetext`\n   */\n  \"aria-valuetext\"?: string\n  /**\n   * The static string to use used for `aria-label`\n   * if no visible label is used.\n   */\n  \"aria-label\"?: string\n  /**\n   * The static string `aria-labelledby` that points to the\n   * ID of the element that serves as label for the slider\n   */\n  \"aria-labelledby\"?: string\n  /**\n   * The writing mode\n   * @default \"ltr\"\n   */\n  direction?: \"ltr\" | \"rtl\"\n}\n\nexport interface SliderState {\n  value: number\n  isFocused: boolean\n  isDragging: boolean\n}\n\nexport interface SliderActions {\n  stepUp(step?: number): void\n  stepDown(step?: number): void\n  reset(): void\n  stepTo(value: number): void\n}\n\n/**\n * React hook that implements an accessible range slider.\n *\n * It is an alternative to `<input type=\"range\" />`, and returns\n * prop getters for the component parts\n *\n * @see Docs     https://chakra-ui.com/docs/form/slider\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/slider/\n */\nexport function useSlider(props: UseSliderProps) {\n  const {\n    min = 0,\n    max = 100,\n    onChange,\n    value: valueProp,\n    defaultValue,\n    isReversed: isReversedProp,\n    direction = \"ltr\",\n    orientation = \"horizontal\",\n    id: idProp,\n    isDisabled,\n    isReadOnly,\n    onChangeStart: onChangeStartProp,\n    onChangeEnd: onChangeEndProp,\n    step = 1,\n    getAriaValueText: getAriaValueTextProp,\n    \"aria-valuetext\": ariaValueText,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    name,\n    focusThumbOnChange = true,\n    ...htmlProps\n  } = props\n\n  const onChangeStart = useCallbackRef(onChangeStartProp)\n  const onChangeEnd = useCallbackRef(onChangeEndProp)\n  const getAriaValueText = useCallbackRef(getAriaValueTextProp)\n\n  const isReversed = getIsReversed({\n    isReversed: isReversedProp,\n    direction,\n    orientation,\n  })\n\n  /**\n   * Enable the slider handle controlled and uncontrolled scenarios\n   */\n  const [computedValue, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue ?? getDefaultValue(min, max),\n    onChange,\n  })\n\n  const [isDragging, setDragging] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const isInteractive = !(isDisabled || isReadOnly)\n\n  const tenSteps = (max - min) / 10\n  const oneStep = step || (max - min) / 100\n\n  /**\n   * Constrain the value because it can't be less than min\n   * or greater than max\n   */\n  const value = clampValue(computedValue, min, max)\n  const reversedValue = max - value + min\n  const trackValue = isReversed ? reversedValue : value\n  const thumbPercent = valueToPercent(trackValue, min, max)\n\n  const isVertical = orientation === \"vertical\"\n\n  const stateRef = useLatestRef({\n    min,\n    max,\n    step,\n    isDisabled,\n    value,\n    isInteractive,\n    isReversed,\n    isVertical,\n    eventSource: null as \"pointer\" | \"keyboard\" | null,\n    focusThumbOnChange,\n    orientation,\n  })\n\n  /**\n   * Let's keep a reference to the slider track and thumb\n   */\n  const trackRef = useRef<HTMLElement>(null)\n  const thumbRef = useRef<HTMLElement>(null)\n  const rootRef = useRef<HTMLElement>(null)\n\n  /**\n   * Generate unique ids for component parts\n   */\n  const reactId = useId()\n  const uuid = idProp ?? reactId\n  const [thumbId, trackId] = [`slider-thumb-${uuid}`, `slider-track-${uuid}`]\n\n  /**\n   * Get relative value of slider from the event by tracking\n   * how far you clicked within the track to determine the value\n   *\n   * @todo - Refactor this later on to use info from pan session\n   */\n\n  const getValueFromPointer = useCallback(\n    (event: any) => {\n      if (!trackRef.current) return\n\n      const state = stateRef.current\n      state.eventSource = \"pointer\"\n\n      const trackRect = trackRef.current.getBoundingClientRect()\n      const { clientX, clientY } = event.touches?.[0] ?? event\n\n      const diff = isVertical\n        ? trackRect.bottom - clientY\n        : clientX - trackRect.left\n\n      const length = isVertical ? trackRect.height : trackRect.width\n      let percent = diff / length\n\n      if (isReversed) {\n        percent = 1 - percent\n      }\n\n      let nextValue = percentToValue(percent, state.min, state.max)\n\n      if (state.step) {\n        nextValue = parseFloat(\n          roundValueToStep(nextValue, state.min, state.step),\n        )\n      }\n\n      nextValue = clampValue(nextValue, state.min, state.max)\n\n      return nextValue\n    },\n    [isVertical, isReversed, stateRef],\n  )\n\n  const constrain = useCallback(\n    (value: number) => {\n      const state = stateRef.current\n      if (!state.isInteractive) return\n      value = parseFloat(roundValueToStep(value, state.min, oneStep))\n      value = clampValue(value, state.min, state.max)\n      setValue(value)\n    },\n    [oneStep, setValue, stateRef],\n  )\n\n  const actions: SliderActions = useMemo(\n    () => ({\n      stepUp(step = oneStep) {\n        const next = isReversed ? value - step : value + step\n        constrain(next)\n      },\n      stepDown(step = oneStep) {\n        const next = isReversed ? value + step : value - step\n        constrain(next)\n      },\n      reset() {\n        constrain(defaultValue || 0)\n      },\n      stepTo(value: number) {\n        constrain(value)\n      },\n    }),\n    [constrain, isReversed, value, oneStep, defaultValue],\n  )\n\n  /**\n   * Keyboard interaction to ensure users can operate\n   * the slider using only their keyboard.\n   */\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const state = stateRef.current\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        ArrowRight: () => actions.stepUp(),\n        ArrowUp: () => actions.stepUp(),\n        ArrowLeft: () => actions.stepDown(),\n        ArrowDown: () => actions.stepDown(),\n        PageUp: () => actions.stepUp(tenSteps),\n        PageDown: () => actions.stepDown(tenSteps),\n        Home: () => constrain(state.min),\n        End: () => constrain(state.max),\n      }\n\n      const action = keyMap[event.key]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n        state.eventSource = \"keyboard\"\n      }\n    },\n    [actions, constrain, tenSteps, stateRef],\n  )\n\n  /**\n   * ARIA (Optional): To define a human-readable representation of the value,\n   * we allow users pass aria-valuetext.\n   */\n  const valueText = getAriaValueText?.(value) ?? ariaValueText\n\n  /**\n   * Measure the dimensions of the thumb, so\n   * we can center it within the track properly\n   */\n  const thumbSize = useSize(thumbRef)\n\n  /**\n   * Compute styles for all component parts.\n   */\n  const { getThumbStyle, rootStyle, trackStyle, innerTrackStyle } =\n    useMemo(() => {\n      const state = stateRef.current\n\n      const thumbRect = thumbSize ?? { width: 0, height: 0 }\n      return getStyles({\n        isReversed,\n        orientation: state.orientation,\n        thumbRects: [thumbRect],\n        thumbPercents: [thumbPercent],\n      })\n    }, [isReversed, thumbSize, thumbPercent, stateRef])\n\n  const focusThumb = useCallback(() => {\n    const state = stateRef.current\n    if (state.focusThumbOnChange) {\n      setTimeout(() => thumbRef.current?.focus())\n    }\n  }, [stateRef])\n\n  useUpdateEffect(() => {\n    const state = stateRef.current\n    focusThumb()\n    if (state.eventSource === \"keyboard\") {\n      onChangeEnd?.(state.value)\n    }\n  }, [value, onChangeEnd])\n\n  function setValueFromPointer(event: MouseEvent | TouchEvent | PointerEvent) {\n    const nextValue = getValueFromPointer(event)\n    if (nextValue != null && nextValue !== stateRef.current.value) {\n      setValue(nextValue)\n    }\n  }\n\n  usePanEvent(rootRef, {\n    onPanSessionStart(event) {\n      const state = stateRef.current\n      if (!state.isInteractive) return\n      setDragging(true)\n      focusThumb()\n      setValueFromPointer(event)\n      onChangeStart?.(state.value)\n    },\n    onPanSessionEnd() {\n      const state = stateRef.current\n      if (!state.isInteractive) return\n      setDragging(false)\n      onChangeEnd?.(state.value)\n    },\n    onPan(event) {\n      const state = stateRef.current\n      if (!state.isInteractive) return\n      setValueFromPointer(event)\n    },\n  })\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ...htmlProps,\n        ref: mergeRefs(ref, rootRef),\n        tabIndex: -1,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        \"data-focused\": dataAttr(isFocused),\n        style: {\n          ...props.style,\n          ...rootStyle,\n        },\n      }\n    },\n    [htmlProps, isDisabled, isFocused, rootStyle],\n  )\n\n  const getTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(ref, trackRef),\n        id: trackId,\n        \"data-disabled\": dataAttr(isDisabled),\n        style: {\n          ...props.style,\n          ...trackStyle,\n        },\n      }\n    },\n    [isDisabled, trackId, trackStyle],\n  )\n\n  const getInnerTrackProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref,\n        style: {\n          ...props.style,\n          ...innerTrackStyle,\n        },\n      }\n    },\n    [innerTrackStyle],\n  )\n\n  const getThumbProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(ref, thumbRef),\n        role: \"slider\",\n        tabIndex: isInteractive ? 0 : undefined,\n        id: thumbId,\n        \"data-active\": dataAttr(isDragging),\n        \"aria-valuetext\": valueText,\n        \"aria-valuemin\": min,\n        \"aria-valuemax\": max,\n        \"aria-valuenow\": value,\n        \"aria-orientation\": orientation,\n        \"aria-disabled\": ariaAttr(isDisabled),\n        \"aria-readonly\": ariaAttr(isReadOnly),\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabel ? undefined : ariaLabelledBy,\n        style: {\n          ...props.style,\n          ...getThumbStyle(0),\n        },\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(props.onFocus, () => setFocused(true)),\n        onBlur: callAllHandlers(props.onBlur, () => setFocused(false)),\n      }\n    },\n    [\n      isInteractive,\n      thumbId,\n      isDragging,\n      valueText,\n      min,\n      max,\n      value,\n      orientation,\n      isDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      getThumbStyle,\n      onKeyDown,\n    ],\n  )\n\n  const getMarkerProps: RequiredPropGetter<{ value: number }> = useCallback(\n    (props, ref = null) => {\n      const isInRange = !(props.value < min || props.value > max)\n      const isHighlighted = value >= props.value\n      const markerPercent = valueToPercent(props.value, min, max)\n\n      const markerStyle: React.CSSProperties = {\n        position: \"absolute\",\n        pointerEvents: \"none\",\n        ...orient({\n          orientation: orientation,\n          vertical: {\n            bottom: isReversed\n              ? `${100 - markerPercent}%`\n              : `${markerPercent}%`,\n          },\n          horizontal: {\n            left: isReversed ? `${100 - markerPercent}%` : `${markerPercent}%`,\n          },\n        }),\n      }\n\n      return {\n        ...props,\n        ref,\n        role: \"presentation\",\n        \"aria-hidden\": true,\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(!isInRange),\n        \"data-highlighted\": dataAttr(isHighlighted),\n        style: {\n          ...props.style,\n          ...markerStyle,\n        },\n      }\n    },\n    [isDisabled, isReversed, max, min, orientation, value],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, ref = null) => {\n      return {\n        ...props,\n        ref,\n        type: \"hidden\",\n        value,\n        name,\n      }\n    },\n    [name, value],\n  )\n\n  const state: SliderState = { value, isFocused, isDragging }\n\n  return {\n    state,\n    actions,\n    getRootProps,\n    getTrackProps,\n    getInnerTrackProps,\n    getThumbProps,\n    getMarkerProps,\n    getInputProps,\n  }\n}\n\nexport type UseSliderReturn = ReturnType<typeof useSlider>\n\nfunction orient(options: {\n  orientation: UseSliderProps[\"orientation\"]\n  vertical: React.CSSProperties\n  horizontal: React.CSSProperties\n}) {\n  const { orientation, vertical, horizontal } = options\n  return orientation === \"vertical\" ? vertical : horizontal\n}\n\n/**\n * The browser <input type=\"range\" /> calculates\n * the default value of a slider by using mid-point\n * between the min and the max.\n *\n * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/range\n */\nfunction getDefaultValue(min: number, max: number) {\n  return max < min ? min : min + (max - min) / 2\n}\n"]},"metadata":{},"sourceType":"module"}