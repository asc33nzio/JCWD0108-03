{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { useMemo } from \"react\";\n\nfunction assignRef(ref, value) {\n  if (ref == null) return;\n\n  if (typeof ref === \"function\") {\n    ref(value);\n    return;\n  }\n\n  try {\n    ref.current = value;\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`);\n  }\n}\n\nfunction mergeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n\n  return node => {\n    refs.forEach(ref => {\n      assignRef(ref, node);\n    });\n  };\n}\n\nfunction useMergeRefs() {\n  for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    refs[_key2] = arguments[_key2];\n  }\n\n  return useMemo(() => mergeRefs(...refs), refs);\n}\n\nexport { assignRef, mergeRefs, useMergeRefs };","map":{"version":3,"mappings":";;AAAA,SAASA,OAAT,QAAwB,OAAxB;;AAIO,SAASC,SAAT,CACLC,GADK,EAELC,KAFK,EAGL;EACA,IAAID,OAAO,IAAX,EAAiB;;EAEjB,IAAI,OAAOA,GAAP,KAAe,UAAnB,EAA+B;IAC7BA,IAAIC,KAAJ;IACA;EACF;;EAEA,IAAI;IACFD,IAAIE,OAAJ,GAAcD,KAAd;EACF,CAFA,CAEA,OAASE,KAAT,EAAE;IACA,MAAM,IAAIC,KAAJ,CAAU,wBAAwBH,kBAAkBD,MAApD,CAAN;EACF;AACF;;AAEO,SAASK,SAAT,GAAmE;EAAA,kCAA1CC,IAA0C;IAA1CA,IAA0C;EAAA;;EACxE,OAAQC,IAAD,IAAoB;IACzBD,KAAKE,OAAL,CAAcR,GAAD,IAAS;MACpBD,UAAUC,GAAV,EAAeO,IAAf;IACD,CAFD;EAGF,CAJA;AAKF;;AAEO,SAASE,YAAT,GAAsE;EAAA,mCAA1CH,IAA0C;IAA1CA,IAA0C;EAAA;;EAE3E,OAAOR,QAAQ,MAAMO,UAAU,GAAGC,IAAb,CAAd,EAAkCA,IAAlC,CAAP;AACF","names":["useMemo","assignRef","ref","value","current","error","Error","mergeRefs","refs","node","forEach","useMergeRefs"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\react-use-merge-refs\\src\\index.ts"],"sourcesContent":["import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n"]},"metadata":{},"sourceType":"module"}