{"ast":null,"code":"'use client'; // src/text.tsx\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Text = forwardRef(function Text2(props, ref) {\n  const styles = useStyleConfig(\"Text\", props);\n  const {\n    className,\n    align,\n    decoration,\n    casing,\n    ...rest\n  } = omitThemingProps(props);\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing\n  });\n  return /* @__PURE__ */jsx(chakra.p, {\n    ref,\n    className: cx(\"chakra-text\", props.className),\n    ...aliasedProps,\n    ...rest,\n    __css: styles\n  });\n});\nText.displayName = \"Text\";\nexport { Text };","map":{"version":3,"mappings":";;AAAA,SACEA,MADF,EAEEC,UAFF,EAGEC,gBAHF,EAMEC,cANF,QAQO,mBARP;AASA,SAASC,EAAT,QAAmB,yBAAnB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AAqCI;AAZG,IAAMC,OAAOL,WAA2B,SAASK,KAAT,CAAcC,KAAd,EAAqBC,GAArB,EAA0B;EACvE,MAAMC,SAASN,eAAe,MAAf,EAAuBI,KAAvB,CAAf;EACA,MAAM;IAAEG,SAAF;IAAaC,KAAb;IAAoBC,UAApB;IAAgCC,MAAhC;IAAwC,GAAGC;EAA3C,IACJZ,iBAAiBK,KAAjB,CADF;EAGA,MAAMQ,eAAeV,QAAQ;IAC3BW,WAAWT,MAAMI,KADU;IAE3BM,gBAAgBV,MAAMK,UAFK;IAG3BM,eAAeX,MAAMM;EAHM,CAAR,CAArB;EAMA,OACE,mBAACb,OAAOmB,CAAR,EAAC;IACCX,GADD;IAECE,WAAWN,GAAG,aAAH,EAAkBG,MAAMG,SAAxB,CAFZ;IAGE,GAAGK,YAHL;IAIE,GAAGD,IAJL;IAKCM,OAAOX;EALR,CAAD,CADF;AASD,CApBmB,CAAb;AAsBPH,KAAKe,WAAL,GAAmB,MAAnB","names":["chakra","forwardRef","omitThemingProps","useStyleConfig","cx","compact","Text","props","ref","styles","className","align","decoration","casing","rest","aliasedProps","textAlign","textDecoration","textTransform","p","__css","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\layout\\src\\text.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  SystemProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\n\nexport interface TextProps extends HTMLChakraProps<\"p\">, ThemingProps<\"Text\"> {\n  /**\n   * The CSS `text-align` property\n   * @type SystemProps[\"textAlign\"]\n   */\n  align?: SystemProps[\"textAlign\"]\n  /**\n   * The CSS `text-decoration` property\n   * @type SystemProps[\"textDecoration\"]\n   */\n  decoration?: SystemProps[\"textDecoration\"]\n  /**\n   * The CSS `text-transform` property\n   * @type SystemProps[\"textTransform\"]\n   */\n  casing?: SystemProps[\"textTransform\"]\n}\n\n/**\n * Used to render texts or paragraphs.\n *\n * @see Docs https://chakra-ui.com/text\n */\nexport const Text = forwardRef<TextProps, \"p\">(function Text(props, ref) {\n  const styles = useStyleConfig(\"Text\", props)\n  const { className, align, decoration, casing, ...rest } =\n    omitThemingProps(props)\n\n  const aliasedProps = compact({\n    textAlign: props.align,\n    textDecoration: props.decoration,\n    textTransform: props.casing,\n  })\n\n  return (\n    <chakra.p\n      ref={ref}\n      className={cx(\"chakra-text\", props.className)}\n      {...aliasedProps}\n      {...rest}\n      __css={styles}\n    />\n  )\n})\n\nText.displayName = \"Text\"\n"]},"metadata":{},"sourceType":"module"}