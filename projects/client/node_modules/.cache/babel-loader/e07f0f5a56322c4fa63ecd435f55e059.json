{"ast":null,"code":"import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n  constructor() {\n    this.members = [];\n  }\n\n  add(node) {\n    addUniqueItem(this.members, node);\n    node.scheduleRender();\n  }\n\n  remove(node) {\n    removeItem(this.members, node);\n\n    if (node === this.prevLead) {\n      this.prevLead = undefined;\n    }\n\n    if (node === this.lead) {\n      const prevLead = this.members[this.members.length - 1];\n\n      if (prevLead) {\n        this.promote(prevLead);\n      }\n    }\n  }\n\n  relegate(node) {\n    const indexOfNode = this.members.findIndex(member => node === member);\n    if (indexOfNode === 0) return false;\n    /**\n     * Find the next projection node that is present\n     */\n\n    let prevLead;\n\n    for (let i = indexOfNode; i >= 0; i--) {\n      const member = this.members[i];\n\n      if (member.isPresent !== false) {\n        prevLead = member;\n        break;\n      }\n    }\n\n    if (prevLead) {\n      this.promote(prevLead);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  promote(node, preserveFollowOpacity) {\n    const prevLead = this.lead;\n    if (node === prevLead) return;\n    this.prevLead = prevLead;\n    this.lead = node;\n    node.show();\n\n    if (prevLead) {\n      prevLead.instance && prevLead.scheduleRender();\n      node.scheduleRender();\n      node.resumeFrom = prevLead;\n\n      if (preserveFollowOpacity) {\n        node.resumeFrom.preserveOpacity = true;\n      }\n\n      if (prevLead.snapshot) {\n        node.snapshot = prevLead.snapshot;\n        node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n      }\n\n      if (node.root && node.root.isUpdating) {\n        node.isLayoutDirty = true;\n      }\n\n      const {\n        crossfade\n      } = node.options;\n\n      if (crossfade === false) {\n        prevLead.hide();\n      }\n      /**\n       * TODO:\n       *   - Test border radius when previous node was deleted\n       *   - boxShadow mixing\n       *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n       *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n       *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n       * ---\n       *   - Crossfade opacity of root nodes\n       *   - layoutId changes after animation\n       *   - layoutId changes mid animation\n       */\n\n    }\n  }\n\n  exitAnimationComplete() {\n    this.members.forEach(node => {\n      const {\n        options,\n        resumingFrom\n      } = node;\n      options.onExitComplete && options.onExitComplete();\n\n      if (resumingFrom) {\n        resumingFrom.options.onExitComplete && resumingFrom.options.onExitComplete();\n      }\n    });\n  }\n\n  scheduleRender() {\n    this.members.forEach(node => {\n      node.instance && node.scheduleRender(false);\n    });\n  }\n  /**\n   * Clear any leads that have been removed this render to prevent them from being\n   * used in future animations and to prevent memory leaks\n   */\n\n\n  removeLeadSnapshot() {\n    if (this.lead && this.lead.snapshot) {\n      this.lead.snapshot = undefined;\n    }\n  }\n\n}\n\nexport { NodeStack };","map":{"version":3,"names":["addUniqueItem","removeItem","NodeStack","constructor","members","add","node","scheduleRender","remove","prevLead","undefined","lead","length","promote","relegate","indexOfNode","findIndex","member","i","isPresent","preserveFollowOpacity","show","instance","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","root","isUpdating","isLayoutDirty","crossfade","options","hide","exitAnimationComplete","forEach","resumingFrom","onExitComplete","removeLeadSnapshot"],"sources":["C:/Purwadhika/JCWD Bandung/4. REAL PROJECT/JCWD0108-03/node_modules/framer-motion/dist/es/projection/shared/stack.mjs"],"sourcesContent":["import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n            }\n            if (node.root && node.root.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            const { options, resumingFrom } = node;\n            options.onExitComplete && options.onExitComplete();\n            if (resumingFrom) {\n                resumingFrom.options.onExitComplete &&\n                    resumingFrom.options.onExitComplete();\n            }\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}