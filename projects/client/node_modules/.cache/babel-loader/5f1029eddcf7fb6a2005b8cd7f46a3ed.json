{"ast":null,"code":"'use client'; // src/storage-manager.ts\n\nvar STORAGE_KEY = \"chakra-ui-color-mode\";\n\nfunction createLocalStorageManager(key) {\n  return {\n    ssr: false,\n    type: \"localStorage\",\n\n    get(init) {\n      if (!(globalThis == null ? void 0 : globalThis.document)) return init;\n      let value;\n\n      try {\n        value = localStorage.getItem(key) || init;\n      } catch (e) {}\n\n      return value || init;\n    },\n\n    set(value) {\n      try {\n        localStorage.setItem(key, value);\n      } catch (e) {}\n    }\n\n  };\n}\n\nvar localStorageManager = createLocalStorageManager(STORAGE_KEY);\n\nfunction parseCookie(cookie, key) {\n  const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`));\n  return match == null ? void 0 : match[2];\n}\n\nfunction createCookieStorageManager(key, cookie) {\n  return {\n    ssr: !!cookie,\n    type: \"cookie\",\n\n    get(init) {\n      if (cookie) return parseCookie(cookie, key);\n      if (!(globalThis == null ? void 0 : globalThis.document)) return init;\n      return parseCookie(document.cookie, key) || init;\n    },\n\n    set(value) {\n      document.cookie = `${key}=${value}; max-age=31536000; path=/`;\n    }\n\n  };\n}\n\nvar cookieStorageManager = createCookieStorageManager(STORAGE_KEY);\n\nvar cookieStorageManagerSSR = cookie => createCookieStorageManager(STORAGE_KEY, cookie);\n\nexport { STORAGE_KEY, createLocalStorageManager, localStorageManager, createCookieStorageManager, cookieStorageManager, cookieStorageManagerSSR };","map":{"version":3,"mappings":";;AAEO,IAAMA,cAAc,sBAApB;;AAWA,SAASC,yBAAT,CAAmCC,GAAnC,EAAgE;EACrE,OAAO;IACLC,KAAK,KADA;IAELC,MAAM,cAFD;;IAGLC,IAAIC,IAAJ,EAAW;MACT,IAAI,EAACC,yCAAYC,QAAb,CAAJ,EAA2B,OAAOF,IAAP;MAC3B,IAAIG,KAAJ;;MACA,IAAI;QACFA,QAAQC,aAAaC,OAAb,CAAqBT,GAArB,KAA6BI,IAArC;MACF,CAFA,CAEA,OAASM,CAAT,EAAE,CAEF;;MAEA,OAAOH,SAASH,IAAhB;IACF,CAbK;;IAcLO,IAAIJ,KAAJ,EAAW;MACT,IAAI;QACFC,aAAaI,OAAb,CAAqBZ,GAArB,EAA0BO,KAA1B;MACF,CAFA,CAEA,OAASG,CAAT,EAAE,CAEF;IACF;;EApBK,CAAP;AAsBF;;AAEO,IAAMG,sBAAsBd,0BAA0BD,WAA1B,CAA5B;;AAEP,SAASgB,WAAT,CAAqBC,MAArB,EAAqCf,GAArC,EAAkE;EAChE,MAAMgB,QAAQD,OAAOC,KAAP,CAAa,IAAIC,MAAJ,CAAW,QAAQjB,aAAnB,CAAb,CAAd;EACA,OAAOgB,+BAAQ,CAAR,CAAP;AACF;;AAEO,SAASE,0BAAT,CACLlB,GADK,EAELe,MAFK,EAGW;EAChB,OAAO;IACLd,KAAK,CAAC,CAACc,MADF;IAELb,MAAM,QAFD;;IAGLC,IAAIC,IAAJ,EAA2B;MACzB,IAAIW,MAAJ,EAAY,OAAOD,YAAYC,MAAZ,EAAoBf,GAApB,CAAP;MACZ,IAAI,EAACK,yCAAYC,QAAb,CAAJ,EAA2B,OAAOF,IAAP;MAC3B,OAAOU,YAAYR,SAASS,MAArB,EAA6Bf,GAA7B,KAAqCI,IAA5C;IACF,CAPK;;IAQLO,IAAIJ,KAAJ,EAAW;MACTD,SAASS,MAAT,GAAkB,GAAGf,OAAOO,iCAA5B;IACF;;EAVK,CAAP;AAYF;;AAEO,IAAMY,uBAAuBD,2BAA2BpB,WAA3B,CAA7B;;AAEA,IAAMsB,0BAA2BL,MAAD,IACrCG,2BAA2BpB,WAA3B,EAAwCiB,MAAxC,CADK","names":["STORAGE_KEY","createLocalStorageManager","key","ssr","type","get","init","globalThis","document","value","localStorage","getItem","e","set","setItem","localStorageManager","parseCookie","cookie","match","RegExp","createCookieStorageManager","cookieStorageManager","cookieStorageManagerSSR"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\color-mode\\src\\storage-manager.ts"],"sourcesContent":["import { ColorMode } from \"./color-mode-types\"\n\nexport const STORAGE_KEY = \"chakra-ui-color-mode\"\n\ntype MaybeColorMode = ColorMode | undefined\n\nexport interface StorageManager {\n  type: \"cookie\" | \"localStorage\"\n  ssr?: boolean\n  get(init?: ColorMode): MaybeColorMode\n  set(value: ColorMode | \"system\"): void\n}\n\nexport function createLocalStorageManager(key: string): StorageManager {\n  return {\n    ssr: false,\n    type: \"localStorage\",\n    get(init?) {\n      if (!globalThis?.document) return init\n      let value: any\n      try {\n        value = localStorage.getItem(key) || init\n      } catch (e) {\n        // no op\n      }\n\n      return value || init\n    },\n    set(value) {\n      try {\n        localStorage.setItem(key, value)\n      } catch (e) {\n        // no op\n      }\n    },\n  }\n}\n\nexport const localStorageManager = createLocalStorageManager(STORAGE_KEY)\n\nfunction parseCookie(cookie: string, key: string): MaybeColorMode {\n  const match = cookie.match(new RegExp(`(^| )${key}=([^;]+)`))\n  return match?.[2] as MaybeColorMode\n}\n\nexport function createCookieStorageManager(\n  key: string,\n  cookie?: string,\n): StorageManager {\n  return {\n    ssr: !!cookie,\n    type: \"cookie\",\n    get(init?): MaybeColorMode {\n      if (cookie) return parseCookie(cookie, key)\n      if (!globalThis?.document) return init\n      return parseCookie(document.cookie, key) || init\n    },\n    set(value) {\n      document.cookie = `${key}=${value}; max-age=31536000; path=/`\n    },\n  }\n}\n\nexport const cookieStorageManager = createCookieStorageManager(STORAGE_KEY)\n\nexport const cookieStorageManagerSSR = (cookie: string) =>\n  createCookieStorageManager(STORAGE_KEY, cookie)\n"]},"metadata":{},"sourceType":"module"}