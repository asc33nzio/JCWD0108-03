{"ast":null,"code":"'use client'; // src/providers.tsx\n\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { Global, ThemeProvider as EmotionThemeProvider } from \"@emotion/react\";\nimport { useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\n\nfunction ThemeProvider(props) {\n  const {\n    cssVarsRoot,\n    theme,\n    children\n  } = props;\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme]);\n  return /* @__PURE__ */jsxs(EmotionThemeProvider, {\n    theme: computedTheme,\n    children: [/* @__PURE__ */jsx(CSSVars, {\n      root: cssVarsRoot\n    }), children]\n  });\n}\n\nfunction CSSVars(_ref) {\n  let {\n    root = \":host, :root\"\n  } = _ref;\n  const selector = [root, `[data-theme]`].join(\",\");\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => ({\n      [selector]: theme.__cssVars\n    })\n  });\n}\n\nvar [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\n\nfunction createStylesContext(componentName) {\n  return createContext({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `\n  });\n}\n\nfunction GlobalStyle() {\n  const {\n    colorMode\n  } = useColorMode();\n  return /* @__PURE__ */jsx(Global, {\n    styles: theme => {\n      const styleObjectOrFn = get(theme, \"styles.global\");\n      const globalStyles = runIfFn(styleObjectOrFn, {\n        theme,\n        colorMode\n      });\n      if (!globalStyles) return void 0;\n      const styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n}\n\nexport { ThemeProvider, CSSVars, StylesProvider, useStyles, createStylesContext, GlobalStyle };","map":{"version":3,"mappings":";;AAAA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,aAAT,QAAmD,wBAAnD;AACA,SAASC,GAAT,EAAcC,QAAd,QAAiD,0BAAjD;AACA,SAASC,eAAeC,GAAxB,EAA6BC,OAA7B,QAA4C,kBAA5C;AACA,SACEC,MADF,EAGEC,iBAAiBC,oBAHnB,QAKO,gBALP;AAMA,SAASC,OAAT,QAAwB,OAAxB;AAUI,SACEC,GADF;;AAJG,SAASH,aAAT,CAAuBI,KAAvB,EAA+D;EACpE,MAAM;IAAEC,WAAF;IAAeC,KAAf;IAAsBC;EAAtB,IAAmCH,KAAzC;EACA,MAAMI,gBAAgBN,QAAQ,MAAMP,SAASW,KAAT,CAAd,EAA+B,CAACA,KAAD,CAA/B,CAAtB;EACA,OACE,oBAACL,oBAAD,EAAC;IAAqBK,OAAOE,aAA5B;IACCD,8BAACE,OAAD,EAAC;MAAQC,MAAML;IAAd,CAAD,GACCE,QADD;EADD,CAAD,CADF;AAMF;;AAUO,SAASE,OAAT,OAAuE;EAAA,IAAtD;IAAEC,OAAO;EAAT,CAAsD;EAI5E,MAAMC,WAAW,CAACD,IAAD,EAAO,cAAP,EAAuBE,IAAvB,CAA4B,GAA5B,CAAjB;EACA,OAAO,mBAACb,MAAD,EAAC;IAAOc,QAASP,KAAD,KAAiB;MAAE,CAACK,QAAD,GAAYL,MAAMQ;IAApB,CAAjB;EAAf,CAAD,CAAP;AACF;;AAaA,IAAM,CAACC,cAAD,EAAiBC,SAAjB,IAA8BvB,cAElC;EACAwB,MAAM,eADN;EAEAC,cACE;AAHF,CAFkC,CAApC;;AAeO,SAASC,mBAAT,CACLC,aADK,EAEqB;EAC1B,OAAO3B,cAAiD;IACtDwB,MAAM,GAAGG,4BAD6C;IAEtDF,cAAc,kFAAkFE;EAF1C,CAAjD,CAAP;AAIF;;AAUO,SAASC,WAAT,GAAoC;EACzC,MAAM;IAAEC;EAAF,IAAgB9B,cAAtB;EACA,OACE,mBAACO,MAAD,EAAC;IACCc,QAASP,KAAD,IAAgB;MACtB,MAAMiB,kBAAkB1B,IAAIS,KAAJ,EAAW,eAAX,CAAxB;MACA,MAAMkB,eAAe1B,QAAQyB,eAAR,EAAyB;QAAEjB,KAAF;QAASgB;MAAT,CAAzB,CAArB;MACA,IAAI,CAACE,YAAL,EAAmB,OAAO,MAAP;MACnB,MAAMX,SAASnB,IAAI8B,YAAJ,EAAkBlB,KAAlB,CAAf;MACA,OAAOO,MAAP;IACF;EAPD,CAAD,CADF;AAWF","names":["useColorMode","createContext","css","toCSSVar","memoizedGet","get","runIfFn","Global","ThemeProvider","EmotionThemeProvider","useMemo","jsx","props","cssVarsRoot","theme","children","computedTheme","CSSVars","root","selector","join","styles","__cssVars","StylesProvider","useStyles","name","errorMessage","createStylesContext","componentName","GlobalStyle","colorMode","styleObjectOrFn","globalStyles"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\system\\src\\providers.tsx"],"sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { createContext, CreateContextReturn } from \"@chakra-ui/react-utils\"\nimport { css, toCSSVar, SystemStyleObject } from \"@chakra-ui/styled-system\"\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\"\nimport {\n  Global,\n  Interpolation,\n  ThemeProvider as EmotionThemeProvider,\n  ThemeProviderProps as EmotionThemeProviderProps,\n} from \"@emotion/react\"\nimport { useMemo } from \"react\"\n\nexport interface ThemeProviderProps extends EmotionThemeProviderProps {\n  cssVarsRoot?: string\n}\n\nexport function ThemeProvider(props: ThemeProviderProps): JSX.Element {\n  const { cssVarsRoot, theme, children } = props\n  const computedTheme = useMemo(() => toCSSVar(theme), [theme])\n  return (\n    <EmotionThemeProvider theme={computedTheme}>\n      <CSSVars root={cssVarsRoot} />\n      {children}\n    </EmotionThemeProvider>\n  )\n}\n\nexport interface CSSVarsProps {\n  /**\n   * The element to attach the CSS custom properties to.\n   * @default \":host, :root\"\n   */\n  root?: string\n}\n\nexport function CSSVars({ root = \":host, :root\" }: CSSVarsProps): JSX.Element {\n  /**\n   * Append color mode selector to allow semantic tokens to change according to the color mode\n   */\n  const selector = [root, `[data-theme]`].join(\",\")\n  return <Global styles={(theme: any) => ({ [selector]: theme.__cssVars })} />\n}\n\n/**\n * @deprecated - Prefer to use `createStylesContext` to provide better error messages\n *\n * @example\n *\n * ```jsx\n * import { createStylesContext } from \"@chakra-ui/react\"\n *\n * const [StylesProvider, useStyles] = createStylesContext(\"Component\")\n * ```\n */\nconst [StylesProvider, useStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\n\nexport { StylesProvider, useStyles }\n\n/**\n * Helper function that creates context with a standardized errorMessage related to the component\n * @param componentName\n * @returns [StylesProvider, useStyles]\n */\nexport function createStylesContext(\n  componentName: string,\n): CreateStyleContextReturn {\n  return createContext<Record<string, SystemStyleObject>>({\n    name: `${componentName}StylesContext`,\n    errorMessage: `useStyles: \"styles\" is undefined. Seems you forgot to wrap the components in \"<${componentName} />\" `,\n  })\n}\n\nexport type CreateStyleContextReturn = CreateContextReturn<\n  Record<string, SystemStyleObject>\n>\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport function GlobalStyle(): JSX.Element {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme: any) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}