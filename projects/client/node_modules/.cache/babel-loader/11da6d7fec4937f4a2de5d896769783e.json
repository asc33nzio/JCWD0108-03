{"ast":null,"code":"'use client';\n\nimport { useMediaQuery } from \"./chunk-57I6FYPZ.mjs\"; // src/use-breakpoint.ts\n\nimport { useTheme } from \"@chakra-ui/system\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\n\nfunction useBreakpoint(arg) {\n  var _a, _b;\n\n  const opts = isObject(arg) ? arg : {\n    fallback: arg != null ? arg : \"base\"\n  };\n  const theme = useTheme();\n\n  const breakpoints = theme.__breakpoints.details.map(_ref => {\n    let {\n      minMaxQuery,\n      breakpoint\n    } = _ref;\n    return {\n      breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\")\n    };\n  });\n\n  const fallback = breakpoints.map(bp => bp.breakpoint === opts.fallback);\n  const values = useMediaQuery(breakpoints.map(bp => bp.query), {\n    fallback,\n    ssr: opts.ssr\n  });\n  const index = values.findIndex(value => value == true);\n  return (_b = (_a = breakpoints[index]) == null ? void 0 : _a.breakpoint) != null ? _b : opts.fallback;\n}\n\nexport { useBreakpoint };","map":{"version":3,"mappings":";;;;AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,SAASC,QAAT,QAAyB,yBAAzB;;AAcO,SAASC,aAAT,CAAuBC,GAAvB,EAA4D;EAfnE;;EAgBE,MAAMC,OAAOH,SAASE,GAAT,IAAgBA,GAAhB,GAAsB;IAAEE,UAAUF,oBAAO;EAAnB,CAAnC;EACA,MAAMG,QAAQN,UAAd;;EAEA,MAAMO,cAAcD,MAAME,aAAN,CAAqBC,OAArB,CAA6BC,GAA7B,CAClB;IAAA,IAAC;MAAEC,WAAF;MAAeC;IAAf,CAAD;IAAA,OAAkC;MAChCA,UADgC;MAEhCC,OAAOF,YAAYG,OAAZ,CAAoB,oBAApB,EAA0C,EAA1C;IAFyB,CAAlC;EAAA,CADkB,CAApB;;EAOA,MAAMT,WAAWE,YAAYG,GAAZ,CAAiBK,EAAD,IAAQA,GAAGH,UAAH,KAAkBR,KAAKC,QAA/C,CAAjB;EACA,MAAMW,SAASC,cACbV,YAAYG,GAAZ,CAAiBK,EAAD,IAAQA,GAAGF,KAA3B,CADa,EAEb;IAAER,QAAF;IAAYa,KAAKd,KAAKc;EAAtB,CAFa,CAAf;EAKA,MAAMC,QAAQH,OAAOI,SAAP,CAAkBC,KAAD,IAAWA,SAAS,IAArC,CAAd;EACA,QAAOC,uBAAYH,KAAZ,yBAAoBP,UAA3B,KAAO,IAAP,GAAOU,EAAP,GAAyClB,KAAKC,QAA9C;AACF","names":["useTheme","isObject","useBreakpoint","arg","opts","fallback","theme","breakpoints","__breakpoints","details","map","minMaxQuery","breakpoint","query","replace","bp","values","useMediaQuery","ssr","index","findIndex","value","_b"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\media-query\\src\\use-breakpoint.ts"],"sourcesContent":["import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useMediaQuery } from \"./use-media-query\"\n\nexport type UseBreakpointOptions = {\n  ssr?: boolean\n  fallback?: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent.\n */\nexport function useBreakpoint(arg?: string | UseBreakpointOptions) {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const theme = useTheme()\n\n  const breakpoints = theme.__breakpoints!.details.map(\n    ({ minMaxQuery, breakpoint }) => ({\n      breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\"),\n    }),\n  )\n\n  const fallback = breakpoints.map((bp) => bp.breakpoint === opts.fallback)\n  const values = useMediaQuery(\n    breakpoints.map((bp) => bp.query),\n    { fallback, ssr: opts.ssr },\n  )\n\n  const index = values.findIndex((value) => value == true)\n  return breakpoints[index]?.breakpoint ?? opts.fallback\n}\n"]},"metadata":{},"sourceType":"module"}