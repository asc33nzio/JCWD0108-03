{"ast":null,"code":"'use client'; // src/focus-lock.tsx\n\nimport ReactFocusLock from \"react-focus-lock\";\nimport { getAllFocusable } from \"@chakra-ui/dom-utils\";\nimport { useCallback } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\n\nvar _a;\n\nvar FocusTrap = (_a = ReactFocusLock.default) != null ? _a : ReactFocusLock;\n\nvar FocusLock = props => {\n  const {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus,\n    lockFocusAcrossFrames\n  } = props;\n  const onActivation = useCallback(() => {\n    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    } else if (contentRef == null ? void 0 : contentRef.current) {\n      const focusables = getAllFocusable(contentRef.current);\n\n      if (focusables.length === 0) {\n        requestAnimationFrame(() => {\n          var _a2;\n\n          (_a2 = contentRef.current) == null ? void 0 : _a2.focus();\n        });\n      }\n    }\n  }, [initialFocusRef, contentRef]);\n  const onDeactivation = useCallback(() => {\n    var _a2;\n\n    (_a2 = finalFocusRef == null ? void 0 : finalFocusRef.current) == null ? void 0 : _a2.focus();\n  }, [finalFocusRef]);\n  const returnFocus = restoreFocus && !finalFocusRef;\n  return /* @__PURE__ */jsx(FocusTrap, {\n    crossFrame: lockFocusAcrossFrames,\n    persistentFocus,\n    autoFocus,\n    disabled: isDisabled,\n    onActivation,\n    onDeactivation,\n    returnFocus,\n    children\n  });\n};\n\nFocusLock.displayName = \"FocusLock\";\nvar focus_lock_default = FocusLock;\nexport { FocusLock, focus_lock_default };","map":{"version":3,"mappings":";;AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AACA,SAASC,eAAT,QAAgC,sBAAhC;AACA,SAASC,WAAT,QAA4B,OAA5B;AA+FI;;AAjGJ;;AAIA,IAAMC,aACHC,oBAAuBC,OADpB,KACH,IADG,GACHD,EADG,GAC+BJ,cADrC;;AA4DO,IAAMM,YAAuCC,KAAD,IAAW;EAC5D,MAAM;IACJC,eADI;IAEJC,aAFI;IAGJC,UAHI;IAIJC,YAJI;IAKJC,QALI;IAMJC,UANI;IAOJC,SAPI;IAQJC,eARI;IASJC;EATI,IAUFT,KAVJ;EAYA,MAAMU,eAAef,YAAY,MAAM;IACrC,IAAIM,mDAAiBU,OAArB,EAA8B;MAC5BV,gBAAgBU,OAAhB,CAAwBC,KAAxB;IACF,CAFA,MAEA,IAAWT,yCAAYQ,OAAvB,EAAgC;MAC9B,MAAME,aAAanB,gBAAgBS,WAAWQ,OAA3B,CAAnB;;MACA,IAAIE,WAAWC,MAAX,KAAsB,CAA1B,EAA6B;QAC3BC,sBAAsB,MAAM;UAnFpC;;UAoFU,kBAAWJ,OAAX,yBAAoBC,KAApBf;QACD,CAFD;MAGF;IACF;EACF,CAXqB,EAWlB,CAACI,eAAD,EAAkBE,UAAlB,CAXkB,CAArB;EAaA,MAAMa,iBAAiBrB,YAAY,MAAM;IA1F3C;;IA2FI,sDAAegB,OAAf,yBAAwBC,KAAxBf;EACF,CAFuB,EAEpB,CAACK,aAAD,CAFoB,CAAvB;EAIA,MAAMe,cAAcb,gBAAgB,CAACF,aAArC;EAEA,OACE,mBAACN,SAAD,EAAC;IACCsB,YAAYT,qBADb;IAECD,eAFD;IAGCD,SAHD;IAICY,UAAUb,UAJX;IAKCI,YALD;IAMCM,cAND;IAOCC,WAPD;IASEZ;EATF,CAAD,CADF;AAaF,CA7CO;;AA+CPN,UAAUqB,WAAV,GAAwB,WAAxB;AAEA,IAAOC,qBAAQtB,SAAf","names":["ReactFocusLock","getAllFocusable","useCallback","FocusTrap","_a","default","FocusLock","props","initialFocusRef","finalFocusRef","contentRef","restoreFocus","children","isDisabled","autoFocus","persistentFocus","lockFocusAcrossFrames","onActivation","current","focus","focusables","length","requestAnimationFrame","onDeactivation","returnFocus","crossFrame","disabled","displayName","focus_lock_default"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\focus-lock\\src\\focus-lock.tsx"],"sourcesContent":["import ReactFocusLock from \"react-focus-lock\"\nimport { getAllFocusable } from \"@chakra-ui/dom-utils\"\nimport { useCallback } from \"react\"\n\nconst FocusTrap: typeof ReactFocusLock =\n  (ReactFocusLock as any).default ?? ReactFocusLock\n\ninterface FocusableElement {\n  focus(options?: FocusOptions): void\n}\nexport interface FocusLockProps {\n  /**\n   * `ref` of the element to receive focus initially\n   */\n  initialFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * `ref` of the element to return focus to when `FocusLock`\n   * unmounts\n   */\n  finalFocusRef?: React.RefObject<FocusableElement>\n  /**\n   * The `ref` of the wrapper for which the focus-lock wraps\n   */\n  contentRef?: React.RefObject<HTMLElement>\n  /**\n   * If `true`, focus will be restored to the element that\n   * triggered the `FocusLock` once it unmounts\n   *\n   * @default false\n   */\n  restoreFocus?: boolean\n  /**\n   * The component to render\n   */\n  children: React.ReactNode\n  /**\n   * If `true`, focus trapping will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the first focusable element within the `children`\n   * will auto-focused once `FocusLock` mounts\n   *\n   * @default false\n   */\n  autoFocus?: boolean\n  /**\n   * If `true`, disables text selections inside, and outside focus lock\n   *\n   * @default false\n   */\n  persistentFocus?: boolean\n  /**\n   * Enables aggressive focus capturing within iframes.\n   * - If `true`: keep focus in the lock, no matter where lock is active\n   * - If `false`:  allows focus to move outside of iframe\n   *\n   * @default false\n   */\n  lockFocusAcrossFrames?: boolean\n}\n\nexport const FocusLock: React.FC<FocusLockProps> = (props) => {\n  const {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus,\n    lockFocusAcrossFrames,\n  } = props\n\n  const onActivation = useCallback(() => {\n    if (initialFocusRef?.current) {\n      initialFocusRef.current.focus()\n    } else if (contentRef?.current) {\n      const focusables = getAllFocusable(contentRef.current)\n      if (focusables.length === 0) {\n        requestAnimationFrame(() => {\n          contentRef.current?.focus()\n        })\n      }\n    }\n  }, [initialFocusRef, contentRef])\n\n  const onDeactivation = useCallback(() => {\n    finalFocusRef?.current?.focus()\n  }, [finalFocusRef])\n\n  const returnFocus = restoreFocus && !finalFocusRef\n\n  return (\n    <FocusTrap\n      crossFrame={lockFocusAcrossFrames}\n      persistentFocus={persistentFocus}\n      autoFocus={autoFocus}\n      disabled={isDisabled}\n      onActivation={onActivation}\n      onDeactivation={onDeactivation}\n      returnFocus={returnFocus}\n    >\n      {children}\n    </FocusTrap>\n  )\n}\n\nFocusLock.displayName = \"FocusLock\"\n\nexport default FocusLock\n"]},"metadata":{},"sourceType":"module"}