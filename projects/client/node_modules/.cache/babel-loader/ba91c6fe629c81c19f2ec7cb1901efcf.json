{"ast":null,"code":"'use client'; // src/use-shortcut.ts\n\nimport { useEffect, useRef, useState } from \"react\";\n\nfunction isPrintableCharacter(event) {\n  const {\n    key\n  } = event;\n  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);\n}\n\nfunction useShortcut() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    timeout = 300,\n    preventDefault = () => true\n  } = props;\n  const [keys, setKeys] = useState([]);\n  const timeoutRef = useRef();\n\n  const flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n\n  const clearKeysAfterDelay = () => {\n    flush();\n    timeoutRef.current = setTimeout(() => {\n      setKeys([]);\n      timeoutRef.current = null;\n    }, timeout);\n  };\n\n  useEffect(() => flush, []);\n\n  function onKeyDown(fn) {\n    return event => {\n      if (event.key === \"Backspace\") {\n        const keysCopy = [...keys];\n        keysCopy.pop();\n        setKeys(keysCopy);\n        return;\n      }\n\n      if (isPrintableCharacter(event)) {\n        const keysCopy = keys.concat(event.key);\n\n        if (preventDefault(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        setKeys(keysCopy);\n        fn(keysCopy.join(\"\"));\n        clearKeysAfterDelay();\n      }\n    };\n  }\n\n  return onKeyDown;\n}\n\nexport { useShortcut };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;;AAMA,SAASC,oBAAT,CAA8BC,KAA9B,EAA0D;EACxD,MAAM;IAAEC;EAAF,IAAUD,KAAhB;EACA,OAAOC,IAAIC,MAAJ,KAAe,CAAf,IAAqBD,IAAIC,MAAJ,GAAa,CAAb,IAAkB,eAAeC,IAAf,CAAoBF,GAApB,CAA9C;AACF;;AAWO,SAASG,WAAT,GAAmD;EAAA,IAA9BC,KAA8B,uEAAJ,EAAI;EACxD,MAAM;IAAEC,UAAU,GAAZ;IAAiBC,iBAAiB,MAAM;EAAxC,IAAiDF,KAAvD;EAEA,MAAM,CAACG,IAAD,EAAOC,OAAP,IAAkBX,SAAmB,EAAnB,CAAxB;EACA,MAAMY,aAAab,QAAnB;;EAEA,MAAMc,QAAQ,MAAM;IAClB,IAAID,WAAWE,OAAf,EAAwB;MACtBC,aAAaH,WAAWE,OAAxB;MACAF,WAAWE,OAAX,GAAqB,IAArB;IACF;EACF,CALA;;EAOA,MAAME,sBAAsB,MAAM;IAChCH;IACAD,WAAWE,OAAX,GAAqBG,WAAW,MAAM;MACpCN,QAAQ,EAAR;MACAC,WAAWE,OAAX,GAAqB,IAArB;IACF,CAHqB,EAGlBN,OAHkB,CAArB;EAIF,CANA;;EAQAV,UAAU,MAAMe,KAAhB,EAAuB,EAAvB;;EAIA,SAASK,SAAT,CAAmBC,EAAnB,EAAiC;IAC/B,OAAQjB,KAAD,IAAgC;MACrC,IAAIA,MAAMC,GAAN,KAAc,WAAlB,EAA+B;QAC7B,MAAMiB,WAAW,CAAC,GAAGV,IAAJ,CAAjB;QACAU,SAASC,GAAT;QACAV,QAAQS,QAAR;QACA;MACF;;MAEA,IAAInB,qBAAqBC,KAArB,CAAJ,EAAiC;QAC/B,MAAMkB,WAAWV,KAAKY,MAAL,CAAYpB,MAAMC,GAAlB,CAAjB;;QAEA,IAAIM,eAAeP,KAAf,CAAJ,EAA2B;UACzBA,MAAMO,cAAN;UACAP,MAAMqB,eAAN;QACF;;QAEAZ,QAAQS,QAAR;QACAD,GAAGC,SAASI,IAAT,CAAc,EAAd,CAAH;QAEAR;MACF;IACF,CArBA;EAsBF;;EAEA,OAAOE,SAAP;AACF","names":["useEffect","useRef","useState","isPrintableCharacter","event","key","length","test","useShortcut","props","timeout","preventDefault","keys","setKeys","timeoutRef","flush","current","clearTimeout","clearKeysAfterDelay","setTimeout","onKeyDown","fn","keysCopy","pop","concat","stopPropagation","join"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\menu\\src\\use-shortcut.ts"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\"\n\n/**\n * Checks if the key pressed is a printable character\n * and can be used for shortcut navigation\n */\nfunction isPrintableCharacter(event: React.KeyboardEvent) {\n  const { key } = event\n  return key.length === 1 || (key.length > 1 && /[^a-zA-Z0-9]/.test(key))\n}\n\nexport interface UseShortcutProps {\n  timeout?: number\n  preventDefault?: (event: React.KeyboardEvent) => boolean\n}\n\n/**\n * React hook that provides an enhanced keydown handler,\n * that's used for key navigation within menus, select dropdowns.\n */\nexport function useShortcut(props: UseShortcutProps = {}) {\n  const { timeout = 300, preventDefault = () => true } = props\n\n  const [keys, setKeys] = useState<string[]>([])\n  const timeoutRef = useRef<any>()\n\n  const flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current)\n      timeoutRef.current = null\n    }\n  }\n\n  const clearKeysAfterDelay = () => {\n    flush()\n    timeoutRef.current = setTimeout(() => {\n      setKeys([])\n      timeoutRef.current = null\n    }, timeout)\n  }\n\n  useEffect(() => flush, [])\n\n  type Callback = (keysSoFar: string) => void\n\n  function onKeyDown(fn: Callback) {\n    return (event: React.KeyboardEvent) => {\n      if (event.key === \"Backspace\") {\n        const keysCopy = [...keys]\n        keysCopy.pop()\n        setKeys(keysCopy)\n        return\n      }\n\n      if (isPrintableCharacter(event)) {\n        const keysCopy = keys.concat(event.key)\n\n        if (preventDefault(event)) {\n          event.preventDefault()\n          event.stopPropagation()\n        }\n\n        setKeys(keysCopy)\n        fn(keysCopy.join(\"\"))\n\n        clearKeysAfterDelay()\n      }\n    }\n  }\n\n  return onKeyDown\n}\n"]},"metadata":{},"sourceType":"module"}