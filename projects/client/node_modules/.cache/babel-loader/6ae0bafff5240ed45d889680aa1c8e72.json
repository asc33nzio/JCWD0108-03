{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useCallback, useState, useId } from \"react\";\n\nfunction useDisclosure() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp\n  } = props;\n  const handleOpen = useCallbackRef(onOpenProp);\n  const handleClose = useCallbackRef(onCloseProp);\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false);\n  const isOpen = isOpenProp !== void 0 ? isOpenProp : isOpenState;\n  const isControlled = isOpenProp !== void 0;\n  const uid = useId();\n  const id = idProp != null ? idProp : `disclosure-${uid}`;\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n\n    handleClose == null ? void 0 : handleClose();\n  }, [isControlled, handleClose]);\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n\n    handleOpen == null ? void 0 : handleOpen();\n  }, [isControlled, handleOpen]);\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose();\n    } else {\n      onOpen();\n    }\n  }, [isOpen, onOpen, onClose]);\n\n  function getButtonProps() {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return { ...props2,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n\n      onClick(event) {\n        var _a;\n\n        (_a = props2.onClick) == null ? void 0 : _a.call(props2, event);\n        onToggle();\n      }\n\n    };\n  }\n\n  function getDisclosureProps() {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return { ...props2,\n      hidden: !isOpen,\n      id\n    };\n  }\n\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps\n  };\n}\n\nexport { useDisclosure };","map":{"version":3,"mappings":";;AAAA,SAASA,cAAT,QAA+B,mCAA/B;AACA,SAAgBC,WAAhB,EAA6BC,QAA7B,EAAuCC,KAAvC,QAAoD,OAApD;;AAkBO,SAASC,aAAT,GAAuD;EAAA,IAAhCC,KAAgC,uEAAJ,EAAI;EAC5D,MAAM;IACJC,SAASC,WADL;IAEJC,QAAQC,UAFJ;IAGJC,QAAQC,UAHJ;IAIJC,IAAIC;EAJA,IAKFR,KALJ;EAOA,MAAMS,aAAad,eAAeS,UAAf,CAAnB;EACA,MAAMM,cAAcf,eAAeO,WAAf,CAApB;EAEA,MAAM,CAACS,WAAD,EAAcC,SAAd,IAA2Bf,SAASG,MAAMa,aAAN,IAAuB,KAAhC,CAAjC;EAEA,MAAMR,SAASC,eAAe,MAAf,GAA2BA,UAA3B,GAAwCK,WAAvD;EAEA,MAAMG,eAAeR,eAAe,MAApC;EAEA,MAAMS,MAAMjB,OAAZ;EACA,MAAMS,KAAKC,0BAAU,cAAcO,KAAnC;EAEA,MAAMd,UAAUL,YAAY,MAAM;IAChC,IAAI,CAACkB,YAAL,EAAmB;MACjBF,UAAU,KAAV;IACF;;IACAF;EACF,CALgB,EAKb,CAACI,YAAD,EAAeJ,WAAf,CALa,CAAhB;EAOA,MAAMP,SAASP,YAAY,MAAM;IAC/B,IAAI,CAACkB,YAAL,EAAmB;MACjBF,UAAU,IAAV;IACF;;IACAH;EACF,CALe,EAKZ,CAACK,YAAD,EAAeL,UAAf,CALY,CAAf;EAOA,MAAMO,WAAWpB,YAAY,MAAM;IACjC,IAAIS,MAAJ,EAAY;MACVJ;IACF,CAFA,MAEO;MACLE;IACF;EACF,CANiB,EAMd,CAACE,MAAD,EAASF,MAAT,EAAiBF,OAAjB,CANc,CAAjB;;EAQA,SAASgB,cAAT,GAA0D;IAAA,IAAlCjB,MAAkC,uEAAf,EAAe;IACxD,OAAO,EACL,GAAGA,MADE;MAEL,iBAAiBK,MAFZ;MAGL,iBAAiBE,EAHZ;;MAILW,QAAQC,KAAR,EAAe;QAlErB;;QAmEQ,aAAMD,OAAN,qCAAgBC,KAAhB;QACAH;MACF;;IAPK,CAAP;EASF;;EAEA,SAASI,kBAAT,GAA8D;IAAA,IAAlCpB,MAAkC,uEAAf,EAAe;IAC5D,OAAO,EACL,GAAGA,MADE;MAELqB,QAAQ,CAAChB,MAFJ;MAGLE;IAHK,CAAP;EAKF;;EAEA,OAAO;IACLF,MADK;IAELF,MAFK;IAGLF,OAHK;IAILe,QAJK;IAKLF,YALK;IAMLG,cANK;IAOLG;EAPK,CAAP;AASF","names":["useCallbackRef","useCallback","useState","useId","useDisclosure","props","onClose","onCloseProp","onOpen","onOpenProp","isOpen","isOpenProp","id","idProp","handleOpen","handleClose","isOpenState","setIsOpen","defaultIsOpen","isControlled","uid","onToggle","getButtonProps","onClick","event","getDisclosureProps","hidden"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\react-use-disclosure\\src\\index.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport React, { useCallback, useState, useId } from \"react\"\n\nexport interface UseDisclosureProps {\n  isOpen?: boolean\n  defaultIsOpen?: boolean\n  onClose?(): void\n  onOpen?(): void\n  id?: string\n}\n\ntype HTMLProps = React.HTMLAttributes<HTMLElement>\n\n/**\n * `useDisclosure` is a custom hook used to help handle common open, close, or toggle scenarios.\n * It can be used to control feedback component such as `Modal`, `AlertDialog`, `Drawer`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-disclosure\n */\nexport function useDisclosure(props: UseDisclosureProps = {}) {\n  const {\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    isOpen: isOpenProp,\n    id: idProp,\n  } = props\n\n  const handleOpen = useCallbackRef(onOpenProp)\n  const handleClose = useCallbackRef(onCloseProp)\n\n  const [isOpenState, setIsOpen] = useState(props.defaultIsOpen || false)\n\n  const isOpen = isOpenProp !== undefined ? isOpenProp : isOpenState\n\n  const isControlled = isOpenProp !== undefined\n\n  const uid = useId()\n  const id = idProp ?? `disclosure-${uid}`\n\n  const onClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false)\n    }\n    handleClose?.()\n  }, [isControlled, handleClose])\n\n  const onOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true)\n    }\n    handleOpen?.()\n  }, [isControlled, handleOpen])\n\n  const onToggle = useCallback(() => {\n    if (isOpen) {\n      onClose()\n    } else {\n      onOpen()\n    }\n  }, [isOpen, onOpen, onClose])\n\n  function getButtonProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      \"aria-expanded\": isOpen,\n      \"aria-controls\": id,\n      onClick(event) {\n        props.onClick?.(event)\n        onToggle()\n      },\n    }\n  }\n\n  function getDisclosureProps(props: HTMLProps = {}): HTMLProps {\n    return {\n      ...props,\n      hidden: !isOpen,\n      id,\n    }\n  }\n\n  return {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle,\n    isControlled,\n    getButtonProps,\n    getDisclosureProps,\n  }\n}\n\nexport type UseDisclosureReturn = ReturnType<typeof useDisclosure>\n"]},"metadata":{},"sourceType":"module"}