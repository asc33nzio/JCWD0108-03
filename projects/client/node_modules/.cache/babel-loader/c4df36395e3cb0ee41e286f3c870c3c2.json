{"ast":null,"code":"'use client'; // src/use-counter.ts\n\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { clampValue, countDecimalPlaces, toPrecision } from \"@chakra-ui/number-utils\";\nimport { useCallback, useState } from \"react\";\n\nfunction useCounter() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [valueState, setValue] = useState(() => {\n    var _a;\n\n    if (defaultValue == null) return \"\";\n    return (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : \"\";\n  });\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp);\n  const precision = precisionProp != null ? precisionProp : decimalPlaces;\n  const update = useCallback(next => {\n    if (next === value) return;\n\n    if (!isControlled) {\n      setValue(next.toString());\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(next.toString(), parse(next));\n  }, [onChangeProp, isControlled, value]);\n  const clamp = useCallback(value2 => {\n    let nextValue = value2;\n\n    if (keepWithinRange) {\n      nextValue = clampValue(nextValue, min, max);\n    }\n\n    return toPrecision(nextValue, precision);\n  }, [precision, keepWithinRange, max, min]);\n  const increment = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    let next;\n\n    if (value === \"\") {\n      next = parse(step);\n    } else {\n      next = parse(value) + step;\n    }\n\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const decrement = useCallback(function () {\n    let step = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : stepProp;\n    let next;\n\n    if (value === \"\") {\n      next = parse(-step);\n    } else {\n      next = parse(value) - step;\n    }\n\n    next = clamp(next);\n    update(next);\n  }, [clamp, stepProp, update, value]);\n  const reset = useCallback(() => {\n    var _a;\n\n    let next;\n\n    if (defaultValue == null) {\n      next = \"\";\n    } else {\n      next = (_a = cast(defaultValue, stepProp, precisionProp)) != null ? _a : min;\n    }\n\n    update(next);\n  }, [defaultValue, precisionProp, stepProp, update, min]);\n  const castValue = useCallback(value2 => {\n    var _a;\n\n    const nextValue = (_a = cast(value2, stepProp, precision)) != null ? _a : min;\n    update(nextValue);\n  }, [precision, stepProp, update, min]);\n  const valueAsNumber = parse(value);\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min;\n  const isAtMax = valueAsNumber === max;\n  const isAtMin = valueAsNumber === min;\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue\n  };\n}\n\nfunction parse(value) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"));\n}\n\nfunction getDecimalPlaces(value, step) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value));\n}\n\nfunction cast(value, step, precision) {\n  const parsedValue = parse(value);\n  if (Number.isNaN(parsedValue)) return void 0;\n  const decimalPlaces = getDecimalPlaces(parsedValue, step);\n  return toPrecision(parsedValue, precision != null ? precision : decimalPlaces);\n}\n\nexport { useCounter };","map":{"version":3,"mappings":"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","names":["useCallbackRef","clampValue","countDecimalPlaces","toPrecision","useCallback","useState","useCounter","props","onChange","precision","precisionProp","defaultValue","value","valueProp","step","stepProp","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","keepWithinRange","onChangeProp","valueState","setValue","_a","isControlled","decimalPlaces","getDecimalPlaces","parse","update","next","toString","clamp","nextValue","increment","decrement","reset","castValue","valueAsNumber","isOutOfRange","isAtMax","isAtMin","cast","parseFloat","replace","Math","parsedValue","isNaN"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\counter\\src\\use-counter.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport {\n  clampValue,\n  countDecimalPlaces,\n  toPrecision,\n} from \"@chakra-ui/number-utils\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseCounterProps {\n  /**\n   * The callback fired when the value changes\n   */\n  onChange?(valueAsString: string, valueAsNumber: number): void\n  /**\n   * The number of decimal points used to round the value\n   */\n  precision?: number\n  /**\n   * The initial value of the counter. Should be less than `max` and greater than `min`\n   */\n  defaultValue?: string | number\n  /**\n   * The value of the counter. Should be less than `max` and greater than `min`\n   */\n  value?: string | number\n  /**\n   * The step used to increment or decrement the value\n   * @default 1\n   */\n  step?: number\n  /**\n   * The minimum value of the counter\n   * @default Number.MIN_SAFE_INTEGER\n   */\n  min?: number\n  /**\n   * The maximum value of the counter\n   * @default Number.MAX_SAFE_INTEGER\n   */\n  max?: number\n  /**\n   * This controls the value update behavior in general.\n   *\n   * - If `true` and you use the stepper or up/down arrow keys,\n   *  the value will not exceed the `max` or go lower than `min`\n   *\n   * - If `false`, the value will be allowed to go out of range.\n   *\n   * @default true\n   */\n  keepWithinRange?: boolean\n}\n\nexport function useCounter(props: UseCounterProps = {}) {\n  const {\n    onChange,\n    precision: precisionProp,\n    defaultValue,\n    value: valueProp,\n    step: stepProp = 1,\n    min = Number.MIN_SAFE_INTEGER,\n    max = Number.MAX_SAFE_INTEGER,\n    keepWithinRange = true,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [valueState, setValue] = useState<string | number>(() => {\n    if (defaultValue == null) return \"\"\n    return cast(defaultValue, stepProp, precisionProp) ?? \"\"\n  })\n\n  /**\n   * Because the component that consumes this hook can be controlled or uncontrolled\n   * we'll keep track of that\n   */\n  const isControlled = typeof valueProp !== \"undefined\"\n  const value = isControlled ? valueProp : valueState\n\n  const decimalPlaces = getDecimalPlaces(parse(value), stepProp)\n\n  const precision = precisionProp ?? decimalPlaces\n\n  const update = useCallback(\n    (next: string | number) => {\n      if (next === value) return\n      if (!isControlled) {\n        setValue(next.toString())\n      }\n      onChangeProp?.(next.toString(), parse(next))\n    },\n    [onChangeProp, isControlled, value],\n  )\n\n  // Function to clamp the value and round it to the precision\n  const clamp = useCallback(\n    (value: number) => {\n      let nextValue = value\n\n      if (keepWithinRange) {\n        nextValue = clampValue(nextValue, min, max)\n      }\n\n      return toPrecision(nextValue, precision)\n    },\n    [precision, keepWithinRange, max, min],\n  )\n\n  const increment = useCallback(\n    (step = stepProp) => {\n      let next: string | number\n\n      /**\n       * Let's follow the native browser behavior for\n       * scenarios where the input starts empty (\"\")\n       */\n      if (value === \"\") {\n        /**\n         * If `min` is set, native input, starts at the `min`.\n         * Else, it starts at `step`\n         */\n        next = parse(step)\n      } else {\n        next = parse(value) + step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const decrement = useCallback(\n    (step = stepProp) => {\n      let next: string | number\n\n      // Same thing here. We'll follow native implementation\n      if (value === \"\") {\n        next = parse(-step)\n      } else {\n        next = parse(value) - step\n      }\n\n      next = clamp(next as number)\n      update(next)\n    },\n    [clamp, stepProp, update, value],\n  )\n\n  const reset = useCallback(() => {\n    let next: string | number\n    if (defaultValue == null) {\n      next = \"\"\n    } else {\n      next = cast(defaultValue, stepProp, precisionProp) ?? min\n    }\n    update(next)\n  }, [defaultValue, precisionProp, stepProp, update, min])\n\n  const castValue = useCallback(\n    (value: string | number) => {\n      const nextValue = cast(value, stepProp, precision) ?? min\n      update(nextValue)\n    },\n    [precision, stepProp, update, min],\n  )\n\n  const valueAsNumber = parse(value)\n\n  /**\n   * Common range checks\n   */\n  const isOutOfRange = valueAsNumber > max || valueAsNumber < min\n  const isAtMax = valueAsNumber === max\n  const isAtMin = valueAsNumber === min\n\n  return {\n    isOutOfRange,\n    isAtMax,\n    isAtMin,\n    precision,\n    value,\n    valueAsNumber,\n    update,\n    reset,\n    increment,\n    decrement,\n    clamp,\n    cast: castValue,\n    setValue,\n  }\n}\n\nexport type UseCounterReturn = ReturnType<typeof useCounter>\n\nfunction parse(value: string | number) {\n  return parseFloat(value.toString().replace(/[^\\w.-]+/g, \"\"))\n}\n\nfunction getDecimalPlaces(value: number, step: number) {\n  return Math.max(countDecimalPlaces(step), countDecimalPlaces(value))\n}\n\nfunction cast(value: string | number, step: number, precision?: number) {\n  const parsedValue = parse(value)\n  if (Number.isNaN(parsedValue)) return undefined\n  const decimalPlaces = getDecimalPlaces(parsedValue, step)\n  return toPrecision(parsedValue, precision ?? decimalPlaces)\n}\n"]},"metadata":{},"sourceType":"module"}