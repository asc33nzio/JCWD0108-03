{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { useMemo, useState } from \"react\";\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\n\nfunction useControllableProp(prop, state) {\n  const controlled = typeof prop !== \"undefined\";\n  const value = controlled ? prop : state;\n  return useMemo(() => [controlled, value], [controlled, value]);\n}\n\nfunction useControllableState(props) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const shouldUpdateProp = useCallbackRef(shouldUpdate);\n  const [uncontrolledState, setUncontrolledState] = useState(defaultValue);\n  const controlled = valueProp !== void 0;\n  const value = controlled ? valueProp : uncontrolledState;\n  const setValue = useCallbackRef(next => {\n    const setter = next;\n    const nextValue = typeof next === \"function\" ? setter(value) : next;\n\n    if (!shouldUpdateProp(value, nextValue)) {\n      return;\n    }\n\n    if (!controlled) {\n      setUncontrolledState(nextValue);\n    }\n\n    onChangeProp(nextValue);\n  }, [controlled, onChangeProp, value, shouldUpdateProp]);\n  return [value, setValue];\n}\n\nexport { useControllableProp, useControllableState };","map":{"version":3,"mappings":";;AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,OAAlC;AACA,SAASC,cAAT,QAA+B,mCAA/B;;AAOO,SAASC,mBAAT,CAAgCC,IAAhC,EAAqDC,KAArD,EAA+D;EACpE,MAAMC,aAAa,OAAOF,IAAP,KAAgB,WAAnC;EACA,MAAMG,QAAQD,aAAaF,IAAb,GAAoBC,KAAlC;EACA,OAAOL,QAAsB,MAAM,CAACM,UAAD,EAAaC,KAAb,CAA5B,EAAiD,CAACD,UAAD,EAAaC,KAAb,CAAjD,CAAP;AACF;;AAcO,SAASC,oBAAT,CAAiCC,KAAjC,EAAsE;EAC3E,MAAM;IACJF,OAAOG,SADH;IAEJC,YAFI;IAGJC,QAHI;IAIJC,eAAe,CAACC,IAAD,EAAOC,IAAP,KAAgBD,SAASC;EAJpC,IAKFN,KALJ;EAOA,MAAMO,eAAed,eAAeU,QAAf,CAArB;EACA,MAAMK,mBAAmBf,eAAeW,YAAf,CAAzB;EAEA,MAAM,CAACK,iBAAD,EAAoBC,oBAApB,IAA4ClB,SAASU,YAAT,CAAlD;EACA,MAAML,aAAaI,cAAc,MAAjC;EACA,MAAMH,QAAQD,aAAaI,SAAb,GAAyBQ,iBAAvC;EAEA,MAAME,WAAWlB,eACda,IAAD,IAAmC;IACjC,MAAMM,SAASN,IAAf;IACA,MAAMO,YAAY,OAAOP,IAAP,KAAgB,UAAhB,GAA6BM,OAAOd,KAAP,CAA7B,GAA6CQ,IAA/D;;IAEA,IAAI,CAACE,iBAAiBV,KAAjB,EAAwBe,SAAxB,CAAL,EAAyC;MACvC;IACF;;IAEA,IAAI,CAAChB,UAAL,EAAiB;MACfa,qBAAqBG,SAArB;IACF;;IAEAN,aAAaM,SAAb;EACF,CAde,EAef,CAAChB,UAAD,EAAaU,YAAb,EAA2BT,KAA3B,EAAkCU,gBAAlC,CAfe,CAAjB;EAkBA,OAAO,CAACV,KAAD,EAAQa,QAAR,CAAP;AACF","names":["useMemo","useState","useCallbackRef","useControllableProp","prop","state","controlled","value","useControllableState","props","valueProp","defaultValue","onChange","shouldUpdate","prev","next","onChangeProp","shouldUpdateProp","uncontrolledState","setUncontrolledState","setValue","setter","nextValue"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\react-use-controllable-state\\src\\index.ts"],"sourcesContent":["import { useMemo, useState } from \"react\"\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\n\n/**\n * Given a prop value and state value, the useControllableProp hook is used to determine whether a component is controlled or uncontrolled, and also returns the computed value.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-controllable#usecontrollableprop\n */\nexport function useControllableProp<T>(prop: T | undefined, state: T) {\n  const controlled = typeof prop !== \"undefined\"\n  const value = controlled ? prop : state\n  return useMemo<[boolean, T]>(() => [controlled, value], [controlled, value])\n}\n\nexport interface UseControllableStateProps<T> {\n  value?: T\n  defaultValue?: T | (() => T)\n  onChange?: (value: T) => void\n  shouldUpdate?: (prev: T, next: T) => boolean\n}\n\n/**\n * The `useControllableState` hook returns the state and function that updates the state, just like React.useState does.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-controllable#usecontrollablestate\n */\nexport function useControllableState<T>(props: UseControllableStateProps<T>) {\n  const {\n    value: valueProp,\n    defaultValue,\n    onChange,\n    shouldUpdate = (prev, next) => prev !== next,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n  const shouldUpdateProp = useCallbackRef(shouldUpdate)\n\n  const [uncontrolledState, setUncontrolledState] = useState(defaultValue as T)\n  const controlled = valueProp !== undefined\n  const value = controlled ? valueProp : uncontrolledState\n\n  const setValue = useCallbackRef(\n    (next: React.SetStateAction<T>) => {\n      const setter = next as (prevState?: T) => T\n      const nextValue = typeof next === \"function\" ? setter(value) : next\n\n      if (!shouldUpdateProp(value, nextValue)) {\n        return\n      }\n\n      if (!controlled) {\n        setUncontrolledState(nextValue)\n      }\n\n      onChangeProp(nextValue)\n    },\n    [controlled, onChangeProp, value, shouldUpdateProp],\n  )\n\n  return [value, setValue] as [T, React.Dispatch<React.SetStateAction<T>>]\n}\n"]},"metadata":{},"sourceType":"module"}