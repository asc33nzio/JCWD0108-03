{"ast":null,"code":"'use client';\n\nimport { PanEvent } from \"./chunk-Z2LY7B4S.mjs\"; // src/use-pan-event.ts\n\nimport { addPointerEvent } from \"@chakra-ui/event-utils\";\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\";\nimport { useEffect, useRef } from \"react\";\n\nfunction usePanEvent(ref, options) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n    threshold\n  } = options;\n  const hasPanEvents = Boolean(onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd);\n  const panSession = useRef(null);\n  const handlersRef = useLatestRef({\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n\n    onEnd(event, info) {\n      panSession.current = null;\n      onPanEnd == null ? void 0 : onPanEnd(event, info);\n    }\n\n  });\n  useEffect(() => {\n    var _a;\n\n    (_a = panSession.current) == null ? void 0 : _a.updateHandlers(handlersRef.current);\n  });\n  useEffect(() => {\n    const node = ref.current;\n    if (!node || !hasPanEvents) return;\n\n    function onPointerDown(event) {\n      panSession.current = new PanEvent(event, handlersRef.current, threshold);\n    }\n\n    return addPointerEvent(node, \"pointerdown\", onPointerDown);\n  }, [ref, hasPanEvents, handlersRef, threshold]);\n  useEffect(() => {\n    return () => {\n      var _a;\n\n      (_a = panSession.current) == null ? void 0 : _a.end();\n      panSession.current = null;\n    };\n  }, []);\n}\n\nexport { usePanEvent };","map":{"version":3,"mappings":";;;;AAAA,SAASA,eAAT,QAAgC,wBAAhC;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,SAAT,EAAoBC,MAApB,QAAkC,OAAlC;;AAaO,SAASC,WAAT,CACLC,GADK,EAELC,OAFK,EAGL;EACA,MAAM;IACJC,KADI;IAEJC,UAFI;IAGJC,QAHI;IAIJC,iBAJI;IAKJC,eALI;IAMJC;EANI,IAOFN,OAPJ;EASA,MAAMO,eAAeC,QACnBP,SAASC,UAAT,IAAuBC,QAAvB,IAAmCC,iBAAnC,IAAwDC,eADrC,CAArB;EAIA,MAAMI,aAAaZ,OAAwB,IAAxB,CAAnB;EAEA,MAAMa,cAAcf,aAAwC;IAC1DgB,gBAAgBP,iBAD0C;IAE1DQ,cAAcP,eAF4C;IAG1DQ,SAASX,UAHiD;IAI1DY,QAAQb,KAJkD;;IAK1Dc,MAAMC,KAAN,EAAaC,IAAb,EAAmB;MACjBR,WAAWS,OAAX,GAAqB,IAArB;MACAf,qCAAWa,KAAX,EAAkBC,IAAlB;IACF;;EAR0D,CAAxC,CAApB;EAWArB,UAAU,MAAM;IA7ClB;;IA8CI,iBAAWsB,OAAX,wBAAoBC,cAApB,CAAmCT,YAAYQ,OAA/C;EACD,CAFD;EAIAtB,UAAU,MAAM;IACd,MAAMwB,OAAOrB,IAAImB,OAAjB;IAEA,IAAI,CAACE,IAAD,IAAS,CAACb,YAAd,EAA4B;;IAE5B,SAASc,aAAT,CAAuBL,KAAvB,EAA+C;MAC7CP,WAAWS,OAAX,GAAqB,IAAII,QAAJ,CAAaN,KAAb,EAAoBN,YAAYQ,OAAhC,EAAyCZ,SAAzC,CAArB;IACF;;IAEA,OAAOZ,gBAAgB0B,IAAhB,EAAsB,aAAtB,EAAqCC,aAArC,CAAP;EACF,CAVA,EAUG,CAACtB,GAAD,EAAMQ,YAAN,EAAoBG,WAApB,EAAiCJ,SAAjC,CAVH;EAYAV,UAAU,MAAM;IACd,OAAO,MAAM;MA9DjB;;MA+DM,iBAAWsB,OAAX,wBAAoBK,GAApB;MACAd,WAAWS,OAAX,GAAqB,IAArB;IACF,CAHA;EAIF,CALA,EAKG,EALH;AAMF","names":["addPointerEvent","useLatestRef","useEffect","useRef","usePanEvent","ref","options","onPan","onPanStart","onPanEnd","onPanSessionStart","onPanSessionEnd","threshold","hasPanEvents","Boolean","panSession","handlersRef","onSessionStart","onSessionEnd","onStart","onMove","onEnd","event","info","current","updateHandlers","node","onPointerDown","PanEvent","end"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\react-use-pan-event\\src\\use-pan-event.ts"],"sourcesContent":["import { addPointerEvent } from \"@chakra-ui/event-utils\"\nimport { useLatestRef } from \"@chakra-ui/react-use-latest-ref\"\nimport { useEffect, useRef } from \"react\"\nimport { PanEvent } from \"./pan-event\"\nimport { AnyPointerEvent, PanEventHandler, PanEventHandlers } from \"./types\"\n\nexport interface UsePanEventProps {\n  onPan?: PanEventHandler\n  onPanStart?: PanEventHandler\n  onPanEnd?: PanEventHandler\n  onPanSessionStart?: PanEventHandler\n  onPanSessionEnd?: PanEventHandler\n  threshold?: number\n}\n\nexport function usePanEvent(\n  ref: React.RefObject<HTMLElement>,\n  options: UsePanEventProps,\n) {\n  const {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    onPanSessionEnd,\n    threshold,\n  } = options\n\n  const hasPanEvents = Boolean(\n    onPan || onPanStart || onPanEnd || onPanSessionStart || onPanSessionEnd,\n  )\n\n  const panSession = useRef<PanEvent | null>(null)\n\n  const handlersRef = useLatestRef<Partial<PanEventHandlers>>({\n    onSessionStart: onPanSessionStart,\n    onSessionEnd: onPanSessionEnd,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd(event, info) {\n      panSession.current = null\n      onPanEnd?.(event, info)\n    },\n  })\n\n  useEffect(() => {\n    panSession.current?.updateHandlers(handlersRef.current)\n  })\n\n  useEffect(() => {\n    const node = ref.current\n\n    if (!node || !hasPanEvents) return\n\n    function onPointerDown(event: AnyPointerEvent) {\n      panSession.current = new PanEvent(event, handlersRef.current, threshold)\n    }\n\n    return addPointerEvent(node, \"pointerdown\", onPointerDown)\n  }, [ref, hasPanEvents, handlersRef, threshold])\n\n  useEffect(() => {\n    return () => {\n      panSession.current?.end()\n      panSession.current = null\n    }\n  }, [])\n}\n"]},"metadata":{},"sourceType":"module"}