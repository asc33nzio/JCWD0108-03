{"ast":null,"code":"'use client';\n\nimport { useRadioGroupContext } from \"./chunk-X4Z64PN5.mjs\"; // src/use-radio.ts\n\nimport { useFormControlContext } from \"@chakra-ui/form-control\";\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\"; // ../visually-hidden/src/visually-hidden.style.ts\n\nvar visuallyHiddenStyle = {\n  border: \"0\",\n  clip: \"rect(0, 0, 0, 0)\",\n  height: \"1px\",\n  width: \"1px\",\n  margin: \"-1px\",\n  padding: \"0\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\"\n}; // src/use-radio.ts\n\nimport { trackFocusVisible } from \"@zag-js/focus-visible\";\nimport { useCallback, useEffect, useState, useId } from \"react\";\n\nfunction useRadio() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled: isDisabledProp,\n    isReadOnly: isReadOnlyProp,\n    isRequired: isRequiredProp,\n    onChange,\n    isInvalid: isInvalidProp,\n    name,\n    value,\n    id: idProp,\n    \"data-radiogroup\": dataRadioGroup,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props;\n  const uuid = `radio-${useId()}`;\n  const formControl = useFormControlContext();\n  const group = useRadioGroupContext();\n  const isWithinRadioGroup = !!group || !!dataRadioGroup;\n  const isWithinFormControl = !!formControl;\n  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid;\n  id = idProp != null ? idProp : id;\n  const isDisabled = isDisabledProp != null ? isDisabledProp : formControl == null ? void 0 : formControl.isDisabled;\n  const isReadOnly = isReadOnlyProp != null ? isReadOnlyProp : formControl == null ? void 0 : formControl.isReadOnly;\n  const isRequired = isRequiredProp != null ? isRequiredProp : formControl == null ? void 0 : formControl.isRequired;\n  const isInvalid = isInvalidProp != null ? isInvalidProp : formControl == null ? void 0 : formControl.isInvalid;\n  const [isFocusVisible, setIsFocusVisible] = useState(false);\n  const [isFocused, setFocused] = useState(false);\n  const [isHovered, setHovering] = useState(false);\n  const [isActive, setActive] = useState(false);\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked));\n  const isControlled = typeof isCheckedProp !== \"undefined\";\n  const isChecked = isControlled ? isCheckedProp : isCheckedState;\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible);\n  }, []);\n  const handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      setChecked(event.target.checked);\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  }, [isControlled, isDisabled, isReadOnly, onChange]);\n  const onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive(true);\n    }\n  }, [setActive]);\n  const onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive(false);\n    }\n  }, [setActive]);\n  const getRadioProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props2.onMouseDown, () => setActive(true)),\n      onMouseUp: callAllHandlers(props2.onMouseUp, () => setActive(false)),\n      onMouseEnter: callAllHandlers(props2.onMouseEnter, () => setHovering(true)),\n      onMouseLeave: callAllHandlers(props2.onMouseLeave, () => setHovering(false))\n    };\n  }, [isActive, isHovered, isDisabled, isInvalid, isChecked, isFocused, isReadOnly, isFocusVisible]);\n  const {\n    onFocus,\n    onBlur\n  } = formControl != null ? formControl : {};\n  const getInputProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const trulyDisabled = isDisabled && !isFocusable;\n    return { ...props2,\n      id,\n      ref,\n      type: \"radio\",\n      name,\n      value,\n      onChange: callAllHandlers(props2.onChange, handleChange),\n      onBlur: callAllHandlers(onBlur, props2.onBlur, () => setFocused(false)),\n      onFocus: callAllHandlers(onFocus, props2.onFocus, () => setFocused(true)),\n      onKeyDown: callAllHandlers(props2.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props2.onKeyUp, onKeyUp),\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      required: isRequired,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      \"aria-disabled\": ariaAttr(trulyDisabled),\n      \"aria-required\": ariaAttr(isRequired),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-describedby\": ariaDescribedBy,\n      style: visuallyHiddenStyle\n    };\n  }, [isDisabled, isFocusable, id, name, value, handleChange, onBlur, onFocus, onKeyDown, onKeyUp, isChecked, isReadOnly, isRequired, isInvalid, ariaDescribedBy]);\n\n  const getLabelProps = function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref,\n      onMouseDown: callAllHandlers(props2.onMouseDown, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    };\n  };\n\n  const getRootProps = function (props2) {\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref,\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    };\n  };\n\n  const state = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isDisabled,\n    isReadOnly,\n    isRequired\n  };\n  return {\n    state,\n\n    /**\n     * @deprecated - use `getRadioProps` instead\n     */\n    getCheckboxProps: getRadioProps,\n    getRadioProps,\n    getInputProps,\n    getLabelProps,\n    getRootProps,\n    htmlProps\n  };\n}\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n\nexport { useRadio };","map":{"version":3,"mappings":"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","names":["useFormControlContext","ariaAttr","callAllHandlers","dataAttr","visuallyHiddenStyle","border","clip","height","width","margin","padding","overflow","whiteSpace","position","trackFocusVisible","useCallback","useEffect","useState","useId","useRadio","props","defaultChecked","isChecked","isCheckedProp","isFocusable","isDisabled","isDisabledProp","isReadOnly","isReadOnlyProp","isRequired","isRequiredProp","onChange","isInvalid","isInvalidProp","name","value","id","idProp","dataRadioGroup","ariaDescribedBy","htmlProps","uuid","formControl","group","useRadioGroupContext","isWithinRadioGroup","isWithinFormControl","isFocusVisible","setIsFocusVisible","isFocused","setFocused","isHovered","setHovering","isActive","setActive","isCheckedState","setChecked","Boolean","isControlled","handleChange","event","preventDefault","target","checked","onKeyDown","key","onKeyUp","getRadioProps","ref","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","onFocus","onBlur","getInputProps","trulyDisabled","type","disabled","readOnly","required","style","getLabelProps","stopEvent","getRootProps","state","getCheckboxProps","stopPropagation"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\radio\\src\\use-radio.ts","C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\visually-hidden\\src\\visually-hidden.style.ts"],"sourcesContent":["import { useFormControlContext } from \"@chakra-ui/form-control\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\nimport { ariaAttr, callAllHandlers, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport { trackFocusVisible } from \"@zag-js/focus-visible\"\nimport { useCallback, useEffect, useState, useId } from \"react\"\nimport { useRadioGroupContext } from \"./radio-group\"\n\n/**\n * @todo use the `useClickable` hook here\n * to manage the isFocusable & isDisabled props\n */\nexport interface UseRadioProps {\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * The name of the input field in a radio\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the radio button.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string\n  /**\n   * If `true`, the radio will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   *\n   * @default false\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the radio will be initially checked.\n   *\n   * @default false\n   */\n  defaultChecked?: boolean\n  /**\n   * If `true`, the radio will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is true, the radio will remain\n   * focusable but not interactive.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the radio will be read-only\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the radio button will be invalid. This also sets `aria-invalid` to `true`.\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the radio button will be required. This also sets `aria-required` to `true`.\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * Function called when checked state of the `input` changes\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * @internal\n   */\n  \"data-radiogroup\"?: any\n  /**\n   * Refers to the `id` of the element that labels the radio element.\n   */\n  \"aria-describedby\"?: string\n}\n\nexport interface RadioState {\n  isInvalid: boolean | undefined\n  isFocused: boolean\n  isChecked: boolean\n  isActive: boolean\n  isHovered: boolean\n  isDisabled: boolean | undefined\n  isReadOnly: boolean | undefined\n  isRequired: boolean | undefined\n}\n\n/**\n * `useRadio` is a custom hook used to provide radio functionality, as well as state and focus management to custom radio components when using it.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-radio\n */\nexport function useRadio(props: UseRadioProps = {}) {\n  const {\n    defaultChecked,\n    isChecked: isCheckedProp,\n    isFocusable,\n    isDisabled: isDisabledProp,\n    isReadOnly: isReadOnlyProp,\n    isRequired: isRequiredProp,\n    onChange,\n    isInvalid: isInvalidProp,\n    name,\n    value,\n    id: idProp,\n    \"data-radiogroup\": dataRadioGroup,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props\n\n  const uuid = `radio-${useId()}`\n\n  const formControl = useFormControlContext()\n  const group = useRadioGroupContext()\n\n  const isWithinRadioGroup = !!group || !!dataRadioGroup\n  const isWithinFormControl = !!formControl\n\n  let id = isWithinFormControl && !isWithinRadioGroup ? formControl.id : uuid\n  id = idProp ?? id\n\n  const isDisabled = isDisabledProp ?? formControl?.isDisabled\n  const isReadOnly = isReadOnlyProp ?? formControl?.isReadOnly\n  const isRequired = isRequiredProp ?? formControl?.isRequired\n  const isInvalid = isInvalidProp ?? formControl?.isInvalid\n\n  const [isFocusVisible, setIsFocusVisible] = useState(false)\n  const [isFocused, setFocused] = useState(false)\n  const [isHovered, setHovering] = useState(false)\n  const [isActive, setActive] = useState(false)\n\n  const [isCheckedState, setChecked] = useState(Boolean(defaultChecked))\n\n  const isControlled = typeof isCheckedProp !== \"undefined\"\n  const isChecked = isControlled ? isCheckedProp : isCheckedState\n\n  useEffect(() => {\n    return trackFocusVisible(setIsFocusVisible)\n  }, [])\n\n  const handleChange = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        setChecked(event.target.checked)\n      }\n\n      onChange?.(event)\n    },\n    [isControlled, isDisabled, isReadOnly, onChange],\n  )\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(true)\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: React.KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive(false)\n      }\n    },\n    [setActive],\n  )\n\n  const getRadioProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-focus-visible\": dataAttr(isFocused && isFocusVisible),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, () => setActive(true)),\n      onMouseUp: callAllHandlers(props.onMouseUp, () => setActive(false)),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, () =>\n        setHovering(true),\n      ),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, () =>\n        setHovering(false),\n      ),\n    }),\n    [\n      isActive,\n      isHovered,\n      isDisabled,\n      isInvalid,\n      isChecked,\n      isFocused,\n      isReadOnly,\n      isFocusVisible,\n    ],\n  )\n\n  const { onFocus, onBlur } = formControl ?? {}\n\n  const getInputProps: PropGetter<InputDOMAttributes, InputDOMAttributes> =\n    useCallback(\n      (props = {}, ref = null) => {\n        const trulyDisabled = isDisabled && !isFocusable\n\n        return {\n          ...props,\n          id,\n          ref,\n          type: \"radio\",\n          name,\n          value,\n          onChange: callAllHandlers(props.onChange, handleChange),\n          onBlur: callAllHandlers(onBlur, props.onBlur, () =>\n            setFocused(false),\n          ),\n          onFocus: callAllHandlers(onFocus, props.onFocus, () =>\n            setFocused(true),\n          ),\n          onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n          onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n          checked: isChecked,\n          disabled: trulyDisabled,\n          readOnly: isReadOnly,\n          required: isRequired,\n          \"aria-invalid\": ariaAttr(isInvalid),\n          \"aria-disabled\": ariaAttr(trulyDisabled),\n          \"aria-required\": ariaAttr(isRequired),\n          \"data-readonly\": dataAttr(isReadOnly),\n          \"aria-describedby\": ariaDescribedBy,\n          style: visuallyHiddenStyle,\n        }\n      },\n      [\n        isDisabled,\n        isFocusable,\n        id,\n        name,\n        value,\n        handleChange,\n        onBlur,\n        onFocus,\n        onKeyDown,\n        onKeyUp,\n        isChecked,\n        isReadOnly,\n        isRequired,\n        isInvalid,\n        ariaDescribedBy,\n      ],\n    )\n\n  const getLabelProps: PropGetter = (props = {}, ref = null) => ({\n    ...props,\n    ref,\n    onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  const getRootProps: PropGetter = (props, ref = null) => ({\n    ...props,\n    ref,\n    \"data-disabled\": dataAttr(isDisabled),\n    \"data-checked\": dataAttr(isChecked),\n    \"data-invalid\": dataAttr(isInvalid),\n  })\n\n  const state: RadioState = {\n    isInvalid,\n    isFocused,\n    isChecked,\n    isActive,\n    isHovered,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n  }\n\n  return {\n    state,\n    /**\n     * @deprecated - use `getRadioProps` instead\n     */\n    getCheckboxProps: getRadioProps,\n    getRadioProps,\n    getInputProps,\n    getLabelProps,\n    getRootProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the radio label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseRadioReturn = ReturnType<typeof useRadio>\n","/**\n * Styles to visually hide an element\n * but make it accessible to screen-readers\n */\nexport const visuallyHiddenStyle: React.CSSProperties = {\n  border: \"0\",\n  clip: \"rect(0, 0, 0, 0)\",\n  height: \"1px\",\n  width: \"1px\",\n  margin: \"-1px\",\n  padding: \"0\",\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  position: \"absolute\",\n}\n"]},"metadata":{},"sourceType":"module"}