{"ast":null,"code":"'use client';\n\nimport { __publicField } from \"./chunk-L3JOHIPP.mjs\"; // src/modal-manager.ts\n\nimport { useEffect, useState } from \"react\";\nvar ModalManager = class {\n  constructor() {\n    __publicField(this, \"modals\");\n\n    this.modals = /* @__PURE__ */new Map();\n  }\n\n  add(modal) {\n    this.modals.set(modal, this.modals.size + 1);\n    return this.modals.size;\n  }\n\n  remove(modal) {\n    this.modals.delete(modal);\n  }\n\n  isTopModal(modal) {\n    if (!modal) return false;\n    return this.modals.get(modal) === this.modals.size;\n  }\n\n};\nvar modalManager = new ModalManager();\n\nfunction useModalManager(ref, isOpen) {\n  const [index, setIndex] = useState(0);\n  useEffect(() => {\n    const node = ref.current;\n    if (!node) return;\n\n    if (isOpen) {\n      const index2 = modalManager.add(node);\n      setIndex(index2);\n    }\n\n    return () => {\n      modalManager.remove(node);\n      setIndex(0);\n    };\n  }, [isOpen, ref]);\n  return index;\n}\n\nexport { modalManager, useModalManager };","map":{"version":3,"mappings":";;;;AAAA,SAAoBA,SAApB,EAA+BC,QAA/B,QAA+C,OAA/C;AAMA,IAAMC,eAAN,MAAmB;EAEjBC,cAAc;IADdC;;IAEE,KAAKC,MAAL,GAAc,mBAAIC,GAAJ,EAAd;EACF;;EAEAC,IAAIC,KAAJ,EAAwB;IACtB,KAAKH,MAAL,CAAYI,GAAZ,CAAgBD,KAAhB,EAAuB,KAAKH,MAAL,CAAYK,IAAZ,GAAmB,CAA1C;IACA,OAAO,KAAKL,MAAL,CAAYK,IAAnB;EACF;;EAEAC,OAAOH,KAAP,EAA2B;IACzB,KAAKH,MAAL,CAAYO,MAAZ,CAAmBJ,KAAnB;EACF;;EAEAK,WAAWL,KAAX,EAAsC;IACpC,IAAI,CAACA,KAAL,EAAY,OAAO,KAAP;IACZ,OAAO,KAAKH,MAAL,CAAYS,GAAZ,CAAgBN,KAAhB,MAA2B,KAAKH,MAAL,CAAYK,IAA9C;EACF;;AAlBiB,CAAnB;AAqBO,IAAMK,eAAe,IAAIb,YAAJ,EAArB;;AAEA,SAASc,eAAT,CAAyBC,GAAzB,EAAsDC,MAAtD,EAAwE;EAC7E,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBnB,SAAS,CAAT,CAA1B;EAEAD,UAAU,MAAM;IACd,MAAMqB,OAAOJ,IAAIK,OAAjB;IAEA,IAAI,CAACD,IAAL,EAAW;;IAEX,IAAIH,MAAJ,EAAY;MACV,MAAMC,SAAQJ,aAAaR,GAAb,CAAiBc,IAAjB,CAAd;MACAD,SAASD,MAAT;IACF;;IAEA,OAAO,MAAM;MACXJ,aAAaJ,MAAb,CAAoBU,IAApB;MACAD,SAAS,CAAT;IACF,CAHA;EAIF,CAdA,EAcG,CAACF,MAAD,EAASD,GAAT,CAdH;EAgBA,OAAOE,KAAP;AACF","names":["useEffect","useState","ModalManager","constructor","__publicField","modals","Map","add","modal","set","size","remove","delete","isTopModal","get","modalManager","useModalManager","ref","isOpen","index","setIndex","node","current"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\modal\\src\\modal-manager.ts"],"sourcesContent":["import { RefObject, useEffect, useState } from \"react\"\n\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\nclass ModalManager {\n  modals: Map<HTMLElement, number>\n  constructor() {\n    this.modals = new Map()\n  }\n\n  add(modal: HTMLElement) {\n    this.modals.set(modal, this.modals.size + 1)\n    return this.modals.size\n  }\n\n  remove(modal: HTMLElement) {\n    this.modals.delete(modal)\n  }\n\n  isTopModal(modal: HTMLElement | null) {\n    if (!modal) return false\n    return this.modals.get(modal) === this.modals.size\n  }\n}\n\nexport const modalManager = new ModalManager()\n\nexport function useModalManager(ref: RefObject<HTMLElement>, isOpen?: boolean) {\n  const [index, setIndex] = useState(0)\n\n  useEffect(() => {\n    const node = ref.current\n\n    if (!node) return\n\n    if (isOpen) {\n      const index = modalManager.add(node)\n      setIndex(index)\n    }\n\n    return () => {\n      modalManager.remove(node)\n      setIndex(0)\n    }\n  }, [isOpen, ref])\n\n  return index\n}\n"]},"metadata":{},"sourceType":"module"}