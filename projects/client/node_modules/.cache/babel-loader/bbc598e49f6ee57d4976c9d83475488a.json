{"ast":null,"code":"'use client'; // src/input-group.tsx\n\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { compact } from \"@chakra-ui/object-utils\";\nimport { cloneElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [InputGroupStylesProvider, useInputGroupStyles] = createContext({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `\n});\nvar InputGroup = forwardRef(function InputGroup2(props, ref) {\n  const styles = useMultiStyleConfig(\"Input\", props);\n  const {\n    children,\n    className,\n    ...rest\n  } = omitThemingProps(props);\n\n  const _className = cx(\"chakra-input__group\", className);\n\n  const groupStyles = {};\n  const validChildren = getValidChildren(children);\n  const input = styles.field;\n  validChildren.forEach(child => {\n    var _a, _b;\n\n    if (!styles) return;\n\n    if (input && child.type.id === \"InputLeftElement\") {\n      groupStyles.paddingStart = (_a = input.height) != null ? _a : input.h;\n    }\n\n    if (input && child.type.id === \"InputRightElement\") {\n      groupStyles.paddingEnd = (_b = input.height) != null ? _b : input.h;\n    }\n\n    if (child.type.id === \"InputRightAddon\") {\n      groupStyles.borderEndRadius = 0;\n    }\n\n    if (child.type.id === \"InputLeftAddon\") {\n      groupStyles.borderStartRadius = 0;\n    }\n  });\n  const clones = validChildren.map(child => {\n    var _a, _b;\n\n    const theming = compact({\n      size: ((_a = child.props) == null ? void 0 : _a.size) || props.size,\n      variant: ((_b = child.props) == null ? void 0 : _b.variant) || props.variant\n    });\n    return child.type.id !== \"Input\" ? cloneElement(child, theming) : cloneElement(child, Object.assign(theming, groupStyles, child.props));\n  });\n  return /* @__PURE__ */jsx(chakra.div, {\n    className: _className,\n    ref,\n    __css: {\n      width: \"100%\",\n      display: \"flex\",\n      position: \"relative\",\n      // Parts of inputs override z-index to ensure that they stack correctly on each other\n      // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n      isolation: \"isolate\",\n      ...styles.group\n    },\n    \"data-group\": true,\n    ...rest,\n    children: /* @__PURE__ */jsx(InputGroupStylesProvider, {\n      value: styles,\n      children: clones\n    })\n  });\n});\nInputGroup.displayName = \"InputGroup\";\nexport { useInputGroupStyles, InputGroup };","map":{"version":3,"mappings":";;AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SACEC,MADF,EAEEC,UAFF,EAIEC,gBAJF,EAOEC,mBAPF,QAQO,mBARP;AASA,SAASC,EAAT,QAAmB,yBAAnB;AACA,SAASC,OAAT,QAAwB,yBAAxB;AACA,SAASC,YAAT,QAA6B,OAA7B;AA8EQ;AA5ER,IAAM,CAACC,wBAAD,EAA2BC,mBAA3B,IAAkDV,cAEtD;EACAW,MAAM,yBADN;EAEAC,cAAc;AAFd,CAFsD,CAAxD;AAaO,IAAMC,aAAaV,WACxB,SAASU,WAAT,CAAoBC,KAApB,EAA2BC,GAA3B,EAAgC;EAC9B,MAAMC,SAASX,oBAAoB,OAApB,EAA6BS,KAA7B,CAAf;EACA,MAAM;IAAEG,QAAF;IAAYC,SAAZ;IAAuB,GAAGC;EAA1B,IAAmCf,iBAAiBU,KAAjB,CAAzC;;EAEA,MAAMM,aAAad,GAAG,qBAAH,EAA0BY,SAA1B,CAAnB;;EACA,MAAMG,cAA+B,EAArC;EAEA,MAAMC,gBAAgBrB,iBAAiBgB,QAAjB,CAAtB;EAEA,MAAMM,QAAaP,OAAOQ,KAA1B;EAEAF,cAAcG,OAAd,CAAuBC,KAAD,IAAgB;IAxC1C;;IAyCM,IAAI,CAACV,MAAL,EAAa;;IAEb,IAAIO,SAASG,MAAMC,IAAN,CAAWC,EAAX,KAAkB,kBAA/B,EAAmD;MACjDP,YAAYQ,YAAZ,GAAY,CAAeC,WAAMC,MAArB,KAAe,IAAf,GAAeD,EAAf,GAA+BP,MAAMS,CAAjD;IACF;;IAEA,IAAIT,SAASG,MAAMC,IAAN,CAAWC,EAAX,KAAkB,mBAA/B,EAAoD;MAClDP,YAAYY,UAAZ,GAAY,CAAaC,WAAMH,MAAnB,KAAa,IAAb,GAAaG,EAAb,GAA6BX,MAAMS,CAA/C;IACF;;IAEA,IAAIN,MAAMC,IAAN,CAAWC,EAAX,KAAkB,iBAAtB,EAAyC;MACvCP,YAAYc,eAAZ,GAA8B,CAA9B;IACF;;IAEA,IAAIT,MAAMC,IAAN,CAAWC,EAAX,KAAkB,gBAAtB,EAAwC;MACtCP,YAAYe,iBAAZ,GAAgC,CAAhC;IACF;EACD,CAlBD;EAoBA,MAAMC,SAASf,cAAcgB,GAAd,CAAmBZ,KAAD,IAAgB;IA5DrD;;IAiEM,MAAMa,UAAUhC,QAAQ;MACtBiC,QAAMV,WAAMhB,KAAZ,KAAM,IAAN,GAAM,MAAN,GAAMgB,GAAaU,IAAnB,KAA2B1B,MAAM0B,IADX;MAEtBC,WAASP,WAAMpB,KAAf,KAAS,IAAT,GAAS,MAAT,GAASoB,GAAaO,OAAtB,KAAiC3B,MAAM2B;IAFjB,CAAR,CAAhB;IAKA,OAAOf,MAAMC,IAAN,CAAWC,EAAX,KAAkB,OAAlB,GACHpB,aAAakB,KAAb,EAAoBa,OAApB,CADG,GAEH/B,aAAakB,KAAb,EAAoBgB,OAAOC,MAAP,CAAcJ,OAAd,EAAuBlB,WAAvB,EAAoCK,MAAMZ,KAA1C,CAApB,CAFJ;EAGD,CAbc,CAAf;EAeA,OACE,mBAACZ,OAAO0C,GAAR,EAAC;IACC1B,WAAWE,UADZ;IAECL,GAFD;IAGC8B,OAAO;MACLC,OAAO,MADF;MAELC,SAAS,MAFJ;MAGLC,UAAU,UAHL;MAGK;MAAA;MAGVC,WAAW,SANN;MAOL,GAAGjC,OAAOkC;IAPL,CAHR;IAYC,cAAU,IAZX;IAaE,GAAG/B,IAbL;IAeCF,6BAACR,wBAAD,EAAC;MAAyB0C,OAAOnC,MAAhC;MACEC;IADF,CAAD;EAfD,CAAD,CADF;AAqBF,CApEwB,CAAnB;AAuEPJ,WAAWuC,WAAX,GAAyB,YAAzB","names":["createContext","getValidChildren","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","compact","cloneElement","InputGroupStylesProvider","useInputGroupStyles","name","errorMessage","InputGroup","props","ref","styles","children","className","rest","_className","groupStyles","validChildren","input","field","forEach","child","type","id","paddingStart","_a","height","h","paddingEnd","_b","borderEndRadius","borderStartRadius","clones","map","theming","size","variant","Object","assign","div","__css","width","display","position","isolation","group","value","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\input\\src\\input-group.tsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { compact } from \"@chakra-ui/object-utils\"\nimport { cloneElement } from \"react\"\n\nconst [InputGroupStylesProvider, useInputGroupStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `InputGroupStylesContext`,\n  errorMessage: `useInputGroupStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<InputGroup />\" `,\n})\n\nexport { useInputGroupStyles }\n\nexport interface InputGroupProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"Input\"> {}\n\nexport const InputGroup = forwardRef<InputGroupProps, \"div\">(\n  function InputGroup(props, ref) {\n    const styles = useMultiStyleConfig(\"Input\", props)\n    const { children, className, ...rest } = omitThemingProps(props)\n\n    const _className = cx(\"chakra-input__group\", className)\n    const groupStyles: InputGroupProps = {}\n\n    const validChildren = getValidChildren(children)\n\n    const input: any = styles.field\n\n    validChildren.forEach((child: any) => {\n      if (!styles) return\n\n      if (input && child.type.id === \"InputLeftElement\") {\n        groupStyles.paddingStart = input.height ?? input.h\n      }\n\n      if (input && child.type.id === \"InputRightElement\") {\n        groupStyles.paddingEnd = input.height ?? input.h\n      }\n\n      if (child.type.id === \"InputRightAddon\") {\n        groupStyles.borderEndRadius = 0\n      }\n\n      if (child.type.id === \"InputLeftAddon\") {\n        groupStyles.borderStartRadius = 0\n      }\n    })\n\n    const clones = validChildren.map((child: any) => {\n      /**\n       * Make it possible to override the size and variant from `Input`\n       */\n\n      const theming = compact({\n        size: child.props?.size || props.size,\n        variant: child.props?.variant || props.variant,\n      })\n\n      return child.type.id !== \"Input\"\n        ? cloneElement(child, theming)\n        : cloneElement(child, Object.assign(theming, groupStyles, child.props))\n    })\n\n    return (\n      <chakra.div\n        className={_className}\n        ref={ref}\n        __css={{\n          width: \"100%\",\n          display: \"flex\",\n          position: \"relative\",\n          // Parts of inputs override z-index to ensure that they stack correctly on each other\n          // Create a new stacking context so that these overrides don't leak out and conflict with other z-indexes\n          isolation: \"isolate\",\n          ...styles.group,\n        }}\n        data-group\n        {...rest}\n      >\n        <InputGroupStylesProvider value={styles}>\n          {clones}\n        </InputGroupStylesProvider>\n      </chakra.div>\n    )\n  },\n)\n\nInputGroup.displayName = \"InputGroup\"\n"]},"metadata":{},"sourceType":"module"}