{"ast":null,"code":"'use client'; // src/textarea.tsx\n\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\"; // ../../utilities/object-utils/src/omit.ts\n\nfunction omit(object) {\n  let keysToOmit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const clone = Object.assign({}, object);\n\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key];\n    }\n  }\n\n  return clone;\n} // src/textarea.tsx\n\n\nimport { jsx } from \"react/jsx-runtime\";\nvar omitted = [\"h\", \"minH\", \"height\", \"minHeight\"];\nvar Textarea = forwardRef((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props);\n  const {\n    className,\n    rows,\n    ...rest\n  } = omitThemingProps(props);\n  const textareaProps = useFormControl(rest);\n  const textareaStyles = rows ? omit(styles, omitted) : styles;\n  return /* @__PURE__ */jsx(chakra.textarea, {\n    ref,\n    rows,\n    ...textareaProps,\n    className: cx(\"chakra-textarea\", className),\n    __css: textareaStyles\n  });\n});\nTextarea.displayName = \"Textarea\";\nexport { Textarea };","map":{"version":3,"mappings":";;AAAA,SAA6BA,cAA7B,QAAmD,yBAAnD;AACA,SACEC,MADF,EAEEC,UAFF,EAIEC,gBAJF,EAMEC,cANF,QAOO,mBAPP;AAQA,SAASC,EAAT,QAAmB,yBAAnB,C;;ACTO,SAASC,IAAT,CACLC,MADK,EAGL;EAAA,IADAC,UACA,uEADkB,EAClB;EACA,MAAMC,QAAiCC,OAAOC,MAAP,CAAc,EAAd,EAAkBJ,MAAlB,CAAvC;;EACA,WAAWK,GAAX,IAAkBJ,UAAlB,EAA8B;IAC5B,IAAII,OAAOH,KAAX,EAAkB;MAChB,OAAOA,MAAMG,GAAN,CAAP;IACF;EACF;;EACA,OAAOH,KAAP;AACF,C;;;ADwCI;AAtBJ,IAAMI,UAAU,CAAC,GAAD,EAAM,MAAN,EAAc,QAAd,EAAwB,WAAxB,CAAhB;AAYO,IAAMC,WAAWZ,WAAsC,CAACa,KAAD,EAAQC,GAAR,KAAgB;EAC5E,MAAMC,SAASb,eAAe,UAAf,EAA2BW,KAA3B,CAAf;EACA,MAAM;IAAEG,SAAF;IAAaC,IAAb;IAAmB,GAAGC;EAAtB,IAA+BjB,iBAAiBY,KAAjB,CAArC;EAEA,MAAMM,gBAAgBrB,eAAoCoB,IAApC,CAAtB;EAGA,MAAME,iBAAiBH,OAAOb,KAAKW,MAAL,EAAaJ,OAAb,CAAP,GAA+BI,MAAtD;EAEA,OACE,mBAAChB,OAAOsB,QAAR,EAAC;IACCP,GADD;IAECG,IAFD;IAGE,GAAGE,aAHL;IAICH,WAAWb,GAAG,iBAAH,EAAsBa,SAAtB,CAJZ;IAKCM,OAAOF;EALR,CAAD,CADF;AASD,CAlBuB,CAAjB;AAoBPR,SAASW,WAAT,GAAuB,UAAvB","names":["useFormControl","chakra","forwardRef","omitThemingProps","useStyleConfig","cx","omit","object","keysToOmit","clone","Object","assign","key","omitted","Textarea","props","ref","styles","className","rows","rest","textareaProps","textareaStyles","textarea","__css","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\textarea\\src\\textarea.tsx","C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\utilities\\object-utils\\src\\omit.ts"],"sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { omit } from \"@chakra-ui/object-utils\"\n\ninterface TextareaOptions {\n  /**\n   * The border color when the textarea is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the textarea is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\"\n\nconst omitted = [\"h\", \"minH\", \"height\", \"minHeight\"]\n\nexport interface TextareaProps\n  extends Omit<HTMLChakraProps<\"textarea\">, Omitted>,\n    TextareaOptions,\n    FormControlOptions,\n    ThemingProps<\"Textarea\"> {}\n\n/**\n * Textarea is used to enter an amount of text that's longer than a single line\n * @see Docs https://chakra-ui.com/textarea\n */\nexport const Textarea = forwardRef<TextareaProps, \"textarea\">((props, ref) => {\n  const styles = useStyleConfig(\"Textarea\", props)\n  const { className, rows, ...rest } = omitThemingProps(props)\n\n  const textareaProps = useFormControl<HTMLTextAreaElement>(rest)\n\n  //@ts-ignore\n  const textareaStyles = rows ? omit(styles, omitted) : styles\n\n  return (\n    <chakra.textarea\n      ref={ref}\n      rows={rows}\n      {...textareaProps}\n      className={cx(\"chakra-textarea\", className)}\n      __css={textareaStyles}\n    />\n  )\n})\n\nTextarea.displayName = \"Textarea\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n"]},"metadata":{},"sourceType":"module"}