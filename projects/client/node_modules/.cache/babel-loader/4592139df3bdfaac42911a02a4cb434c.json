{"ast":null,"code":"import { cssVariableRegex } from '../../../render/dom/utils/is-css-variable.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { colorRegex, floatRegex, isString, sanitize } from '../utils.mjs';\n\nfunction test(v) {\n  var _a, _b;\n\n  return isNaN(v) && isString(v) && (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) + (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) > 0;\n}\n\nconst cssVarTokeniser = {\n  regex: cssVariableRegex,\n  countKey: \"Vars\",\n  token: \"${v}\",\n  parse: noop\n};\nconst colorTokeniser = {\n  regex: colorRegex,\n  countKey: \"Colors\",\n  token: \"${c}\",\n  parse: color.parse\n};\nconst numberTokeniser = {\n  regex: floatRegex,\n  countKey: \"Numbers\",\n  token: \"${n}\",\n  parse: number.parse\n};\n\nfunction tokenise(info, _ref) {\n  let {\n    regex,\n    countKey,\n    token,\n    parse\n  } = _ref;\n  const matches = info.tokenised.match(regex);\n  if (!matches) return;\n  info[\"num\" + countKey] = matches.length;\n  info.tokenised = info.tokenised.replace(regex, token);\n  info.values.push(...matches.map(parse));\n}\n\nfunction analyseComplexValue(value) {\n  const originalValue = value.toString();\n  const info = {\n    value: originalValue,\n    tokenised: originalValue,\n    values: [],\n    numVars: 0,\n    numColors: 0,\n    numNumbers: 0\n  };\n  if (info.value.includes(\"var(--\")) tokenise(info, cssVarTokeniser);\n  tokenise(info, colorTokeniser);\n  tokenise(info, numberTokeniser);\n  return info;\n}\n\nfunction parseComplexValue(v) {\n  return analyseComplexValue(v).values;\n}\n\nfunction createTransformer(source) {\n  const {\n    values,\n    numColors,\n    numVars,\n    tokenised\n  } = analyseComplexValue(source);\n  const numValues = values.length;\n  return v => {\n    let output = tokenised;\n\n    for (let i = 0; i < numValues; i++) {\n      if (i < numVars) {\n        output = output.replace(cssVarTokeniser.token, v[i]);\n      } else if (i < numVars + numColors) {\n        output = output.replace(colorTokeniser.token, color.transform(v[i]));\n      } else {\n        output = output.replace(numberTokeniser.token, sanitize(v[i]));\n      }\n    }\n\n    return output;\n  };\n}\n\nconst convertNumbersToZero = v => typeof v === \"number\" ? 0 : v;\n\nfunction getAnimatableNone(v) {\n  const parsed = parseComplexValue(v);\n  const transformer = createTransformer(v);\n  return transformer(parsed.map(convertNumbersToZero));\n}\n\nconst complex = {\n  test,\n  parse: parseComplexValue,\n  createTransformer,\n  getAnimatableNone\n};\nexport { analyseComplexValue, complex };","map":{"version":3,"names":["cssVariableRegex","noop","color","number","colorRegex","floatRegex","isString","sanitize","test","v","_a","_b","isNaN","match","length","cssVarTokeniser","regex","countKey","token","parse","colorTokeniser","numberTokeniser","tokenise","info","matches","tokenised","replace","values","push","map","analyseComplexValue","value","originalValue","toString","numVars","numColors","numNumbers","includes","parseComplexValue","createTransformer","source","numValues","output","i","transform","convertNumbersToZero","getAnimatableNone","parsed","transformer","complex"],"sources":["C:/Purwadhika/JCWD Bandung/4. REAL PROJECT/JCWD0108-03/node_modules/framer-motion/dist/es/value/types/complex/index.mjs"],"sourcesContent":["import { cssVariableRegex } from '../../../render/dom/utils/is-css-variable.mjs';\nimport { noop } from '../../../utils/noop.mjs';\nimport { color } from '../color/index.mjs';\nimport { number } from '../numbers/index.mjs';\nimport { colorRegex, floatRegex, isString, sanitize } from '../utils.mjs';\n\nfunction test(v) {\n    var _a, _b;\n    return (isNaN(v) &&\n        isString(v) &&\n        (((_a = v.match(floatRegex)) === null || _a === void 0 ? void 0 : _a.length) || 0) +\n            (((_b = v.match(colorRegex)) === null || _b === void 0 ? void 0 : _b.length) || 0) >\n            0);\n}\nconst cssVarTokeniser = {\n    regex: cssVariableRegex,\n    countKey: \"Vars\",\n    token: \"${v}\",\n    parse: noop,\n};\nconst colorTokeniser = {\n    regex: colorRegex,\n    countKey: \"Colors\",\n    token: \"${c}\",\n    parse: color.parse,\n};\nconst numberTokeniser = {\n    regex: floatRegex,\n    countKey: \"Numbers\",\n    token: \"${n}\",\n    parse: number.parse,\n};\nfunction tokenise(info, { regex, countKey, token, parse }) {\n    const matches = info.tokenised.match(regex);\n    if (!matches)\n        return;\n    info[\"num\" + countKey] = matches.length;\n    info.tokenised = info.tokenised.replace(regex, token);\n    info.values.push(...matches.map(parse));\n}\nfunction analyseComplexValue(value) {\n    const originalValue = value.toString();\n    const info = {\n        value: originalValue,\n        tokenised: originalValue,\n        values: [],\n        numVars: 0,\n        numColors: 0,\n        numNumbers: 0,\n    };\n    if (info.value.includes(\"var(--\"))\n        tokenise(info, cssVarTokeniser);\n    tokenise(info, colorTokeniser);\n    tokenise(info, numberTokeniser);\n    return info;\n}\nfunction parseComplexValue(v) {\n    return analyseComplexValue(v).values;\n}\nfunction createTransformer(source) {\n    const { values, numColors, numVars, tokenised } = analyseComplexValue(source);\n    const numValues = values.length;\n    return (v) => {\n        let output = tokenised;\n        for (let i = 0; i < numValues; i++) {\n            if (i < numVars) {\n                output = output.replace(cssVarTokeniser.token, v[i]);\n            }\n            else if (i < numVars + numColors) {\n                output = output.replace(colorTokeniser.token, color.transform(v[i]));\n            }\n            else {\n                output = output.replace(numberTokeniser.token, sanitize(v[i]));\n            }\n        }\n        return output;\n    };\n}\nconst convertNumbersToZero = (v) => typeof v === \"number\" ? 0 : v;\nfunction getAnimatableNone(v) {\n    const parsed = parseComplexValue(v);\n    const transformer = createTransformer(v);\n    return transformer(parsed.map(convertNumbersToZero));\n}\nconst complex = {\n    test,\n    parse: parseComplexValue,\n    createTransformer,\n    getAnimatableNone,\n};\n\nexport { analyseComplexValue, complex };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}