{"ast":null,"code":"'use client'; // src/color.ts\n\nimport { getCSSVar } from \"@chakra-ui/styled-system\";\nimport { toHex, parseToRgba, transparentize as setTransparency, mix, darken as reduceLightness, lighten as increaseLightness, getContrast, parseToHsla, hsla, getLuminance } from \"color2k\"; // ../../../node_modules/.pnpm/dlv@1.1.3/node_modules/dlv/dist/dlv.es.js\n\nfunction dlv_es_default(t, e, l, n, r) {\n  for (e = e.split ? e.split(\".\") : e, n = 0; n < e.length; n++) t = t ? t[e[n]] : r;\n\n  return t === r ? l : t;\n} // src/color.ts\n\n\nvar isEmptyObject = obj => Object.keys(obj).length === 0;\n\nvar getColor = (theme, color, fallback) => {\n  const hex = dlv_es_default(theme, `colors.${color}`, color);\n\n  try {\n    toHex(hex);\n    return hex;\n  } catch {\n    return fallback != null ? fallback : \"#000000\";\n  }\n};\n\nvar getColorVar = (theme, color, fallback) => {\n  var _a;\n\n  return (_a = getCSSVar(theme, \"colors\", color)) != null ? _a : fallback;\n};\n\nvar getBrightness = color => {\n  const [r, g, b] = parseToRgba(color);\n  return (r * 299 + g * 587 + b * 114) / 1e3;\n};\n\nvar tone = color => theme => {\n  const hex = getColor(theme, color);\n  const brightness = getBrightness(hex);\n  const isDark2 = brightness < 128;\n  return isDark2 ? \"dark\" : \"light\";\n};\n\nvar isDark = color => theme => tone(color)(theme) === \"dark\";\n\nvar isLight = color => theme => tone(color)(theme) === \"light\";\n\nvar transparentize = (color, opacity) => theme => {\n  const raw = getColor(theme, color);\n  return setTransparency(raw, 1 - opacity);\n};\n\nvar whiten = (color, amount) => theme => {\n  const raw = getColor(theme, color);\n  return toHex(mix(raw, \"#fff\", amount));\n};\n\nvar blacken = (color, amount) => theme => {\n  const raw = getColor(theme, color);\n  return toHex(mix(raw, \"#000\", amount / 100));\n};\n\nvar darken = (color, amount) => theme => {\n  const raw = getColor(theme, color);\n  return toHex(reduceLightness(raw, amount / 100));\n};\n\nvar lighten = (color, amount) => theme => {\n  const raw = getColor(theme, color);\n  toHex(increaseLightness(raw, amount / 100));\n};\n\nvar contrast = (fg, bg) => theme => getContrast(getColor(theme, bg), getColor(theme, fg));\n\nvar isAccessible = (textColor, bgColor, options) => theme => isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);\n\nfunction isReadable(color1, color2) {\n  let wcag2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n    level: \"AA\",\n    size: \"small\"\n  };\n\n  var _a, _b;\n\n  const readabilityLevel = readability(color1, color2);\n\n  switch (((_a = wcag2.level) != null ? _a : \"AA\") + ((_b = wcag2.size) != null ? _b : \"small\")) {\n    case \"AAsmall\":\n    case \"AAAlarge\":\n      return readabilityLevel >= 4.5;\n\n    case \"AAlarge\":\n      return readabilityLevel >= 3;\n\n    case \"AAAsmall\":\n      return readabilityLevel >= 7;\n\n    default:\n      return false;\n  }\n}\n\nfunction readability(color1, color2) {\n  return (Math.max(getLuminance(color1), getLuminance(color2)) + 0.05) / (Math.min(getLuminance(color1), getLuminance(color2)) + 0.05);\n}\n\nvar complementary = color => theme => {\n  const raw = getColor(theme, color);\n  const hsl = parseToHsla(raw);\n  const complementHsl = Object.assign(hsl, [(hsl[0] + 180) % 360]);\n  return toHex(hsla(...complementHsl));\n};\n\nfunction generateStripe() {\n  let size = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"1rem\";\n  let color = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"rgba(255, 255, 255, 0.15)\";\n  return {\n    backgroundImage: `linear-gradient(\n    45deg,\n    ${color} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${color} 50%,\n    ${color} 75%,\n    transparent 75%,\n    transparent\n  )`,\n    backgroundSize: `${size} ${size}`\n  };\n}\n\nvar randomHex = () => `#${Math.floor(Math.random() * 16777215).toString(16).padEnd(6, \"0\")}`;\n\nfunction randomColor(opts) {\n  const fallback = randomHex();\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback;\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n\n  return fallback;\n}\n\nfunction randomColorFromString(str) {\n  let hash = 0;\n  if (str.length === 0) return hash.toString();\n\n  for (let i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n\n  let color = \"#\";\n\n  for (let j = 0; j < 3; j += 1) {\n    const value = hash >> j * 8 & 255;\n    color += `00${value.toString(16)}`.substr(-2);\n  }\n\n  return color;\n}\n\nfunction randomColorFromList(str, list) {\n  let index = 0;\n  if (str.length === 0) return list[0];\n\n  for (let i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n\n  index = (index % list.length + list.length) % list.length;\n  return list[index];\n}\n\nfunction randomFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n\nexport { getColor, getColorVar, tone, isDark, isLight, transparentize, whiten, blacken, darken, lighten, contrast, isAccessible, isReadable, readability, complementary, generateStripe, randomColor };","map":{"version":3,"mappings":"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","names":["getCSSVar","toHex","parseToRgba","transparentize","setTransparency","mix","darken","reduceLightness","lighten","increaseLightness","getContrast","parseToHsla","hsla","getLuminance","obj","key","def","p","undef","split","length","isEmptyObject","Object","keys","getColor","theme","color","fallback","hex","dlv_es_default","getColorVar","_a","getBrightness","r","g","b","tone","brightness","isDark","isLight","opacity","raw","whiten","amount","blacken","contrast","fg","bg","isAccessible","textColor","bgColor","options","isReadable","color1","color2","wcag2","level","size","readabilityLevel","readability","_b","Math","max","min","complementary","hsl","complementHsl","assign","generateStripe","backgroundImage","backgroundSize","randomHex","floor","random","toString","padEnd","randomColor","opts","string","colors","randomColorFromList","randomColorFromString","randomFromList","str","hash","i","charCodeAt","j","value","substr","list","index"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\theme-tools\\src\\color.ts","C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\.pnpm\\dlv@1.1.3\\node_modules\\dlv\\index.js"],"sourcesContent":["import { getCSSVar } from \"@chakra-ui/styled-system\"\nimport {\n  toHex,\n  parseToRgba,\n  transparentize as setTransparency,\n  mix,\n  darken as reduceLightness,\n  lighten as increaseLightness,\n  getContrast,\n  parseToHsla,\n  hsla,\n  getLuminance,\n} from \"color2k\"\n\nimport get from \"dlv\"\n\ntype Dict = { [key: string]: any }\nconst isEmptyObject = (obj: any) => Object.keys(obj).length === 0\n\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const getColor = (theme: Dict, color: string, fallback?: string) => {\n  const hex = get(theme, `colors.${color}`, color)\n  try {\n    toHex(hex)\n    return hex\n  } catch {\n    // returning black to stay consistent with TinyColor behaviour so as to prevent breaking change\n    return fallback ?? \"#000000\"\n  }\n}\n\n/**\n * Get the color css variable from theme\n */\nexport const getColorVar = (theme: Dict, color: string, fallback?: string) => {\n  return getCSSVar(theme, \"colors\", color) ?? fallback\n}\n\nconst getBrightness = (color: string) => {\n  const [r, g, b] = parseToRgba(color)\n  // http://www.w3.org/TR/AERT#color-contrast\n  return (r * 299 + g * 587 + b * 114) / 1000\n}\n\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const tone = (color: string) => (theme: Dict) => {\n  const hex = getColor(theme, color)\n  const brightness = getBrightness(hex)\n  const isDark = brightness < 128\n  return isDark ? \"dark\" : \"light\"\n}\n\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const isDark = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"dark\"\n\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const isLight = (color: string) => (theme: Dict) =>\n  tone(color)(theme) === \"light\"\n\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param opacity - the amount of opacity the color should have (0-1)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const transparentize =\n  (color: string, opacity: number) => (theme: Dict) => {\n    const raw = getColor(theme, color)\n    return setTransparency(raw, 1 - opacity)\n  }\n\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const whiten = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return toHex(mix(raw, \"#fff\", amount))\n}\n\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const blacken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return toHex(mix(raw, \"#000\", amount / 100))\n}\n\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const darken = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  return toHex(reduceLightness(raw, amount / 100))\n}\n\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-100)\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const lighten = (color: string, amount: number) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  toHex(increaseLightness(raw, amount / 100))\n}\n\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const contrast = (fg: string, bg: string) => (theme: Dict) =>\n  getContrast(getColor(theme, bg), getColor(theme, fg))\n\ninterface WCAG2Params {\n  level?: \"AA\" | \"AAA\"\n  size?: \"large\" | \"small\"\n}\n\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for contrast ratio.\n *\n * @param textColor - the foreground or text color\n * @param bgColor - the background color\n * @param options\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const isAccessible =\n  (textColor: string, bgColor: string, options?: WCAG2Params) =>\n  (theme: Dict) =>\n    isReadable(getColor(theme, bgColor), getColor(theme, textColor), options)\n\nexport function isReadable(\n  color1: string,\n  color2: string,\n  wcag2: WCAG2Params = { level: \"AA\", size: \"small\" },\n): boolean {\n  const readabilityLevel = readability(color1, color2)\n  switch ((wcag2.level ?? \"AA\") + (wcag2.size ?? \"small\")) {\n    case \"AAsmall\":\n    case \"AAAlarge\":\n      return readabilityLevel >= 4.5\n    case \"AAlarge\":\n      return readabilityLevel >= 3\n    case \"AAAsmall\":\n      return readabilityLevel >= 7\n    default:\n      return false\n  }\n}\n\nexport function readability(color1: string, color2: string): number {\n  return (\n    (Math.max(getLuminance(color1), getLuminance(color2)) + 0.05) /\n    (Math.min(getLuminance(color1), getLuminance(color2)) + 0.05)\n  )\n}\n/**\n *\n * @deprecated This will be removed in the next major release.\n */\nexport const complementary = (color: string) => (theme: Dict) => {\n  const raw = getColor(theme, color)\n  const hsl = parseToHsla(raw)\n  const complementHsl: [number, number, number, number] = Object.assign(hsl, [\n    (hsl[0] + 180) % 360,\n  ])\n  return toHex(hsla(...complementHsl))\n}\n\nexport function generateStripe(\n  size = \"1rem\",\n  color = \"rgba(255, 255, 255, 0.15)\",\n) {\n  return {\n    backgroundImage: `linear-gradient(\n    45deg,\n    ${color} 25%,\n    transparent 25%,\n    transparent 50%,\n    ${color} 50%,\n    ${color} 75%,\n    transparent 75%,\n    transparent\n  )`,\n    backgroundSize: `${size} ${size}`,\n  }\n}\n\ninterface RandomColorOptions {\n  /**\n   * If passed, string will be used to generate\n   * random color\n   */\n  string?: string\n  /**\n   * List of colors to pick from at random\n   */\n  colors?: string[]\n}\n\nconst randomHex = () =>\n  `#${Math.floor(Math.random() * 0xffffff)\n    .toString(16)\n    .padEnd(6, \"0\")}`\n\nexport function randomColor(opts?: RandomColorOptions) {\n  const fallback = randomHex()\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors)\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string)\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors)\n  }\n\n  return fallback\n}\n\nfunction randomColorFromString(str: string) {\n  let hash = 0\n  if (str.length === 0) return hash.toString()\n  for (let i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash)\n    hash = hash & hash\n  }\n  let color = \"#\"\n  for (let j = 0; j < 3; j += 1) {\n    const value = (hash >> (j * 8)) & 255\n    color += `00${value.toString(16)}`.substr(-2)\n  }\n  return color\n}\n\nfunction randomColorFromList(str: string, list: string[]) {\n  let index = 0\n  if (str.length === 0) return list[0]\n  for (let i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index)\n    index = index & index\n  }\n  index = ((index % list.length) + list.length) % list.length\n  return list[index]\n}\n\nfunction randomFromList(list: string[]) {\n  return list[Math.floor(Math.random() * list.length)]\n}\n","export default function dlv(obj, key, def, p, undef) {\n\tkey = key.split ? key.split('.') : key;\n\tfor (p = 0; p < key.length; p++) {\n\t\tobj = obj ? obj[key[p]] : undef;\n\t}\n\treturn obj === undef ? def : obj;\n}\n"]},"metadata":{},"sourceType":"module"}