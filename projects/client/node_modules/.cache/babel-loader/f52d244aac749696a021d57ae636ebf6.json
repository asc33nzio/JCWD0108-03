{"ast":null,"code":"'use client';\n\nimport { useFormControlContext, useFormControlStyles } from \"./chunk-R42ZB7PB.mjs\"; // src/form-label.tsx\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar FormLabel = forwardRef(function FormLabel2(passedProps, ref) {\n  var _a;\n\n  const styles = useStyleConfig(\"FormLabel\", passedProps);\n  const props = omitThemingProps(passedProps);\n  const {\n    className,\n    children,\n    requiredIndicator = /* @__PURE__ */jsx(RequiredIndicator, {}),\n    optionalIndicator = null,\n    ...rest\n  } = props;\n  const field = useFormControlContext();\n  const ownProps = (_a = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _a : {\n    ref,\n    ...rest\n  };\n  return /* @__PURE__ */jsxs(chakra.label, { ...ownProps,\n    className: cx(\"chakra-form__label\", props.className),\n    __css: {\n      display: \"block\",\n      textAlign: \"start\",\n      ...styles\n    },\n    children: [children, (field == null ? void 0 : field.isRequired) ? requiredIndicator : optionalIndicator]\n  });\n});\nFormLabel.displayName = \"FormLabel\";\nvar RequiredIndicator = forwardRef(function RequiredIndicator2(props, ref) {\n  const field = useFormControlContext();\n  const styles = useFormControlStyles();\n  if (!(field == null ? void 0 : field.isRequired)) return null;\n  const className = cx(\"chakra-form__required-indicator\", props.className);\n  return /* @__PURE__ */jsx(chakra.span, { ...(field == null ? void 0 : field.getRequiredIndicatorProps(props, ref)),\n    __css: styles.requiredIndicator,\n    className\n  });\n});\nRequiredIndicator.displayName = \"RequiredIndicator\";\nexport { FormLabel, RequiredIndicator };","map":{"version":3,"mappings":";;;;AAAA,SACEA,MADF,EAEEC,UAFF,EAIEC,gBAJF,EAMEC,cANF,QAOO,mBAPP;AAQA,SAASC,EAAT,QAAmB,yBAAnB;AAkCwB,cASpBC,IAToB;AAVjB,IAAMC,YAAYL,WAAoC,SAASK,UAAT,CAC3DC,WAD2D,EAE3DC,GAF2D,EAG3D;EAnCF;;EAoCE,MAAMC,SAASN,eAAe,WAAf,EAA4BI,WAA5B,CAAf;EACA,MAAMG,QAAQR,iBAAiBK,WAAjB,CAAd;EAEA,MAAM;IACJI,SADI;IAEJC,QAFI;IAGJC,oBAAoB,mBAACC,iBAAD,EAAC,EAAD,CAHhB;IAIJC,oBAAoB,IAJhB;IAKJ,GAAGC;EALC,IAMFN,KANJ;EAQA,MAAMO,QAAQC,uBAAd;EACA,MAAMC,YAAWC,oCAAOC,aAAP,CAAqBL,IAArB,EAA2BR,GAA3B,CAAX,KAAW,IAAX,GAAWY,EAAX,GAA8C;IAAEZ,GAAF;IAAO,GAAGQ;EAAV,CAApD;EAEA,OACE,oBAAChB,OAAOsB,KAAR,EAAC,EACE,GAAGH,QADL;IAECR,WAAWP,GAAG,oBAAH,EAAyBM,MAAMC,SAA/B,CAFZ;IAGCY,OAAO;MACLC,SAAS,OADJ;MAELC,WAAW,OAFN;MAGL,GAAGhB;IAHE,CAHR;IASEG,sBACAK,+BAAOS,UADP,IACoBb,iBADpB,GACwCE,iBADxC;EATF,CAAD,CADF;AAcD,CAhCwB,CAAlB;AAkCPT,UAAUqB,WAAV,GAAwB,WAAxB;AAQO,IAAMb,oBAAoBb,WAC/B,SAASa,kBAAT,CAA2BJ,KAA3B,EAAkCF,GAAlC,EAAuC;EACrC,MAAMS,QAAQC,uBAAd;EACA,MAAMT,SAASmB,sBAAf;EAEA,IAAI,EAACX,+BAAOS,UAAR,CAAJ,EAAwB,OAAO,IAAP;EAExB,MAAMf,YAAYP,GAAG,iCAAH,EAAsCM,MAAMC,SAA5C,CAAlB;EAEA,OACE,mBAACX,OAAO6B,IAAR,EAAC,EACE,IAAGZ,+BAAOa,yBAAP,CAAiCpB,KAAjC,EAAwCF,GAAxC,CAAH,CADF;IAECe,OAAOd,OAAOI,iBAFf;IAGCF;EAHD,CAAD,CADF;AAOF,CAhB+B,CAA1B;AAmBPG,kBAAkBa,WAAlB,GAAgC,mBAAhC","names":["chakra","forwardRef","omitThemingProps","useStyleConfig","cx","jsxs","FormLabel","passedProps","ref","styles","props","className","children","requiredIndicator","RequiredIndicator","optionalIndicator","rest","field","useFormControlContext","ownProps","_a","getLabelProps","label","__css","display","textAlign","isRequired","displayName","useFormControlStyles","span","getRequiredIndicatorProps"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\form-control\\src\\form-label.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useFormControlContext, useFormControlStyles } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n  /**\n   * @type React.ReactNode\n   */\n  optionalIndicator?: React.ReactNode\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(function FormLabel(\n  passedProps,\n  ref,\n) {\n  const styles = useStyleConfig(\"FormLabel\", passedProps)\n  const props = omitThemingProps(passedProps)\n\n  const {\n    className,\n    children,\n    requiredIndicator = <RequiredIndicator />,\n    optionalIndicator = null,\n    ...rest\n  } = props\n\n  const field = useFormControlContext()\n  const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n  return (\n    <chakra.label\n      {...ownProps}\n      className={cx(\"chakra-form__label\", props.className)}\n      __css={{\n        display: \"block\",\n        textAlign: \"start\",\n        ...styles,\n      }}\n    >\n      {children}\n      {field?.isRequired ? requiredIndicator : optionalIndicator}\n    </chakra.label>\n  )\n})\n\nFormLabel.displayName = \"FormLabel\"\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  function RequiredIndicator(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nRequiredIndicator.displayName = \"RequiredIndicator\"\n"]},"metadata":{},"sourceType":"module"}