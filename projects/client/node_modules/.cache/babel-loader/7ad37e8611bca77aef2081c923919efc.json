{"ast":null,"code":"import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n  /**\n   * We dynamically generate the AnimationState manager as it contains a reference\n   * to the underlying animation library. We only want to load that if we load this,\n   * so people can optionally code split it out using the `m` component.\n   */\n  constructor(node) {\n    super(node);\n    node.animationState || (node.animationState = createAnimationState(node));\n  }\n\n  updateAnimationControlsSubscription() {\n    const {\n      animate\n    } = this.node.getProps();\n    this.unmount();\n\n    if (isAnimationControls(animate)) {\n      this.unmount = animate.subscribe(this.node);\n    }\n  }\n  /**\n   * Subscribe any provided AnimationControls to the component's VisualElement\n   */\n\n\n  mount() {\n    this.updateAnimationControlsSubscription();\n  }\n\n  update() {\n    const {\n      animate\n    } = this.node.getProps();\n    const {\n      animate: prevAnimate\n    } = this.node.prevProps || {};\n\n    if (animate !== prevAnimate) {\n      this.updateAnimationControlsSubscription();\n    }\n  }\n\n  unmount() {}\n\n}\n\nexport { AnimationFeature };","map":{"version":3,"names":["isAnimationControls","createAnimationState","Feature","AnimationFeature","constructor","node","animationState","updateAnimationControlsSubscription","animate","getProps","unmount","subscribe","mount","update","prevAnimate","prevProps"],"sources":["C:/Purwadhika/JCWD Bandung/4. REAL PROJECT/JCWD0108-03/node_modules/framer-motion/dist/es/motion/features/animation/index.mjs"],"sourcesContent":["import { isAnimationControls } from '../../../animation/utils/is-animation-controls.mjs';\nimport { createAnimationState } from '../../../render/utils/animation-state.mjs';\nimport { Feature } from '../Feature.mjs';\n\nclass AnimationFeature extends Feature {\n    /**\n     * We dynamically generate the AnimationState manager as it contains a reference\n     * to the underlying animation library. We only want to load that if we load this,\n     * so people can optionally code split it out using the `m` component.\n     */\n    constructor(node) {\n        super(node);\n        node.animationState || (node.animationState = createAnimationState(node));\n    }\n    updateAnimationControlsSubscription() {\n        const { animate } = this.node.getProps();\n        this.unmount();\n        if (isAnimationControls(animate)) {\n            this.unmount = animate.subscribe(this.node);\n        }\n    }\n    /**\n     * Subscribe any provided AnimationControls to the component's VisualElement\n     */\n    mount() {\n        this.updateAnimationControlsSubscription();\n    }\n    update() {\n        const { animate } = this.node.getProps();\n        const { animate: prevAnimate } = this.node.prevProps || {};\n        if (animate !== prevAnimate) {\n            this.updateAnimationControlsSubscription();\n        }\n    }\n    unmount() { }\n}\n\nexport { AnimationFeature };\n"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,oDAApC;AACA,SAASC,oBAAT,QAAqC,2CAArC;AACA,SAASC,OAAT,QAAwB,gBAAxB;;AAEA,MAAMC,gBAAN,SAA+BD,OAA/B,CAAuC;EACnC;AACJ;AACA;AACA;AACA;EACIE,WAAW,CAACC,IAAD,EAAO;IACd,MAAMA,IAAN;IACAA,IAAI,CAACC,cAAL,KAAwBD,IAAI,CAACC,cAAL,GAAsBL,oBAAoB,CAACI,IAAD,CAAlE;EACH;;EACDE,mCAAmC,GAAG;IAClC,MAAM;MAAEC;IAAF,IAAc,KAAKH,IAAL,CAAUI,QAAV,EAApB;IACA,KAAKC,OAAL;;IACA,IAAIV,mBAAmB,CAACQ,OAAD,CAAvB,EAAkC;MAC9B,KAAKE,OAAL,GAAeF,OAAO,CAACG,SAAR,CAAkB,KAAKN,IAAvB,CAAf;IACH;EACJ;EACD;AACJ;AACA;;;EACIO,KAAK,GAAG;IACJ,KAAKL,mCAAL;EACH;;EACDM,MAAM,GAAG;IACL,MAAM;MAAEL;IAAF,IAAc,KAAKH,IAAL,CAAUI,QAAV,EAApB;IACA,MAAM;MAAED,OAAO,EAAEM;IAAX,IAA2B,KAAKT,IAAL,CAAUU,SAAV,IAAuB,EAAxD;;IACA,IAAIP,OAAO,KAAKM,WAAhB,EAA6B;MACzB,KAAKP,mCAAL;IACH;EACJ;;EACDG,OAAO,GAAG,CAAG;;AA9BsB;;AAiCvC,SAASP,gBAAT"},"metadata":{},"sourceType":"module"}