{"ast":null,"code":"'use client';\n\nimport { useEventListeners } from \"./chunk-VDSXRTOE.mjs\"; // src/use-clickable.ts\n\nimport { dataAttr } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallback, useState } from \"react\";\n\nfunction isValidElement(event) {\n  const element = event.target;\n  const {\n    tagName,\n    isContentEditable\n  } = element;\n  return tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable !== true;\n}\n\nfunction useClickable() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    ref: htmlRef,\n    isDisabled,\n    isFocusable,\n    clickOnEnter = true,\n    clickOnSpace = true,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onKeyDown,\n    onKeyUp,\n    tabIndex: tabIndexProp,\n    onMouseOver,\n    onMouseLeave,\n    ...htmlProps\n  } = props;\n  const [isButton, setIsButton] = useState(true);\n  const [isPressed, setIsPressed] = useState(false);\n  const listeners = useEventListeners();\n\n  const refCallback = node => {\n    if (!node) return;\n\n    if (node.tagName !== \"BUTTON\") {\n      setIsButton(false);\n    }\n  };\n\n  const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0;\n  const trulyDisabled = isDisabled && !isFocusable;\n  const handleClick = useCallback(event => {\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    const self = event.currentTarget;\n    self.focus();\n    onClick == null ? void 0 : onClick(event);\n  }, [isDisabled, onClick]);\n  const onDocumentKeyUp = useCallback(e => {\n    if (isPressed && isValidElement(e)) {\n      e.preventDefault();\n      e.stopPropagation();\n      setIsPressed(false);\n      listeners.remove(document, \"keyup\", onDocumentKeyUp, false);\n    }\n  }, [isPressed, listeners]);\n  const handleKeyDown = useCallback(event => {\n    onKeyDown == null ? void 0 : onKeyDown(event);\n\n    if (isDisabled || event.defaultPrevented || event.metaKey) {\n      return;\n    }\n\n    if (!isValidElement(event.nativeEvent) || isButton) return;\n    const shouldClickOnEnter = clickOnEnter && event.key === \"Enter\";\n    const shouldClickOnSpace = clickOnSpace && event.key === \" \";\n\n    if (shouldClickOnSpace) {\n      event.preventDefault();\n      setIsPressed(true);\n    }\n\n    if (shouldClickOnEnter) {\n      event.preventDefault();\n      const self = event.currentTarget;\n      self.click();\n    }\n\n    listeners.add(document, \"keyup\", onDocumentKeyUp, false);\n  }, [isDisabled, isButton, onKeyDown, clickOnEnter, clickOnSpace, listeners, onDocumentKeyUp]);\n  const handleKeyUp = useCallback(event => {\n    onKeyUp == null ? void 0 : onKeyUp(event);\n    if (isDisabled || event.defaultPrevented || event.metaKey) return;\n    if (!isValidElement(event.nativeEvent) || isButton) return;\n    const shouldClickOnSpace = clickOnSpace && event.key === \" \";\n\n    if (shouldClickOnSpace) {\n      event.preventDefault();\n      setIsPressed(false);\n      const self = event.currentTarget;\n      self.click();\n    }\n  }, [clickOnSpace, isButton, isDisabled, onKeyUp]);\n  const onDocumentMouseUp = useCallback(event => {\n    if (event.button !== 0) return;\n    setIsPressed(false);\n    listeners.remove(document, \"mouseup\", onDocumentMouseUp, false);\n  }, [listeners]);\n  const handleMouseDown = useCallback(event => {\n    if (event.button !== 0) return;\n\n    if (isDisabled) {\n      event.stopPropagation();\n      event.preventDefault();\n      return;\n    }\n\n    if (!isButton) {\n      setIsPressed(true);\n    }\n\n    const target = event.currentTarget;\n    target.focus({\n      preventScroll: true\n    });\n    listeners.add(document, \"mouseup\", onDocumentMouseUp, false);\n    onMouseDown == null ? void 0 : onMouseDown(event);\n  }, [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp]);\n  const handleMouseUp = useCallback(event => {\n    if (event.button !== 0) return;\n\n    if (!isButton) {\n      setIsPressed(false);\n    }\n\n    onMouseUp == null ? void 0 : onMouseUp(event);\n  }, [onMouseUp, isButton]);\n  const handleMouseOver = useCallback(event => {\n    if (isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    onMouseOver == null ? void 0 : onMouseOver(event);\n  }, [isDisabled, onMouseOver]);\n  const handleMouseLeave = useCallback(event => {\n    if (isPressed) {\n      event.preventDefault();\n      setIsPressed(false);\n    }\n\n    onMouseLeave == null ? void 0 : onMouseLeave(event);\n  }, [isPressed, onMouseLeave]);\n  const ref = mergeRefs(htmlRef, refCallback);\n\n  if (isButton) {\n    return { ...htmlProps,\n      ref,\n      type: \"button\",\n      \"aria-disabled\": trulyDisabled ? void 0 : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown,\n      onMouseUp,\n      onKeyUp,\n      onKeyDown,\n      onMouseOver,\n      onMouseLeave\n    };\n  }\n\n  return { ...htmlProps,\n    ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isPressed),\n    \"aria-disabled\": isDisabled ? \"true\" : void 0,\n    tabIndex: trulyDisabled ? void 0 : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseLeave: handleMouseLeave\n  };\n}\n\nexport { useClickable };","map":{"version":3,"mappings":"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","names":["dataAttr","mergeRefs","useCallback","useState","isValidElement","event","element","target","tagName","isContentEditable","useClickable","props","ref","htmlRef","isDisabled","isFocusable","clickOnEnter","clickOnSpace","onMouseDown","onMouseUp","onClick","onKeyDown","onKeyUp","tabIndex","tabIndexProp","onMouseOver","onMouseLeave","htmlProps","isButton","setIsButton","isPressed","setIsPressed","listeners","useEventListeners","refCallback","node","trulyDisabled","handleClick","stopPropagation","preventDefault","self","currentTarget","focus","onDocumentKeyUp","e","remove","document","handleKeyDown","defaultPrevented","metaKey","nativeEvent","shouldClickOnEnter","key","shouldClickOnSpace","click","add","handleKeyUp","onDocumentMouseUp","button","handleMouseDown","preventScroll","handleMouseUp","handleMouseOver","handleMouseLeave","type","disabled","role"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\clickable\\src\\use-clickable.ts"],"sourcesContent":["import { dataAttr } from \"@chakra-ui/shared-utils\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useEventListeners } from \"./use-event-listeners\"\nimport { useCallback, useState } from \"react\"\n\nexport interface UseClickableProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * If `true`, the element will be disabled.\n   * It will set the `disabled` HTML attribute\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and isDisabled, the element will\n   * have only `aria-disabled` set to `true`\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * Whether or not trigger click on pressing `Enter`.\n   *\n   * @default true\n   */\n  clickOnEnter?: boolean\n  /**\n   * Whether or not trigger click on pressing `Space`.\n   *\n   * @default true\n   */\n  clickOnSpace?: boolean\n  /**\n   * The ref for the element\n   */\n  ref?: React.Ref<HTMLElement>\n}\n\nfunction isValidElement(event: KeyboardEvent): boolean {\n  const element = event.target as HTMLElement\n  const { tagName, isContentEditable } = element\n  return (\n    tagName !== \"INPUT\" && tagName !== \"TEXTAREA\" && isContentEditable !== true\n  )\n}\n\n/**\n * useClickable implements all the interactions of a native `button`\n * component with support for making it focusable even if it is disabled.\n *\n * It can be used with both native button elements or other elements (like `div`).\n */\nexport function useClickable(props: UseClickableProps = {}) {\n  const {\n    ref: htmlRef,\n    isDisabled,\n    isFocusable,\n    clickOnEnter = true,\n    clickOnSpace = true,\n    onMouseDown,\n    onMouseUp,\n    onClick,\n    onKeyDown,\n    onKeyUp,\n    tabIndex: tabIndexProp,\n    onMouseOver,\n    onMouseLeave,\n    ...htmlProps\n  } = props\n  /**\n   * We'll use this to track if the element is a button element\n   */\n  const [isButton, setIsButton] = useState(true)\n\n  /**\n   * For custom button implementation, we'll use this to track when\n   * we mouse down on the button, to enable use style its \":active\" style\n   */\n  const [isPressed, setIsPressed] = useState(false)\n\n  const listeners = useEventListeners()\n\n  /**\n   * The ref callback that fires as soon as the dom node is ready\n   */\n  const refCallback = (node: any) => {\n    if (!node) return\n    if (node.tagName !== \"BUTTON\") {\n      setIsButton(false)\n    }\n  }\n\n  const tabIndex = isButton ? tabIndexProp : tabIndexProp || 0\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const handleClick = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      const self = event.currentTarget as HTMLElement\n      self.focus()\n      onClick?.(event)\n    },\n    [isDisabled, onClick],\n  )\n\n  const onDocumentKeyUp = useCallback(\n    (e: KeyboardEvent) => {\n      if (isPressed && isValidElement(e)) {\n        e.preventDefault()\n        e.stopPropagation()\n\n        setIsPressed(false)\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        listeners.remove(document, \"keyup\", onDocumentKeyUp, false)\n      }\n    },\n    [isPressed, listeners],\n  )\n\n  const handleKeyDown = useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      onKeyDown?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) {\n        return\n      }\n\n      if (!isValidElement(event.nativeEvent) || isButton) return\n\n      const shouldClickOnEnter = clickOnEnter && event.key === \"Enter\"\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (shouldClickOnSpace) {\n        event.preventDefault()\n        setIsPressed(true)\n      }\n\n      if (shouldClickOnEnter) {\n        event.preventDefault()\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n\n      listeners.add(document, \"keyup\", onDocumentKeyUp, false)\n    },\n    [\n      isDisabled,\n      isButton,\n      onKeyDown,\n      clickOnEnter,\n      clickOnSpace,\n      listeners,\n      onDocumentKeyUp,\n    ],\n  )\n\n  const handleKeyUp = useCallback(\n    (event: React.KeyboardEvent<HTMLElement>) => {\n      onKeyUp?.(event)\n\n      if (isDisabled || event.defaultPrevented || event.metaKey) return\n\n      if (!isValidElement(event.nativeEvent) || isButton) return\n\n      const shouldClickOnSpace = clickOnSpace && event.key === \" \"\n\n      if (shouldClickOnSpace) {\n        event.preventDefault()\n        setIsPressed(false)\n\n        const self = event.currentTarget as HTMLElement\n        self.click()\n      }\n    },\n    [clickOnSpace, isButton, isDisabled, onKeyUp],\n  )\n\n  const onDocumentMouseUp = useCallback(\n    (event: MouseEvent) => {\n      if (event.button !== 0) return\n      setIsPressed(false)\n      listeners.remove(document, \"mouseup\", onDocumentMouseUp, false)\n    },\n    [listeners],\n  )\n\n  const handleMouseDown = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (event.button !== 0) return\n\n      if (isDisabled) {\n        event.stopPropagation()\n        event.preventDefault()\n        return\n      }\n\n      if (!isButton) {\n        setIsPressed(true)\n      }\n\n      const target = event.currentTarget as HTMLElement\n      target.focus({ preventScroll: true })\n\n      listeners.add(document, \"mouseup\", onDocumentMouseUp, false)\n\n      onMouseDown?.(event)\n    },\n    [isDisabled, isButton, onMouseDown, listeners, onDocumentMouseUp],\n  )\n\n  const handleMouseUp = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (event.button !== 0) return\n\n      if (!isButton) {\n        setIsPressed(false)\n      }\n\n      onMouseUp?.(event)\n    },\n    [onMouseUp, isButton],\n  )\n\n  const handleMouseOver = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      onMouseOver?.(event)\n    },\n    [isDisabled, onMouseOver],\n  )\n\n  const handleMouseLeave = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (isPressed) {\n        event.preventDefault()\n        setIsPressed(false)\n      }\n      onMouseLeave?.(event)\n    },\n    [isPressed, onMouseLeave],\n  )\n\n  const ref = mergeRefs(htmlRef, refCallback)\n\n  if (isButton) {\n    return {\n      ...htmlProps,\n      ref,\n      type: \"button\" as React.ButtonHTMLAttributes<any>[\"type\"],\n      \"aria-disabled\": trulyDisabled ? undefined : isDisabled,\n      disabled: trulyDisabled,\n      onClick: handleClick,\n      onMouseDown,\n      onMouseUp,\n      onKeyUp,\n      onKeyDown,\n      onMouseOver,\n      onMouseLeave,\n    }\n  }\n\n  return {\n    ...htmlProps,\n    ref,\n    role: \"button\",\n    \"data-active\": dataAttr(isPressed),\n    \"aria-disabled\": isDisabled ? (\"true\" as const) : undefined,\n    tabIndex: trulyDisabled ? undefined : tabIndex,\n    onClick: handleClick,\n    onMouseDown: handleMouseDown,\n    onMouseUp: handleMouseUp,\n    onKeyUp: handleKeyUp,\n    onKeyDown: handleKeyDown,\n    onMouseOver: handleMouseOver,\n    onMouseLeave: handleMouseLeave,\n  }\n}\n\nexport type UseClickableReturn = ReturnType<typeof useClickable>\n"]},"metadata":{},"sourceType":"module"}