{"ast":null,"code":"'use client';\n\nimport { useModalContext } from \"./chunk-YEXLRKHC.mjs\";\nimport { useModalManager } from \"./chunk-JUPMHJK7.mjs\"; // src/modal-focus.tsx\n\nimport { FocusLock } from \"@chakra-ui/focus-lock\";\nimport { usePresence } from \"framer-motion\";\nimport { useEffect } from \"react\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction ModalFocusScope(props) {\n  const {\n    autoFocus,\n    trapFocus,\n    dialogRef,\n    initialFocusRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    finalFocusRef,\n    returnFocusOnClose,\n    preserveScrollBarGap,\n    lockFocusAcrossFrames,\n    isOpen\n  } = useModalContext();\n  const [isPresent, safeToRemove] = usePresence();\n  useEffect(() => {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove);\n    }\n  }, [isPresent, safeToRemove]);\n  const index = useModalManager(dialogRef, isOpen);\n  return /* @__PURE__ */jsx(FocusLock, {\n    autoFocus,\n    isDisabled: !trapFocus,\n    initialFocusRef,\n    finalFocusRef,\n    restoreFocus: returnFocusOnClose,\n    contentRef: dialogRef,\n    lockFocusAcrossFrames,\n    children: /* @__PURE__ */jsx(RemoveScroll, {\n      removeScrollBar: !preserveScrollBarGap,\n      allowPinchZoom,\n      enabled: index === 1 && blockScrollOnMount,\n      forwardProps: true,\n      children: props.children\n    })\n  });\n}\n\nexport { ModalFocusScope };","map":{"version":3,"mappings":";;;;;AAAA,SAASA,SAAT,QAA0B,uBAA1B;AACA,SAASC,WAAT,QAA4B,eAA5B;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,YAAT,QAA6B,qBAA7B;AA+CM;;AAnCC,SAASC,eAAT,CAAyBC,KAAzB,EAAsD;EAC3D,MAAM;IACJC,SADI;IAEJC,SAFI;IAGJC,SAHI;IAIJC,eAJI;IAKJC,kBALI;IAMJC,cANI;IAOJC,aAPI;IAQJC,kBARI;IASJC,oBATI;IAUJC,qBAVI;IAWJC;EAXI,IAYFC,iBAZJ;EAcA,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BlB,aAAlC;EAEAC,UAAU,MAAM;IACd,IAAI,CAACgB,SAAD,IAAcC,YAAlB,EAAgC;MAC9BC,WAAWD,YAAX;IACF;EACF,CAJA,EAIG,CAACD,SAAD,EAAYC,YAAZ,CAJH;EAMA,MAAME,QAAQC,gBAAgBd,SAAhB,EAA2BQ,MAA3B,CAAd;EAEA,OACE,mBAAChB,SAAD,EAAC;IACCM,SADD;IAECiB,YAAY,CAAChB,SAFd;IAGCE,eAHD;IAICG,aAJD;IAKCY,cAAcX,kBALf;IAMCY,YAAYjB,SANb;IAOCO,qBAPD;IASCW,6BAACvB,YAAD,EAAC;MACCwB,iBAAiB,CAACb,oBADnB;MAECH,cAFD;MAICiB,SAASP,UAAU,CAAV,IAAeX,kBAJzB;MAKCmB,cAAY,IALb;MAOEH,gBAAMA;IAPR,CAAD;EATD,CAAD,CADF;AAqBF","names":["FocusLock","usePresence","useEffect","RemoveScroll","ModalFocusScope","props","autoFocus","trapFocus","dialogRef","initialFocusRef","blockScrollOnMount","allowPinchZoom","finalFocusRef","returnFocusOnClose","preserveScrollBarGap","lockFocusAcrossFrames","isOpen","useModalContext","isPresent","safeToRemove","setTimeout","index","useModalManager","isDisabled","restoreFocus","contentRef","children","removeScrollBar","enabled","forwardProps"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\modal\\src\\modal-focus.tsx"],"sourcesContent":["import { FocusLock } from \"@chakra-ui/focus-lock\"\nimport { usePresence } from \"framer-motion\"\nimport { useEffect } from \"react\"\nimport { RemoveScroll } from \"react-remove-scroll\"\n\nimport { useModalContext } from \"./modal\"\nimport { useModalManager } from \"./modal-manager\"\n\ninterface ModalFocusScopeProps {\n  /**\n   * @type React.ReactElement\n   */\n  children: React.ReactElement\n}\n\nexport function ModalFocusScope(props: ModalFocusScopeProps) {\n  const {\n    autoFocus,\n    trapFocus,\n    dialogRef,\n    initialFocusRef,\n    blockScrollOnMount,\n    allowPinchZoom,\n    finalFocusRef,\n    returnFocusOnClose,\n    preserveScrollBarGap,\n    lockFocusAcrossFrames,\n    isOpen,\n  } = useModalContext()\n\n  const [isPresent, safeToRemove] = usePresence()\n\n  useEffect(() => {\n    if (!isPresent && safeToRemove) {\n      setTimeout(safeToRemove)\n    }\n  }, [isPresent, safeToRemove])\n\n  const index = useModalManager(dialogRef, isOpen)\n\n  return (\n    <FocusLock\n      autoFocus={autoFocus}\n      isDisabled={!trapFocus}\n      initialFocusRef={initialFocusRef}\n      finalFocusRef={finalFocusRef}\n      restoreFocus={returnFocusOnClose}\n      contentRef={dialogRef}\n      lockFocusAcrossFrames={lockFocusAcrossFrames}\n    >\n      <RemoveScroll\n        removeScrollBar={!preserveScrollBarGap}\n        allowPinchZoom={allowPinchZoom}\n        // only block scroll for first dialog\n        enabled={index === 1 && blockScrollOnMount}\n        forwardProps\n      >\n        {props.children}\n      </RemoveScroll>\n    </FocusLock>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}