{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { trackElementSize } from \"@zag-js/element-size\";\nimport { useEffect, useLayoutEffect, useState } from \"react\";\nvar useSafeLayoutEffect = Boolean(globalThis == null ? void 0 : globalThis.document) ? useLayoutEffect : useEffect;\n\nfunction trackMutation(el, cb) {\n  var _a, _b;\n\n  if (!el || !el.parentElement) return;\n  const win = (_b = (_a = el.ownerDocument) == null ? void 0 : _a.defaultView) != null ? _b : window;\n  const observer = new win.MutationObserver(() => {\n    cb();\n  });\n  observer.observe(el.parentElement, {\n    childList: true\n  });\n  return () => {\n    observer.disconnect();\n  };\n}\n\nfunction useSizes(_ref) {\n  let {\n    getNodes,\n    observeMutation = true\n  } = _ref;\n  const [sizes, setSizes] = useState([]);\n  const [count, setCount] = useState(0);\n  useSafeLayoutEffect(() => {\n    const elements = getNodes();\n    const cleanups = elements.map((element, index) => trackElementSize(element, size => {\n      setSizes(sizes2 => {\n        return [...sizes2.slice(0, index), size, ...sizes2.slice(index + 1)];\n      });\n    }));\n\n    if (observeMutation) {\n      const firstNode = elements[0];\n      cleanups.push(trackMutation(firstNode, () => {\n        setCount(count2 => count2 + 1);\n      }));\n    }\n\n    return () => {\n      cleanups.forEach(cleanup => {\n        cleanup == null ? void 0 : cleanup();\n      });\n    };\n  }, [count]);\n  return sizes;\n}\n\nfunction isRef(ref) {\n  return typeof ref === \"object\" && ref !== null && \"current\" in ref;\n}\n\nfunction useSize(subject) {\n  const [size] = useSizes({\n    observeMutation: false,\n\n    getNodes() {\n      const node = isRef(subject) ? subject.current : subject;\n      return [node];\n    }\n\n  });\n  return size;\n}\n\nexport { useSize, useSizes };","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAT,QAA8C,sBAA9C;AACA,SAASC,SAAT,EAAoBC,eAApB,EAAqCC,QAArC,QAAqD,OAArD;AAEA,IAAMC,sBAAsBC,QAAQC,yCAAYC,QAApB,IACxBL,eADwB,GAExBD,SAFJ;;AAIA,SAASO,aAAT,CAAuBC,EAAvB,EAA+CC,EAA/C,EAA+D;EAP/D;;EAQE,IAAI,CAACD,EAAD,IAAO,CAACA,GAAGE,aAAf,EAA8B;EAC9B,MAAMC,OAAMC,cAAGC,aAAH,wBAAkBC,WAAxB,KAAM,IAAN,GAAMF,EAAN,GAAuCG,MAA7C;EACA,MAAMC,WAAW,IAAIL,IAAIM,gBAAR,CAAyB,MAAM;IAC9CR;EACD,CAFgB,CAAjB;EAGAO,SAASE,OAAT,CAAiBV,GAAGE,aAApB,EAAmC;IAAES,WAAW;EAAb,CAAnC;EACA,OAAO,MAAM;IACXH,SAASI,UAAT;EACF,CAFA;AAGF;;AAEO,SAASC,QAAT,OAMJ;EAAA,IANoD;IACrDC,QADqD;IAErDC,kBAAkB;EAFmC,CAMpD;EACD,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBvB,SAAwB,EAAxB,CAA1B;EACA,MAAM,CAACwB,KAAD,EAAQC,QAAR,IAAoBzB,SAAS,CAAT,CAA1B;EAEAC,oBAAoB,MAAM;IACxB,MAAMyB,WAAWN,UAAjB;IAEA,MAAMO,WAAWD,SAASE,GAAT,CAAa,CAACC,OAAD,EAAUC,KAAV,KAC5BjC,iBAAiBgC,OAAjB,EAA2BE,IAAD,IAAU;MAClCR,SAAUD,MAAD,IAAW;QAClB,OAAO,CACL,GAAGA,OAAMU,KAANV,CAAY,CAAZA,EAAeQ,KAAfR,CADE,EAELS,IAFK,EAGL,GAAGT,OAAMU,KAANV,CAAYQ,QAAQ,CAApBR,CAHE,CAAP;MAKD,CAND;IAOD,CARD,CADe,CAAjB;;IAYA,IAAID,eAAJ,EAAqB;MACnB,MAAMY,YAAYP,SAAS,CAAT,CAAlB;MACAC,SAASO,IAAT,CACE7B,cAAc4B,SAAd,EAAyB,MAAM;QAC7BR,SAAUD,MAAD,IAAWA,SAAQ,CAA5B;MACD,CAFD,CADF;IAKF;;IAEA,OAAO,MAAM;MACXG,SAASQ,OAAT,CAAkBC,OAAD,IAAa;QAC5BA;MACD,CAFD;IAGF,CAJA;EAKF,CA7BA,EA6BG,CAACZ,KAAD,CA7BH;EA+BA,OAAOF,KAAP;AACF;;AAEA,SAASe,KAAT,CAAeC,GAAf,EAAsD;EACpD,OAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,QAAQ,IAAnC,IAA2C,aAAaA,GAA/D;AACF;;AAEO,SAASC,OAAT,CACLC,OADK,EAEL;EACA,MAAM,CAACT,IAAD,IAASZ,SAAS;IACtBE,iBAAiB,KADK;;IAEtBD,WAAW;MACT,MAAMqB,OAAOJ,MAAMG,OAAN,IAAiBA,QAAQE,OAAzB,GAAmCF,OAAhD;MACA,OAAO,CAACC,IAAD,CAAP;IACF;;EALsB,CAAT,CAAf;EAOA,OAAOV,IAAP;AACF","names":["trackElementSize","useEffect","useLayoutEffect","useState","useSafeLayoutEffect","Boolean","globalThis","document","trackMutation","el","cb","parentElement","win","_b","ownerDocument","defaultView","window","observer","MutationObserver","observe","childList","disconnect","useSizes","getNodes","observeMutation","sizes","setSizes","count","setCount","elements","cleanups","map","element","index","size","slice","firstNode","push","forEach","cleanup","isRef","ref","useSize","subject","node","current"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\react-use-size\\src\\index.ts"],"sourcesContent":["import { trackElementSize, ElementSize } from \"@zag-js/element-size\"\nimport { useEffect, useLayoutEffect, useState } from \"react\"\n\nconst useSafeLayoutEffect = Boolean(globalThis?.document)\n  ? useLayoutEffect\n  : useEffect\n\nfunction trackMutation(el: HTMLElement | null, cb: () => void) {\n  if (!el || !el.parentElement) return\n  const win = el.ownerDocument?.defaultView ?? window\n  const observer = new win.MutationObserver(() => {\n    cb()\n  })\n  observer.observe(el.parentElement, { childList: true })\n  return () => {\n    observer.disconnect()\n  }\n}\n\nexport function useSizes<T extends HTMLElement | null>({\n  getNodes,\n  observeMutation = true,\n}: {\n  getNodes: () => T[]\n  observeMutation?: boolean\n}) {\n  const [sizes, setSizes] = useState<ElementSize[]>([])\n  const [count, setCount] = useState(0)\n\n  useSafeLayoutEffect(() => {\n    const elements = getNodes()\n\n    const cleanups = elements.map((element, index) =>\n      trackElementSize(element, (size) => {\n        setSizes((sizes) => {\n          return [\n            ...sizes.slice(0, index),\n            size,\n            ...sizes.slice(index + 1),\n          ] as ElementSize[]\n        })\n      }),\n    )\n\n    if (observeMutation) {\n      const firstNode = elements[0]\n      cleanups.push(\n        trackMutation(firstNode, () => {\n          setCount((count) => count + 1)\n        }),\n      )\n    }\n\n    return () => {\n      cleanups.forEach((cleanup) => {\n        cleanup?.()\n      })\n    }\n  }, [count])\n\n  return sizes as Array<ElementSize | undefined>\n}\n\nfunction isRef(ref: any): ref is React.RefObject<any> {\n  return typeof ref === \"object\" && ref !== null && \"current\" in ref\n}\n\nexport function useSize<T extends HTMLElement | null>(\n  subject: T | React.RefObject<T>,\n) {\n  const [size] = useSizes({\n    observeMutation: false,\n    getNodes() {\n      const node = isRef(subject) ? subject.current : subject\n      return [node]\n    },\n  })\n  return size as ElementSize | undefined\n}\n"]},"metadata":{},"sourceType":"module"}