{"ast":null,"code":"'use client';\n\nimport { getProgressProps, progress, stripe } from \"./chunk-TXZFUZNG.mjs\"; // src/progress.tsx\n\nimport { chakra, omitThemingProps, useMultiStyleConfig, forwardRef } from \"@chakra-ui/system\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar [ProgressStylesProvider, useProgressStyles] = createContext({\n  name: `ProgressStylesContext`,\n  errorMessage: `useProgressStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Progress />\" `\n});\nvar ProgressFilledTrack = forwardRef((props, ref) => {\n  const {\n    min,\n    max,\n    value,\n    isIndeterminate,\n    role,\n    ...rest\n  } = props;\n  const progress2 = getProgressProps({\n    value,\n    min,\n    max,\n    isIndeterminate,\n    role\n  });\n  const styles = useProgressStyles();\n  const trackStyles = {\n    height: \"100%\",\n    ...styles.filledTrack\n  };\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    style: {\n      width: `${progress2.percent}%`,\n      ...rest.style\n    },\n    ...progress2.bind,\n    ...rest,\n    __css: trackStyles\n  });\n});\nvar Progress = forwardRef((props, ref) => {\n  var _a;\n\n  const {\n    value,\n    min = 0,\n    max = 100,\n    hasStripe,\n    isAnimated,\n    children,\n    borderRadius: propBorderRadius,\n    isIndeterminate,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-valuetext\": ariaValueText,\n    title,\n    role,\n    ...rest\n  } = omitThemingProps(props);\n  const styles = useMultiStyleConfig(\"Progress\", props);\n  const borderRadius = propBorderRadius != null ? propBorderRadius : (_a = styles.track) == null ? void 0 : _a.borderRadius;\n  const stripeAnimation = {\n    animation: `${stripe} 1s linear infinite`\n  };\n  const shouldAddStripe = !isIndeterminate && hasStripe;\n  const shouldAnimateStripe = shouldAddStripe && isAnimated;\n  const css = { ...(shouldAnimateStripe && stripeAnimation),\n    ...(isIndeterminate && {\n      position: \"absolute\",\n      willChange: \"left\",\n      minWidth: \"50%\",\n      animation: `${progress} 1s ease infinite normal none running`\n    })\n  };\n  const trackStyles = {\n    overflow: \"hidden\",\n    position: \"relative\",\n    ...styles.track\n  };\n  return /* @__PURE__ */jsx(chakra.div, {\n    ref,\n    borderRadius,\n    __css: trackStyles,\n    ...rest,\n    children: /* @__PURE__ */jsxs(ProgressStylesProvider, {\n      value: styles,\n      children: [/* @__PURE__ */jsx(ProgressFilledTrack, {\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-valuetext\": ariaValueText,\n        min,\n        max,\n        value,\n        isIndeterminate,\n        css,\n        borderRadius,\n        title,\n        role\n      }), children]\n    })\n  });\n});\nProgress.displayName = \"Progress\";\nexport { useProgressStyles, Progress };","map":{"version":3,"mappings":";;;;AAAA,SACEA,MADF,EAGEC,gBAHF,EAMEC,mBANF,EAQEC,UARF,QASO,mBATP;AAUA,SAASC,aAAT,QAA8B,0BAA9B;AA+CM,cA6HAC,IA7HA;AAvCN,IAAM,CAACC,sBAAD,EAAyBC,iBAAzB,IAA8CH,cAElD;EACAI,MAAM,uBADN;EAEAC,cAAc;AAFd,CAFkD,CAApD;AAqBA,IAAMC,sBAAsBP,WAC1B,CAACQ,KAAD,EAAQC,GAAR,KAAgB;EACd,MAAM;IAAEC,GAAF;IAAOC,GAAP;IAAYC,KAAZ;IAAmBC,eAAnB;IAAoCC,IAApC;IAA0C,GAAGC;EAA7C,IAAsDP,KAA5D;EACA,MAAMQ,YAAWC,iBAAiB;IAChCL,KADgC;IAEhCF,GAFgC;IAGhCC,GAHgC;IAIhCE,eAJgC;IAKhCC;EALgC,CAAjB,CAAjB;EAQA,MAAMI,SAASd,mBAAf;EACA,MAAMe,cAAc;IAClBC,QAAQ,MADU;IAElB,GAAGF,OAAOG;EAFQ,CAApB;EAKA,OACE,mBAACxB,OAAOyB,GAAR,EAAC;IACCb,GADD;IAECc,OAAO;MAAEC,OAAO,GAAGR,UAASS,UAArB;MAAiC,GAAGV,KAAKQ;IAAzC,CAFR;IAGE,GAAGP,UAASU,IAHd;IAIE,GAAGX,IAJL;IAKCY,OAAOR;EALR,CAAD,CADF;AASF,CA1B0B,CAA5B;AAoFO,IAAMS,WAAW5B,WAAiC,CAACQ,KAAD,EAAQC,GAAR,KAAgB;EA3HzE;;EA4HE,MAAM;IACJG,KADI;IAEJF,MAAM,CAFF;IAGJC,MAAM,GAHF;IAIJkB,SAJI;IAKJC,UALI;IAMJC,QANI;IAOJC,cAAcC,gBAPV;IAQJpB,eARI;IASJ,cAAcqB,SATV;IAUJ,mBAAmBC,cAVf;IAWJ,kBAAkBC,aAXd;IAYJC,KAZI;IAaJvB,IAbI;IAcJ,GAAGC;EAdC,IAeFjB,iBAAiBU,KAAjB,CAfJ;EAiBA,MAAMU,SAASnB,oBAAoB,UAApB,EAAgCS,KAAhC,CAAf;EAEA,MAAMwB,eACJC,+CACCK,YAAOC,KADR,KACC,IADD,GACC,MADD,GACCD,GAAcN,YAFjB;EAIA,MAAMQ,kBAAkB;IAAEC,WAAW,GAAGC;EAAhB,CAAxB;EAKA,MAAMC,kBAAkB,CAAC9B,eAAD,IAAoBgB,SAA5C;EAEA,MAAMe,sBAAsBD,mBAAmBb,UAA/C;EAKA,MAAMe,MAA0B,EAC9B,IAAID,uBAAuBJ,eAA3B,CAD8B;IAE9B,IAAI3B,mBAAmB;MACrBiC,UAAU,UADW;MAErBC,YAAY,MAFS;MAGrBC,UAAU,KAHW;MAIrBP,WAAW,GAAGzB;IAJO,CAAvB;EAF8B,CAAhC;EAUA,MAAMG,cAAiC;IACrC8B,UAAU,QAD2B;IAErCH,UAAU,UAF2B;IAGrC,GAAG5B,OAAOqB;EAH2B,CAAvC;EAMA,OACE,mBAAC1C,OAAOyB,GAAR,EAAC;IACCb,GADD;IAECuB,YAFD;IAGCL,OAAOR,WAHR;IAIE,GAAGJ,IAJL;IAMCgB,8BAAC5B,sBAAD,EAAC;MAAuBS,OAAOM,MAA9B;MACCa,8BAACxB,mBAAD,EAAC;QACC,cAAY2B,SADb;QAEC,mBAAiBC,cAFlB;QAGC,kBAAgBC,aAHjB;QAIC1B,GAJD;QAKCC,GALD;QAMCC,KAND;QAOCC,eAPD;QAQCgC,GARD;QASCb,YATD;QAUCK,KAVD;QAWCvB;MAXD,CAAD,GAaCiB,QAbD;IADD,CAAD;EAND,CAAD,CADF;AAyBD,CA7EuB,CAAjB;AA+EPH,SAASsB,WAAT,GAAuB,UAAvB","names":["chakra","omitThemingProps","useMultiStyleConfig","forwardRef","createContext","jsxs","ProgressStylesProvider","useProgressStyles","name","errorMessage","ProgressFilledTrack","props","ref","min","max","value","isIndeterminate","role","rest","progress","getProgressProps","styles","trackStyles","height","filledTrack","div","style","width","percent","bind","__css","Progress","hasStripe","isAnimated","children","borderRadius","propBorderRadius","ariaLabel","ariaLabelledBy","ariaValueText","title","_a","track","stripeAnimation","animation","stripe","shouldAddStripe","shouldAnimateStripe","css","position","willChange","minWidth","overflow","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\progress\\src\\progress.tsx"],"sourcesContent":["import {\n  chakra,\n  Interpolation,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n  forwardRef,\n} from \"@chakra-ui/system\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport {\n  getProgressProps,\n  GetProgressPropsOptions,\n  progress,\n  stripe,\n} from \"./progress.utils\"\n\nconst [ProgressStylesProvider, useProgressStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `ProgressStylesContext`,\n  errorMessage: `useProgressStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Progress />\" `,\n})\n\nexport { useProgressStyles }\n\nexport interface ProgressFilledTrackProps\n  extends HTMLChakraProps<\"div\">,\n    GetProgressPropsOptions {}\n\n/**\n * ProgressFilledTrack (Linear)\n *\n * The progress component that visually indicates the current level of the progress bar.\n * It applies `background-color` and changes its width.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nconst ProgressFilledTrack = forwardRef<ProgressFilledTrackProps, \"div\">(\n  (props, ref) => {\n    const { min, max, value, isIndeterminate, role, ...rest } = props\n    const progress = getProgressProps({\n      value,\n      min,\n      max,\n      isIndeterminate,\n      role,\n    })\n\n    const styles = useProgressStyles()\n    const trackStyles = {\n      height: \"100%\",\n      ...styles.filledTrack,\n    }\n\n    return (\n      <chakra.div\n        ref={ref}\n        style={{ width: `${progress.percent}%`, ...rest.style }}\n        {...progress.bind}\n        {...rest}\n        __css={trackStyles}\n      />\n    )\n  },\n)\n\nexport interface ProgressTrackProps extends HTMLChakraProps<\"div\"> {}\n\ninterface ProgressOptions {\n  /**\n   * The `value` of the progress indicator.\n   * If `undefined` the progress bar will be in `indeterminate` state\n   */\n  value?: number\n  /**\n   * The minimum value of the progress\n   * @default 0\n   */\n  min?: number\n  /**\n   * The maximum value of the progress\n   * @default 100\n   */\n  max?: number\n  /**\n   * If `true`, the progress bar will show stripe\n   *\n   * @default false\n   */\n  hasStripe?: boolean\n  /**\n   * If `true`, and hasStripe is `true`, the stripes will be animated\n   *\n   * @default false\n   */\n  isAnimated?: boolean\n  /**\n   * If `true`, the progress will be indeterminate and the `value`\n   * prop will be ignored\n   *\n   * @default false\n   */\n  isIndeterminate?: boolean\n}\n\nexport interface ProgressProps\n  extends ProgressOptions,\n    ThemingProps<\"Progress\">,\n    HTMLChakraProps<\"div\"> {}\n\n/**\n * Progress (Linear)\n *\n * Progress is used to display the progress status for a task that takes a long\n * time or consists of several steps.\n *\n * It includes accessible attributes to help assistive technologies understand\n * and speak the progress values.\n *\n * @see Docs https://chakra-ui.com/progress\n */\nexport const Progress = forwardRef<ProgressProps, \"div\">((props, ref) => {\n  const {\n    value,\n    min = 0,\n    max = 100,\n    hasStripe,\n    isAnimated,\n    children,\n    borderRadius: propBorderRadius,\n    isIndeterminate,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-valuetext\": ariaValueText,\n    title,\n    role,\n    ...rest\n  } = omitThemingProps(props)\n\n  const styles = useMultiStyleConfig(\"Progress\", props)\n\n  const borderRadius =\n    propBorderRadius ??\n    (styles.track?.borderRadius as string | number | undefined)\n\n  const stripeAnimation = { animation: `${stripe} 1s linear infinite` }\n\n  /**\n   * We should not use stripe if it is `indeterminate`\n   */\n  const shouldAddStripe = !isIndeterminate && hasStripe\n\n  const shouldAnimateStripe = shouldAddStripe && isAnimated\n\n  /**\n   * Generate styles for stripe and stripe animation\n   */\n  const css: Interpolation<any> = {\n    ...(shouldAnimateStripe && stripeAnimation),\n    ...(isIndeterminate && {\n      position: \"absolute\",\n      willChange: \"left\",\n      minWidth: \"50%\",\n      animation: `${progress} 1s ease infinite normal none running`,\n    }),\n  }\n\n  const trackStyles: SystemStyleObject = {\n    overflow: \"hidden\",\n    position: \"relative\",\n    ...styles.track,\n  }\n\n  return (\n    <chakra.div\n      ref={ref}\n      borderRadius={borderRadius}\n      __css={trackStyles}\n      {...rest}\n    >\n      <ProgressStylesProvider value={styles}>\n        <ProgressFilledTrack\n          aria-label={ariaLabel}\n          aria-labelledby={ariaLabelledBy}\n          aria-valuetext={ariaValueText}\n          min={min}\n          max={max}\n          value={value}\n          isIndeterminate={isIndeterminate}\n          css={css}\n          borderRadius={borderRadius}\n          title={title}\n          role={role}\n        />\n        {children}\n      </ProgressStylesProvider>\n    </chakra.div>\n  )\n})\n\nProgress.displayName = \"Progress\"\n"]},"metadata":{},"sourceType":"module"}