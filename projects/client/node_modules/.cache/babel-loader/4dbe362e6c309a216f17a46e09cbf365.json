{"ast":null,"code":"'use client';\n\nimport { useChakra } from \"./chunk-WNDUHNHH.mjs\"; // src/use-style-config.ts\n\nimport { resolveStyleConfig } from \"@chakra-ui/styled-system\";\nimport { mergeThemeOverride } from \"@chakra-ui/theme-utils\";\nimport { filterUndefined, memoizedGet as get, mergeWith, omit } from \"@chakra-ui/utils\";\nimport { useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\n\nfunction useStyleConfigImpl(themeKey) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _a;\n\n  const {\n    styleConfig: styleConfigProp,\n    ...rest\n  } = props;\n  const {\n    theme,\n    colorMode\n  } = useChakra();\n  const themeStyleConfig = themeKey ? get(theme, `components.${themeKey}`) : void 0;\n  const styleConfig = styleConfigProp || themeStyleConfig;\n  const mergedProps = mergeWith({\n    theme,\n    colorMode\n  }, (_a = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _a : {}, filterUndefined(omit(rest, [\"children\"])));\n  const stylesRef = useRef({});\n\n  if (styleConfig) {\n    const getStyles = resolveStyleConfig(styleConfig);\n    const styles = getStyles(mergedProps);\n    const isStyleEqual = isEqual(stylesRef.current, styles);\n\n    if (!isStyleEqual) {\n      stylesRef.current = styles;\n    }\n  }\n\n  return stylesRef.current;\n}\n\nfunction useStyleConfig(themeKey) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useStyleConfigImpl(themeKey, props);\n}\n\nfunction useMultiStyleConfig(themeKey) {\n  let props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return useStyleConfigImpl(themeKey, props);\n}\n\nfunction useComponentStyles__unstable(themeKey, props) {\n  var _a;\n\n  const {\n    baseConfig,\n    ...restProps\n  } = props;\n  const {\n    theme\n  } = useChakra();\n  const overrides = (_a = theme.components) == null ? void 0 : _a[themeKey];\n  const styleConfig = overrides ? mergeThemeOverride(overrides, baseConfig) : baseConfig;\n  return useStyleConfigImpl(null, { ...restProps,\n    styleConfig\n  });\n}\n\nexport { useStyleConfig, useMultiStyleConfig, useComponentStyles__unstable };","map":{"version":3,"mappings":";;;;AAAA,SACEA,kBADF,QAIO,0BAJP;AAKA,SAASC,kBAAT,QAAmC,wBAAnC;AACA,SAEEC,eAFF,EAGEC,eAAeC,GAHjB,EAIEC,SAJF,EAKEC,IALF,QAMO,kBANP;AAOA,SAASC,MAAT,QAAuB,OAAvB;AACA,OAAOC,OAAP,MAAoB,oBAApB;;AAKA,SAASC,kBAAT,CACEC,QADF,EAGE;EAAA,IADAC,KACA,uEAD6B,EAC7B;;EAtBF;;EAuBE,MAAM;IAAEC,aAAaC,eAAf;IAAgC,GAAGC;EAAnC,IAA4CH,KAAlD;EAEA,MAAM;IAAEI,KAAF;IAASC;EAAT,IAAuBC,WAA7B;EAEA,MAAMC,mBAAmBR,WACrBN,IAAIW,KAAJ,EAAW,cAAcL,UAAzB,CADqB,GAErB,MAFJ;EAIA,MAAME,cAAcC,mBAAmBK,gBAAvC;EAEA,MAAMC,cAAcd,UAClB;IAAEU,KAAF;IAASC;EAAT,CADkB,EACC,CACnBI,gDAAaC,YADM,KACnB,IADmB,GACnBD,EADmB,GACU,EAFX,EAGlBlB,gBAAgBI,KAAKQ,IAAL,EAAW,CAAC,UAAD,CAAX,CAAhB,CAHkB,CAApB;EASA,MAAMQ,YAAYf,OAAkB,EAAlB,CAAlB;;EAEA,IAAIK,WAAJ,EAAiB;IACf,MAAMW,YAAYvB,mBAAmBY,WAAnB,CAAlB;IACA,MAAMY,SAASD,UAAUJ,WAAV,CAAf;IAEA,MAAMM,eAAejB,QAAQc,UAAUI,OAAlB,EAA2BF,MAA3B,CAArB;;IAEA,IAAI,CAACC,YAAL,EAAmB;MACjBH,UAAUI,OAAV,GAAoBF,MAApB;IACF;EACF;;EAEA,OAAOF,UAAUI,OAAjB;AACF;;AAEO,SAASC,cAAT,CACLjB,QADK,EAGL;EAAA,IADAC,KACA,uEAD6B,EAC7B;EACA,OAAOF,mBAAmBC,QAAnB,EAA6BC,KAA7B,CAAP;AACF;;AAEO,SAASiB,mBAAT,CACLlB,QADK,EAGL;EAAA,IADAC,KACA,uEAD6B,EAC7B;EACA,OAAOF,mBAAmBC,QAAnB,EAA6BC,KAA7B,CAAP;AAIF;;AAIO,SAASkB,4BAAT,CACLnB,QADK,EAELC,KAFK,EAGL;EAhFF;;EAiFE,MAAM;IAAEmB,UAAF;IAAc,GAAGC;EAAjB,IAA+BpB,KAArC;EACA,MAAM;IAAEI;EAAF,IAAYE,WAAlB;EAEA,MAAMe,aAAYZ,WAAMa,UAAlB,KAAY,IAAZ,GAAY,MAAZ,GAAYb,GAAmBV,QAAnB,CAAlB;EAEA,MAAME,cAAcoB,YAChB/B,mBAAmB+B,SAAnB,EAA8BF,UAA9B,CADgB,GAEhBA,UAFJ;EAIA,OAAOrB,mBAAmB,IAAnB,EAAyB,EAC9B,GAAGsB,SAD2B;IAE9BnB;EAF8B,CAAzB,CAAP;AAIF","names":["resolveStyleConfig","mergeThemeOverride","filterUndefined","memoizedGet","get","mergeWith","omit","useRef","isEqual","useStyleConfigImpl","themeKey","props","styleConfig","styleConfigProp","rest","theme","colorMode","useChakra","themeStyleConfig","mergedProps","_a","defaultProps","stylesRef","getStyles","styles","isStyleEqual","current","useStyleConfig","useMultiStyleConfig","useComponentStyles__unstable","baseConfig","restProps","overrides","components"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\system\\src\\use-style-config.ts"],"sourcesContent":["import {\n  resolveStyleConfig,\n  SystemStyleObject,\n  ThemingProps,\n} from \"@chakra-ui/styled-system\"\nimport { mergeThemeOverride } from \"@chakra-ui/theme-utils\"\nimport {\n  Dict,\n  filterUndefined,\n  memoizedGet as get,\n  mergeWith,\n  omit,\n} from \"@chakra-ui/utils\"\nimport { useRef } from \"react\"\nimport isEqual from \"react-fast-compare\"\nimport { useChakra } from \"./hooks\"\n\ntype StylesRef = SystemStyleObject | Record<string, SystemStyleObject>\n\nfunction useStyleConfigImpl(\n  themeKey: string | null,\n  props: ThemingProps & Dict = {},\n) {\n  const { styleConfig: styleConfigProp, ...rest } = props\n\n  const { theme, colorMode } = useChakra()\n\n  const themeStyleConfig = themeKey\n    ? get(theme, `components.${themeKey}`)\n    : undefined\n\n  const styleConfig = styleConfigProp || themeStyleConfig\n\n  const mergedProps = mergeWith(\n    { theme, colorMode },\n    styleConfig?.defaultProps ?? {},\n    filterUndefined(omit(rest, [\"children\"])),\n  )\n\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n  const stylesRef = useRef<StylesRef>({})\n\n  if (styleConfig) {\n    const getStyles = resolveStyleConfig(styleConfig)\n    const styles = getStyles(mergedProps)\n\n    const isStyleEqual = isEqual(stylesRef.current, styles)\n\n    if (!isStyleEqual) {\n      stylesRef.current = styles\n    }\n  }\n\n  return stylesRef.current\n}\n\nexport function useStyleConfig(\n  themeKey: string,\n  props: ThemingProps & Dict = {},\n) {\n  return useStyleConfigImpl(themeKey, props) as SystemStyleObject\n}\n\nexport function useMultiStyleConfig(\n  themeKey: string,\n  props: ThemingProps & Dict = {},\n) {\n  return useStyleConfigImpl(themeKey, props) as Record<\n    string,\n    SystemStyleObject\n  >\n}\n\ntype MultipartStyles = Record<string, SystemStyleObject>\n\nexport function useComponentStyles__unstable(\n  themeKey: string,\n  props: ThemingProps & { baseConfig: any },\n) {\n  const { baseConfig, ...restProps } = props\n  const { theme } = useChakra()\n\n  const overrides = theme.components?.[themeKey]\n\n  const styleConfig = overrides\n    ? mergeThemeOverride(overrides, baseConfig)\n    : baseConfig\n\n  return useStyleConfigImpl(null, {\n    ...restProps,\n    styleConfig,\n  }) as MultipartStyles\n}\n"]},"metadata":{},"sourceType":"module"}