{"ast":null,"code":"import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\n\nclass VisualElementDragControls {\n  constructor(visualElement) {\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * The permitted boundaries of travel, in pixels.\n     */\n\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     */\n\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n\n  start(originEvent) {\n    let {\n      snapToCursor = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /**\n     * Don't start dragging if this component is exiting\n     */\n    const {\n      presenceContext\n    } = this.visualElement;\n    if (presenceContext && presenceContext.isPresent === false) return;\n\n    const onSessionStart = event => {\n      // Stop any animations on both axis values immediately. This allows the user to throw and catch\n      // the component.\n      this.stopAnimation();\n\n      if (snapToCursor) {\n        this.snapToCursor(extractEventInfo(event, \"page\").point);\n      }\n    };\n\n    const onStart = (event, info) => {\n      // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n      const {\n        drag,\n        dragPropagation,\n        onDragStart\n      } = this.getProps();\n\n      if (drag && !dragPropagation) {\n        if (this.openGlobalLock) this.openGlobalLock();\n        this.openGlobalLock = getGlobalLock(drag); // If we don 't have the lock, don't start dragging\n\n        if (!this.openGlobalLock) return;\n      }\n\n      this.isDragging = true;\n      this.currentDirection = null;\n      this.resolveConstraints();\n\n      if (this.visualElement.projection) {\n        this.visualElement.projection.isAnimationBlocked = true;\n        this.visualElement.projection.target = undefined;\n      }\n      /**\n       * Record gesture origin\n       */\n\n\n      eachAxis(axis => {\n        let current = this.getAxisMotionValue(axis).get() || 0;\n        /**\n         * If the MotionValue is a percentage value convert to px\n         */\n\n        if (percent.test(current)) {\n          const {\n            projection\n          } = this.visualElement;\n\n          if (projection && projection.layout) {\n            const measuredAxis = projection.layout.layoutBox[axis];\n\n            if (measuredAxis) {\n              const length = calcLength(measuredAxis);\n              current = length * (parseFloat(current) / 100);\n            }\n          }\n        }\n\n        this.originPoint[axis] = current;\n      }); // Fire onDragStart event\n\n      if (onDragStart) {\n        frame.update(() => onDragStart(event, info), false, true);\n      }\n\n      const {\n        animationState\n      } = this.visualElement;\n      animationState && animationState.setActive(\"whileDrag\", true);\n    };\n\n    const onMove = (event, info) => {\n      // latestPointerEvent = event\n      const {\n        dragPropagation,\n        dragDirectionLock,\n        onDirectionLock,\n        onDrag\n      } = this.getProps(); // If we didn't successfully receive the gesture lock, early return.\n\n      if (!dragPropagation && !this.openGlobalLock) return;\n      const {\n        offset\n      } = info; // Attempt to detect drag direction if directionLock is true\n\n      if (dragDirectionLock && this.currentDirection === null) {\n        this.currentDirection = getCurrentDirection(offset); // If we've successfully set a direction, notify listener\n\n        if (this.currentDirection !== null) {\n          onDirectionLock && onDirectionLock(this.currentDirection);\n        }\n\n        return;\n      } // Update each point with the latest position\n\n\n      this.updateAxis(\"x\", info.point, offset);\n      this.updateAxis(\"y\", info.point, offset);\n      /**\n       * Ideally we would leave the renderer to fire naturally at the end of\n       * this frame but if the element is about to change layout as the result\n       * of a re-render we want to ensure the browser can read the latest\n       * bounding box to ensure the pointer and element don't fall out of sync.\n       */\n\n      this.visualElement.render();\n      /**\n       * This must fire after the render call as it might trigger a state\n       * change which itself might trigger a layout update.\n       */\n\n      onDrag && onDrag(event, info);\n    };\n\n    const onSessionEnd = (event, info) => this.stop(event, info);\n\n    this.panSession = new PanSession(originEvent, {\n      onSessionStart,\n      onStart,\n      onMove,\n      onSessionEnd\n    }, {\n      transformPagePoint: this.visualElement.getTransformPagePoint()\n    });\n  }\n\n  stop(event, info) {\n    const isDragging = this.isDragging;\n    this.cancel();\n    if (!isDragging) return;\n    const {\n      velocity\n    } = info;\n    this.startAnimation(velocity);\n    const {\n      onDragEnd\n    } = this.getProps();\n\n    if (onDragEnd) {\n      frame.update(() => onDragEnd(event, info));\n    }\n  }\n\n  cancel() {\n    this.isDragging = false;\n    const {\n      projection,\n      animationState\n    } = this.visualElement;\n\n    if (projection) {\n      projection.isAnimationBlocked = false;\n    }\n\n    this.panSession && this.panSession.end();\n    this.panSession = undefined;\n    const {\n      dragPropagation\n    } = this.getProps();\n\n    if (!dragPropagation && this.openGlobalLock) {\n      this.openGlobalLock();\n      this.openGlobalLock = null;\n    }\n\n    animationState && animationState.setActive(\"whileDrag\", false);\n  }\n\n  updateAxis(axis, _point, offset) {\n    const {\n      drag\n    } = this.getProps(); // If we're not dragging this axis, do an early return.\n\n    if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n    const axisValue = this.getAxisMotionValue(axis);\n    let next = this.originPoint[axis] + offset[axis]; // Apply constraints\n\n    if (this.constraints && this.constraints[axis]) {\n      next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n    }\n\n    axisValue.set(next);\n  }\n\n  resolveConstraints() {\n    const {\n      dragConstraints,\n      dragElastic\n    } = this.getProps();\n    const {\n      layout\n    } = this.visualElement.projection || {};\n    const prevConstraints = this.constraints;\n\n    if (dragConstraints && isRefObject(dragConstraints)) {\n      if (!this.constraints) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    } else {\n      if (dragConstraints && layout) {\n        this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n      } else {\n        this.constraints = false;\n      }\n    }\n\n    this.elastic = resolveDragElastic(dragElastic);\n    /**\n     * If we're outputting to external MotionValues, we want to rebase the measured constraints\n     * from viewport-relative to component-relative.\n     */\n\n    if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n      eachAxis(axis => {\n        if (this.getAxisMotionValue(axis)) {\n          this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n        }\n      });\n    }\n  }\n\n  resolveRefConstraints() {\n    const {\n      dragConstraints: constraints,\n      onMeasureDragConstraints\n    } = this.getProps();\n    if (!constraints || !isRefObject(constraints)) return false;\n    const constraintsElement = constraints.current;\n    invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n    const {\n      projection\n    } = this.visualElement; // TODO\n\n    if (!projection || !projection.layout) return false;\n    const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n    let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n    /**\n     * If there's an onMeasureDragConstraints listener we call it and\n     * if different constraints are returned, set constraints to that\n     */\n\n    if (onMeasureDragConstraints) {\n      const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n      this.hasMutatedConstraints = !!userConstraints;\n\n      if (userConstraints) {\n        measuredConstraints = convertBoundingBoxToBox(userConstraints);\n      }\n    }\n\n    return measuredConstraints;\n  }\n\n  startAnimation(velocity) {\n    const {\n      drag,\n      dragMomentum,\n      dragElastic,\n      dragTransition,\n      dragSnapToOrigin,\n      onDragTransitionEnd\n    } = this.getProps();\n    const constraints = this.constraints || {};\n    const momentumAnimations = eachAxis(axis => {\n      if (!shouldDrag(axis, drag, this.currentDirection)) {\n        return;\n      }\n\n      let transition = constraints && constraints[axis] || {};\n      if (dragSnapToOrigin) transition = {\n        min: 0,\n        max: 0\n      };\n      /**\n       * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n       * of spring animations so we should look into adding a disable spring option to `inertia`.\n       * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n       * using the value of `dragElastic`.\n       */\n\n      const bounceStiffness = dragElastic ? 200 : 1000000;\n      const bounceDamping = dragElastic ? 40 : 10000000;\n      const inertia = {\n        type: \"inertia\",\n        velocity: dragMomentum ? velocity[axis] : 0,\n        bounceStiffness,\n        bounceDamping,\n        timeConstant: 750,\n        restDelta: 1,\n        restSpeed: 10,\n        ...dragTransition,\n        ...transition\n      }; // If we're not animating on an externally-provided `MotionValue` we can use the\n      // component's animation controls which will handle interactions with whileHover (etc),\n      // otherwise we just have to animate the `MotionValue` itself.\n\n      return this.startAxisValueAnimation(axis, inertia);\n    }); // Run all animations and then resolve the new drag constraints.\n\n    return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n  }\n\n  startAxisValueAnimation(axis, transition) {\n    const axisValue = this.getAxisMotionValue(axis);\n    return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n  }\n\n  stopAnimation() {\n    eachAxis(axis => this.getAxisMotionValue(axis).stop());\n  }\n  /**\n   * Drag works differently depending on which props are provided.\n   *\n   * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n   * - Otherwise, we apply the delta to the x/y motion values.\n   */\n\n\n  getAxisMotionValue(axis) {\n    const dragKey = \"_drag\" + axis.toUpperCase();\n    const props = this.visualElement.getProps();\n    const externalMotionValue = props[dragKey];\n    return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n  }\n\n  snapToCursor(point) {\n    eachAxis(axis => {\n      const {\n        drag\n      } = this.getProps(); // If we're not dragging this axis, do an early return.\n\n      if (!shouldDrag(axis, drag, this.currentDirection)) return;\n      const {\n        projection\n      } = this.visualElement;\n      const axisValue = this.getAxisMotionValue(axis);\n\n      if (projection && projection.layout) {\n        const {\n          min,\n          max\n        } = projection.layout.layoutBox[axis];\n        axisValue.set(point[axis] - mix(min, max, 0.5));\n      }\n    });\n  }\n  /**\n   * When the viewport resizes we want to check if the measured constraints\n   * have changed and, if so, reposition the element within those new constraints\n   * relative to where it was before the resize.\n   */\n\n\n  scalePositionWithinConstraints() {\n    if (!this.visualElement.current) return;\n    const {\n      drag,\n      dragConstraints\n    } = this.getProps();\n    const {\n      projection\n    } = this.visualElement;\n    if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n    /**\n     * Stop current animations as there can be visual glitching if we try to do\n     * this mid-animation\n     */\n\n    this.stopAnimation();\n    /**\n     * Record the relative position of the dragged element relative to the\n     * constraints box and save as a progress value.\n     */\n\n    const boxProgress = {\n      x: 0,\n      y: 0\n    };\n    eachAxis(axis => {\n      const axisValue = this.getAxisMotionValue(axis);\n\n      if (axisValue) {\n        const latest = axisValue.get();\n        boxProgress[axis] = calcOrigin({\n          min: latest,\n          max: latest\n        }, this.constraints[axis]);\n      }\n    });\n    /**\n     * Update the layout of this element and resolve the latest drag constraints\n     */\n\n    const {\n      transformTemplate\n    } = this.visualElement.getProps();\n    this.visualElement.current.style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n    projection.root && projection.root.updateScroll();\n    projection.updateLayout();\n    this.resolveConstraints();\n    /**\n     * For each axis, calculate the current progress of the layout axis\n     * within the new constraints.\n     */\n\n    eachAxis(axis => {\n      if (!shouldDrag(axis, drag, null)) return;\n      /**\n       * Calculate a new transform based on the previous box progress\n       */\n\n      const axisValue = this.getAxisMotionValue(axis);\n      const {\n        min,\n        max\n      } = this.constraints[axis];\n      axisValue.set(mix(min, max, boxProgress[axis]));\n    });\n  }\n\n  addListeners() {\n    if (!this.visualElement.current) return;\n    elementDragControls.set(this.visualElement, this);\n    const element = this.visualElement.current;\n    /**\n     * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n     */\n\n    const stopPointerListener = addPointerEvent(element, \"pointerdown\", event => {\n      const {\n        drag,\n        dragListener = true\n      } = this.getProps();\n      drag && dragListener && this.start(event);\n    });\n\n    const measureDragConstraints = () => {\n      const {\n        dragConstraints\n      } = this.getProps();\n\n      if (isRefObject(dragConstraints)) {\n        this.constraints = this.resolveRefConstraints();\n      }\n    };\n\n    const {\n      projection\n    } = this.visualElement;\n    const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n\n    if (projection && !projection.layout) {\n      projection.root && projection.root.updateScroll();\n      projection.updateLayout();\n    }\n\n    measureDragConstraints();\n    /**\n     * Attach a window resize listener to scale the draggable target within its defined\n     * constraints as the window resizes.\n     */\n\n    const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n    /**\n     * If the element's layout changes, calculate the delta and apply that to\n     * the drag gesture's origin point.\n     */\n\n    const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", _ref => {\n      let {\n        delta,\n        hasLayoutChanged\n      } = _ref;\n\n      if (this.isDragging && hasLayoutChanged) {\n        eachAxis(axis => {\n          const motionValue = this.getAxisMotionValue(axis);\n          if (!motionValue) return;\n          this.originPoint[axis] += delta[axis].translate;\n          motionValue.set(motionValue.get() + delta[axis].translate);\n        });\n        this.visualElement.render();\n      }\n    });\n    return () => {\n      stopResizeListener();\n      stopPointerListener();\n      stopMeasureLayoutListener();\n      stopLayoutUpdateListener && stopLayoutUpdateListener();\n    };\n  }\n\n  getProps() {\n    const props = this.visualElement.getProps();\n    const {\n      drag = false,\n      dragDirectionLock = false,\n      dragPropagation = false,\n      dragConstraints = false,\n      dragElastic = defaultElastic,\n      dragMomentum = true\n    } = props;\n    return { ...props,\n      drag,\n      dragDirectionLock,\n      dragPropagation,\n      dragConstraints,\n      dragElastic,\n      dragMomentum\n    };\n  }\n\n}\n\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\n\n\nfunction getCurrentDirection(offset) {\n  let lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  let direction = null;\n\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n\n  return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"names":["invariant","PanSession","getGlobalLock","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","calcViewportConstraints","defaultElastic","rebaseAxisConstraints","calcOrigin","createBox","eachAxis","measurePageBox","extractEventInfo","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","calcLength","mix","percent","animateMotionValue","frame","elementDragControls","WeakMap","VisualElementDragControls","constructor","visualElement","openGlobalLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","start","originEvent","snapToCursor","presenceContext","isPresent","onSessionStart","event","stopAnimation","point","onStart","info","drag","dragPropagation","onDragStart","getProps","resolveConstraints","projection","isAnimationBlocked","target","undefined","axis","current","getAxisMotionValue","get","test","layout","measuredAxis","layoutBox","length","parseFloat","update","animationState","setActive","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","render","onSessionEnd","stop","panSession","transformPagePoint","getTransformPagePoint","cancel","velocity","startAnimation","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","dragKey","toUpperCase","props","externalMotionValue","getValue","initial","scalePositionWithinConstraints","boxProgress","latest","transformTemplate","style","transform","updateScroll","updateLayout","addListeners","element","stopPointerListener","dragListener","measureDragConstraints","stopMeasureLayoutListener","addEventListener","stopResizeListener","window","stopLayoutUpdateListener","delta","hasLayoutChanged","motionValue","translate","direction","lockThreshold","Math","abs"],"sources":["C:/Purwadhika/JCWD Bandung/4. REAL PROJECT/JCWD0108-03/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"sourcesContent":["import { invariant } from '../../utils/errors.mjs';\nimport { PanSession } from '../pan/PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/add-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, calcOrigin } from './utils/constraints.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/add-dom-event.mjs';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nimport { mix } from '../../utils/mix.mjs';\nimport { percent } from '../../value/types/numbers/units.mjs';\nimport { animateMotionValue } from '../../animation/interfaces/motion-value.mjs';\nimport { frame } from '../../frameloop/frame.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: PointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        const { presenceContext } = this.visualElement;\n        if (presenceContext && presenceContext.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const { projection } = this.visualElement;\n                    if (projection && projection.layout) {\n                        const measuredAxis = projection.layout.layoutBox[axis];\n                        if (measuredAxis) {\n                            const length = calcLength(measuredAxis);\n                            current = length * (parseFloat(current) / 100);\n                        }\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            if (onDragStart) {\n                frame.update(() => onDragStart(event, info), false, true);\n            }\n            const { animationState } = this.visualElement;\n            animationState && animationState.setActive(\"whileDrag\", true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock && onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.render();\n            /**\n             * This must fire after the render call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag && onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        if (onDragEnd) {\n            frame.update(() => onDragEnd(event, info));\n        }\n    }\n    cancel() {\n        this.isDragging = false;\n        const { projection, animationState } = this.visualElement;\n        if (projection) {\n            projection.isAnimationBlocked = false;\n        }\n        this.panSession && this.panSession.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        animationState && animationState.setActive(\"whileDrag\", false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.layoutBox, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.layoutBox[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.layoutBox, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (constraints && constraints[axis]) || {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return axisValue.start(animateMotionValue(axis, axisValue, 0, transition));\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const props = this.visualElement.getProps();\n        const externalMotionValue = props[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (props.initial ? props.initial[axis] : undefined) || 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.layoutBox[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        if (!this.visualElement.current)\n            return;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.current.style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        projection.root && projection.root.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        if (!this.visualElement.current)\n            return;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.current;\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            projection.root && projection.root.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.render();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener && stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}