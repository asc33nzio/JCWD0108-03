{"ast":null,"code":"'use client'; // src/input.tsx\n\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Input = forwardRef(function Input2(props, ref) {\n  const {\n    htmlSize,\n    ...rest\n  } = props;\n  const styles = useMultiStyleConfig(\"Input\", rest);\n  const ownProps = omitThemingProps(rest);\n  const input = useFormControl(ownProps);\n\n  const _className = cx(\"chakra-input\", props.className);\n\n  return /* @__PURE__ */jsx(chakra.input, {\n    size: htmlSize,\n    ...input,\n    __css: styles.field,\n    ref,\n    className: _className\n  });\n});\nInput.displayName = \"Input\";\nInput.id = \"Input\";\nexport { Input };","map":{"version":3,"mappings":";;AAAA,SAA6BA,cAA7B,QAAmD,yBAAnD;AACA,SACEC,MADF,EAEEC,UAFF,EAGEC,gBAHF,EAKEC,mBALF,QAOO,mBAPP;AAQA,SAASC,EAAT,QAAmB,yBAAnB;AAgDI;AAZG,IAAMC,QAAQJ,WAAgC,SAASI,MAAT,CACnDC,KADmD,EAEnDC,GAFmD,EAGnD;EACA,MAAM;IAAEC,QAAF;IAAY,GAAGC;EAAf,IAAwBH,KAA9B;EAEA,MAAMI,SAASP,oBAAoB,OAApB,EAA6BM,IAA7B,CAAf;EACA,MAAME,WAAWT,iBAAiBO,IAAjB,CAAjB;EACA,MAAMG,QAAQb,eAAiCY,QAAjC,CAAd;;EACA,MAAME,aAAaT,GAAG,cAAH,EAAmBE,MAAMQ,SAAzB,CAAnB;;EAEA,OACE,mBAACd,OAAOY,KAAR,EAAC;IACCG,MAAMP,QADP;IAEE,GAAGI,KAFL;IAGCI,OAAON,OAAOO,KAHf;IAICV,GAJD;IAKCO,WAAWD;EALZ,CAAD,CADF;AASD,CApBoB,CAAd;AAsBPR,MAAMa,WAAN,GAAoB,OAApB;AAGAb,MAAMc,EAAN,GAAW,OAAX","names":["useFormControl","chakra","forwardRef","omitThemingProps","useMultiStyleConfig","cx","Input","props","ref","htmlSize","rest","styles","ownProps","input","_className","className","size","__css","field","displayName","id"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\input\\src\\input.tsx"],"sourcesContent":["import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"]},"metadata":{},"sourceType":"module"}