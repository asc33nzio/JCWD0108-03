{"ast":null,"code":"'use client'; // src/toast.utils.ts\n\nvar findById = (arr, id) => arr.find(toast => toast.id === id);\n\nfunction findToast(toasts, id) {\n  const position = getToastPosition(toasts, id);\n  const index = position ? toasts[position].findIndex(toast => toast.id === id) : -1;\n  return {\n    position,\n    index\n  };\n}\n\nfunction getToastPosition(toasts, id) {\n  for (const [position, values] of Object.entries(toasts)) {\n    if (findById(values, id)) {\n      return position;\n    }\n  }\n}\n\nvar isVisible = (toasts, id) => !!getToastPosition(toasts, id);\n\nfunction getToastStyle(position) {\n  const isRighty = position.includes(\"right\");\n  const isLefty = position.includes(\"left\");\n  let alignItems = \"center\";\n  if (isRighty) alignItems = \"flex-end\";\n  if (isLefty) alignItems = \"flex-start\";\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems\n  };\n}\n\nfunction getToastListStyle(position) {\n  const isTopOrBottom = position === \"top\" || position === \"bottom\";\n  const margin = isTopOrBottom ? \"0 auto\" : void 0;\n  const top = position.includes(\"top\") ? \"env(safe-area-inset-top, 0px)\" : void 0;\n  const bottom = position.includes(\"bottom\") ? \"env(safe-area-inset-bottom, 0px)\" : void 0;\n  const right = !position.includes(\"left\") ? \"env(safe-area-inset-right, 0px)\" : void 0;\n  const left = !position.includes(\"right\") ? \"env(safe-area-inset-left, 0px)\" : void 0;\n  return {\n    position: \"fixed\",\n    zIndex: \"var(--toast-z-index, 5500)\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin,\n    top,\n    bottom,\n    right,\n    left\n  };\n}\n\nexport { findById, findToast, getToastPosition, isVisible, getToastStyle, getToastListStyle };","map":{"version":3,"mappings":";;AAOO,IAAMA,WAAW,CAACC,GAAD,EAAsBC,EAAtB,KACtBD,IAAIE,IAAJ,CAAUC,KAAD,IAAWA,MAAMF,EAAN,KAAaA,EAAjC,CADK;;AAOA,SAASG,SAAT,CAAmBC,MAAnB,EAAuCJ,EAAvC,EAAoD;EACzD,MAAMK,WAAWC,iBAAiBF,MAAjB,EAAyBJ,EAAzB,CAAjB;EAEA,MAAMO,QAAQF,WACVD,OAAOC,QAAP,EAAiBG,SAAjB,CAA4BN,KAAD,IAAWA,MAAMF,EAAN,KAAaA,EAAnD,CADU,GAEV,EAFJ;EAIA,OAAO;IACLK,QADK;IAELE;EAFK,CAAP;AAIF;;AAMO,SAASD,gBAAT,CAA0BF,MAA1B,EAA8CJ,EAA9C,EAA2D;EAChE,WAAW,CAACK,QAAD,EAAWI,MAAX,CAAX,IAAiCC,OAAOC,OAAP,CAAeP,MAAf,CAAjC,EAAyD;IACvD,IAAIN,SAASW,MAAT,EAAiBT,EAAjB,CAAJ,EAA0B;MACxB,OAAOK,QAAP;IACF;EACF;AACF;;AAMO,IAAMO,YAAY,CAACR,MAAD,EAAqBJ,EAArB,KACvB,CAAC,CAACM,iBAAiBF,MAAjB,EAAyBJ,EAAzB,CADG;;AAOA,SAASa,aAAT,CAAuBR,QAAvB,EAAqE;EAC1E,MAAMS,WAAWT,SAASU,QAAT,CAAkB,OAAlB,CAAjB;EACA,MAAMC,UAAUX,SAASU,QAAT,CAAkB,MAAlB,CAAhB;EAEA,IAAIE,aAAa,QAAjB;EACA,IAAIH,QAAJ,EAAcG,aAAa,UAAb;EACd,IAAID,OAAJ,EAAaC,aAAa,YAAb;EAEb,OAAO;IACLC,SAAS,MADJ;IAELC,eAAe,QAFV;IAGLF;EAHK,CAAP;AAKF;;AAKO,SAASG,iBAAT,CACLf,QADK,EAEgB;EACrB,MAAMgB,gBAAgBhB,aAAa,KAAb,IAAsBA,aAAa,QAAzD;EACA,MAAMiB,SAASD,gBAAgB,QAAhB,GAA2B,MAA1C;EAEA,MAAME,MAAMlB,SAASU,QAAT,CAAkB,KAAlB,IACR,+BADQ,GAER,MAFJ;EAGA,MAAMS,SAASnB,SAASU,QAAT,CAAkB,QAAlB,IACX,kCADW,GAEX,MAFJ;EAGA,MAAMU,QAAQ,CAACpB,SAASU,QAAT,CAAkB,MAAlB,CAAD,GACV,iCADU,GAEV,MAFJ;EAGA,MAAMW,OAAO,CAACrB,SAASU,QAAT,CAAkB,OAAlB,CAAD,GACT,gCADS,GAET,MAFJ;EAIA,OAAO;IACLV,UAAU,OADL;IAELsB,QAAQ,4BAFH;IAGLC,eAAe,MAHV;IAILV,SAAS,MAJJ;IAKLC,eAAe,QALV;IAMLG,MANK;IAOLC,GAPK;IAQLC,MARK;IASLC,KATK;IAULC;EAVK,CAAP;AAYF","names":["findById","arr","id","find","toast","findToast","toasts","position","getToastPosition","index","findIndex","values","Object","entries","isVisible","getToastStyle","isRighty","includes","isLefty","alignItems","display","flexDirection","getToastListStyle","isTopOrBottom","margin","top","bottom","right","left","zIndex","pointerEvents"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\toast\\src\\toast.utils.ts"],"sourcesContent":["import type { ToastPosition } from \"./toast.placement\"\nimport type { ToastId, ToastOptions, ToastState } from \"./toast.types\"\n\n/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\nexport const findById = (arr: ToastOptions[], id: ToastId) =>\n  arr.find((toast) => toast.id === id)\n\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return its position and index\n */\nexport function findToast(toasts: ToastState, id: ToastId) {\n  const position = getToastPosition(toasts, id)\n\n  const index = position\n    ? toasts[position].findIndex((toast) => toast.id === id)\n    : -1\n\n  return {\n    position,\n    index,\n  }\n}\n\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\nexport function getToastPosition(toasts: ToastState, id: ToastId) {\n  for (const [position, values] of Object.entries(toasts)) {\n    if (findById(values, id)) {\n      return position as ToastPosition\n    }\n  }\n}\n\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it is still visible on screen.\n */\nexport const isVisible = (toasts: ToastState, id: ToastId) =>\n  !!getToastPosition(toasts, id)\n\n/**\n * Gets the styles to be applied to a toast's container\n * based on its position in the manager\n */\nexport function getToastStyle(position: ToastPosition): React.CSSProperties {\n  const isRighty = position.includes(\"right\")\n  const isLefty = position.includes(\"left\")\n\n  let alignItems = \"center\"\n  if (isRighty) alignItems = \"flex-end\"\n  if (isLefty) alignItems = \"flex-start\"\n\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems,\n  }\n}\n\n/**\n * Compute the style of a toast based on its position\n */\nexport function getToastListStyle(\n  position: ToastPosition,\n): React.CSSProperties {\n  const isTopOrBottom = position === \"top\" || position === \"bottom\"\n  const margin = isTopOrBottom ? \"0 auto\" : undefined\n\n  const top = position.includes(\"top\")\n    ? \"env(safe-area-inset-top, 0px)\"\n    : undefined\n  const bottom = position.includes(\"bottom\")\n    ? \"env(safe-area-inset-bottom, 0px)\"\n    : undefined\n  const right = !position.includes(\"left\")\n    ? \"env(safe-area-inset-right, 0px)\"\n    : undefined\n  const left = !position.includes(\"right\")\n    ? \"env(safe-area-inset-left, 0px)\"\n    : undefined\n\n  return {\n    position: \"fixed\",\n    zIndex: \"var(--toast-z-index, 5500)\",\n    pointerEvents: \"none\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    margin,\n    top,\n    bottom,\n    right,\n    left,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}