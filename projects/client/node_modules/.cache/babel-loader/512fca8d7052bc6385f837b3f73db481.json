{"ast":null,"code":"'use client'; // src/use-radio-group.ts\n\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { useCallback, useRef, useState, useId } from \"react\";\n\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\n\nfunction useRadioGroup() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props;\n  const [valueState, setValue] = useState(defaultValue || \"\");\n  const isControlled = typeof valueProp !== \"undefined\";\n  const value = isControlled ? valueProp : valueState;\n  const ref = useRef(null);\n  const focus = useCallback(() => {\n    const rootNode = ref.current;\n    if (!rootNode) return;\n    let query = `input:not(:disabled):checked`;\n    const firstEnabledAndCheckedInput = rootNode.querySelector(query);\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus();\n      return;\n    }\n\n    query = `input:not(:disabled)`;\n    const firstEnabledInput = rootNode.querySelector(query);\n    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();\n  }, []);\n  const uuid = useId();\n  const fallbackName = `radio-${uuid}`;\n  const name = nameProp || fallbackName;\n  const onChange = useCallback(eventOrValue => {\n    const nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(String(nextValue));\n  }, [onChangeProp, isControlled]);\n  const getRootProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let forwardedRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    return { ...props2,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\"\n    };\n  }, []);\n  const getRadioProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return { ...props2,\n      ref: ref2,\n      name,\n      [checkedKey]: value != null ? props2.value === value : void 0,\n\n      onChange(event) {\n        onChange(event);\n      },\n\n      \"data-radiogroup\": true\n    };\n  }, [isNative, name, onChange, value]);\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps\n  };\n}\n\nexport { useRadioGroup };","map":{"version":3,"mappings":"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","names":["isObject","mergeRefs","useCallback","useRef","useState","useId","isInputEvent","value","target","useRadioGroup","props","onChange","onChangeProp","valueProp","defaultValue","name","nameProp","isDisabled","isFocusable","isNative","htmlProps","valueState","setValue","isControlled","ref","focus","rootNode","current","query","firstEnabledAndCheckedInput","querySelector","firstEnabledInput","uuid","fallbackName","eventOrValue","nextValue","String","getRootProps","forwardedRef","role","getRadioProps","checkedKey","event"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\radio\\src\\use-radio-group.ts"],"sourcesContent":["import { isObject } from \"@chakra-ui/shared-utils\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { useCallback, useRef, useState, useId } from \"react\"\nimport { InputDOMAttributes, PropGetter } from \"@chakra-ui/react-types\"\n\ntype EventOrValue = React.ChangeEvent<HTMLInputElement> | string | number\n\nfunction isInputEvent(value: any): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: string\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: string\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: string): void\n  /**\n   * If `true`, all wrapped radio inputs will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n\n  /**\n   * If `true` and `isDisabled` is true, all wrapped radio inputs will remain\n   * focusable but not interactive.\n   *\n   * @default false\n   */\n  isFocusable?: boolean\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   *\n   * @default false\n   */\n  isNative?: boolean\n}\n\n/**\n * `useRadioGroup` is a custom hook that provides all the state management logic for a group of radios.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-radio-group\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = useState<string | number>(defaultValue || \"\")\n  const isControlled = typeof valueProp !== \"undefined\"\n  const value = isControlled ? valueProp : valueState\n\n  const ref = useRef<any>(null)\n\n  const focus = useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const uuid = useId()\n  const fallbackName = `radio-${uuid}`\n  const name = nameProp || fallbackName\n\n  const onChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(String(nextValue))\n    },\n    [onChangeProp, isControlled],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\",\n    }),\n    [],\n  )\n\n  const getRadioProps: PropGetter<\n    InputDOMAttributes & { isChecked?: boolean },\n    InputDOMAttributes\n  > = useCallback(\n    (props = {}, ref = null) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        ref,\n        name,\n        [checkedKey]: value != null ? props.value === value : undefined,\n        onChange(event) {\n          onChange(event as any)\n        },\n        \"data-radiogroup\": true,\n      }\n    },\n    [isNative, name, onChange, value],\n  )\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"]},"metadata":{},"sourceType":"module"}