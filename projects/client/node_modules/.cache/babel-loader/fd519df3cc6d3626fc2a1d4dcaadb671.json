{"ast":null,"code":"'use client';\n\nimport { __publicField, getNextIndex, getPrevIndex, isElement, sortNodes } from \"./chunk-3A5YOZDU.mjs\"; // src/descendant.ts\n\nvar DescendantsManager = class {\n  constructor() {\n    var _this = this;\n\n    __publicField(this, \"descendants\", /* @__PURE__ */new Map());\n\n    __publicField(this, \"register\", nodeOrOptions => {\n      if (nodeOrOptions == null) return;\n\n      if (isElement(nodeOrOptions)) {\n        return this.registerNode(nodeOrOptions);\n      }\n\n      return node => {\n        this.registerNode(node, nodeOrOptions);\n      };\n    });\n\n    __publicField(this, \"unregister\", node => {\n      this.descendants.delete(node);\n      const sorted = sortNodes(Array.from(this.descendants.keys()));\n      this.assignIndex(sorted);\n    });\n\n    __publicField(this, \"destroy\", () => {\n      this.descendants.clear();\n    });\n\n    __publicField(this, \"assignIndex\", descendants => {\n      this.descendants.forEach(descendant => {\n        const index = descendants.indexOf(descendant.node);\n        descendant.index = index;\n        descendant.node.dataset[\"index\"] = descendant.index.toString();\n      });\n    });\n\n    __publicField(this, \"count\", () => this.descendants.size);\n\n    __publicField(this, \"enabledCount\", () => this.enabledValues().length);\n\n    __publicField(this, \"values\", () => {\n      const values = Array.from(this.descendants.values());\n      return values.sort((a, b) => a.index - b.index);\n    });\n\n    __publicField(this, \"enabledValues\", () => {\n      return this.values().filter(descendant => !descendant.disabled);\n    });\n\n    __publicField(this, \"item\", index => {\n      if (this.count() === 0) return void 0;\n      return this.values()[index];\n    });\n\n    __publicField(this, \"enabledItem\", index => {\n      if (this.enabledCount() === 0) return void 0;\n      return this.enabledValues()[index];\n    });\n\n    __publicField(this, \"first\", () => this.item(0));\n\n    __publicField(this, \"firstEnabled\", () => this.enabledItem(0));\n\n    __publicField(this, \"last\", () => this.item(this.descendants.size - 1));\n\n    __publicField(this, \"lastEnabled\", () => {\n      const lastIndex = this.enabledValues().length - 1;\n      return this.enabledItem(lastIndex);\n    });\n\n    __publicField(this, \"indexOf\", node => {\n      var _a, _b;\n\n      if (!node) return -1;\n      return (_b = (_a = this.descendants.get(node)) == null ? void 0 : _a.index) != null ? _b : -1;\n    });\n\n    __publicField(this, \"enabledIndexOf\", node => {\n      if (node == null) return -1;\n      return this.enabledValues().findIndex(i => i.node.isSameNode(node));\n    });\n\n    __publicField(this, \"next\", function (index) {\n      let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const next = getNextIndex(index, _this.count(), loop);\n      return _this.item(next);\n    });\n\n    __publicField(this, \"nextEnabled\", function (index) {\n      let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      const item = _this.item(index);\n\n      if (!item) return;\n\n      const enabledIndex = _this.enabledIndexOf(item.node);\n\n      const nextEnabledIndex = getNextIndex(enabledIndex, _this.enabledCount(), loop);\n      return _this.enabledItem(nextEnabledIndex);\n    });\n\n    __publicField(this, \"prev\", function (index) {\n      let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      const prev = getPrevIndex(index, _this.count() - 1, loop);\n      return _this.item(prev);\n    });\n\n    __publicField(this, \"prevEnabled\", function (index) {\n      let loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n      const item = _this.item(index);\n\n      if (!item) return;\n\n      const enabledIndex = _this.enabledIndexOf(item.node);\n\n      const prevEnabledIndex = getPrevIndex(enabledIndex, _this.enabledCount() - 1, loop);\n      return _this.enabledItem(prevEnabledIndex);\n    });\n\n    __publicField(this, \"registerNode\", (node, options) => {\n      if (!node || this.descendants.has(node)) return;\n      const keys = Array.from(this.descendants.keys()).concat(node);\n      const sorted = sortNodes(keys);\n\n      if (options == null ? void 0 : options.disabled) {\n        options.disabled = !!options.disabled;\n      }\n\n      const descendant = {\n        node,\n        index: -1,\n        ...options\n      };\n      this.descendants.set(node, descendant);\n      this.assignIndex(sorted);\n    });\n  }\n\n};\nexport { DescendantsManager };","map":{"version":3,"mappings":"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","names":["DescendantsManager","constructor","__publicField","Map","nodeOrOptions","isElement","registerNode","node","descendants","delete","sorted","sortNodes","Array","from","keys","assignIndex","clear","forEach","descendant","index","indexOf","dataset","toString","size","enabledValues","length","values","sort","a","b","filter","disabled","count","enabledCount","item","enabledItem","lastIndex","_b","get","findIndex","i","isSameNode","loop","next","getNextIndex","enabledIndex","enabledIndexOf","nextEnabledIndex","prev","getPrevIndex","prevEnabledIndex","options","has","concat","set"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\descendant\\src\\descendant.ts"],"sourcesContent":["import { sortNodes, isElement, getNextIndex, getPrevIndex } from \"./utils\"\n\nexport type DescendantOptions<T = {}> = T & {\n  /**\n   * If `true`, the item will be registered in all nodes map\n   * but omitted from enabled nodes map\n   */\n  disabled?: boolean\n  /**\n   * The id of the item\n   */\n  id?: string\n}\n\nexport type Descendant<T, K> = DescendantOptions<K> & {\n  /**\n   * DOM element of the item\n   */\n  node: T\n  /**\n   * index of item in all nodes map and enabled nodes map\n   */\n  index: number\n}\n\n/**\n * @internal\n *\n * Class to manage descendants and their relative indices in the DOM.\n * It uses `node.compareDocumentPosition(...)` under the hood\n */\nexport class DescendantsManager<\n  T extends HTMLElement,\n  K extends Record<string, any> = {},\n> {\n  private descendants = new Map<T, Descendant<T, K>>()\n\n  register = (nodeOrOptions: T | null | DescendantOptions<K>) => {\n    if (nodeOrOptions == null) return\n\n    if (isElement(nodeOrOptions)) {\n      return this.registerNode(nodeOrOptions)\n    }\n\n    return (node: T | null) => {\n      this.registerNode(node, nodeOrOptions)\n    }\n  }\n\n  unregister = (node: T) => {\n    this.descendants.delete(node)\n    const sorted = sortNodes(Array.from(this.descendants.keys()))\n    this.assignIndex(sorted)\n  }\n\n  destroy = () => {\n    this.descendants.clear()\n  }\n\n  private assignIndex = (descendants: Node[]) => {\n    this.descendants.forEach((descendant) => {\n      const index = descendants.indexOf(descendant.node)\n      descendant.index = index\n      descendant.node.dataset[\"index\"] = descendant.index.toString()\n    })\n  }\n\n  count = () => this.descendants.size\n\n  enabledCount = () => this.enabledValues().length\n\n  values = () => {\n    const values = Array.from(this.descendants.values())\n    return values.sort((a, b) => a.index - b.index)\n  }\n\n  enabledValues = () => {\n    return this.values().filter((descendant) => !descendant.disabled)\n  }\n\n  item = (index: number) => {\n    if (this.count() === 0) return undefined\n    return this.values()[index]\n  }\n\n  enabledItem = (index: number) => {\n    if (this.enabledCount() === 0) return undefined\n    return this.enabledValues()[index]\n  }\n\n  first = () => this.item(0)\n\n  firstEnabled = () => this.enabledItem(0)\n\n  last = () => this.item(this.descendants.size - 1)\n\n  lastEnabled = () => {\n    const lastIndex = this.enabledValues().length - 1\n    return this.enabledItem(lastIndex)\n  }\n\n  indexOf = (node: T | null) => {\n    if (!node) return -1\n    return this.descendants.get(node)?.index ?? -1\n  }\n\n  enabledIndexOf = (node: T | null) => {\n    if (node == null) return -1\n    return this.enabledValues().findIndex((i) => i.node.isSameNode(node))\n  }\n\n  next = (index: number, loop = true) => {\n    const next = getNextIndex(index, this.count(), loop)\n    return this.item(next)\n  }\n\n  nextEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const nextEnabledIndex = getNextIndex(\n      enabledIndex,\n      this.enabledCount(),\n      loop,\n    )\n    return this.enabledItem(nextEnabledIndex)\n  }\n\n  prev = (index: number, loop = true) => {\n    const prev = getPrevIndex(index, this.count() - 1, loop)\n    return this.item(prev)\n  }\n\n  prevEnabled = (index: number, loop = true) => {\n    const item = this.item(index)\n    if (!item) return\n    const enabledIndex = this.enabledIndexOf(item.node)\n    const prevEnabledIndex = getPrevIndex(\n      enabledIndex,\n      this.enabledCount() - 1,\n      loop,\n    )\n    return this.enabledItem(prevEnabledIndex)\n  }\n\n  private registerNode = (node: T | null, options?: DescendantOptions<K>) => {\n    if (!node || this.descendants.has(node)) return\n\n    const keys = Array.from(this.descendants.keys()).concat(node)\n    const sorted = sortNodes(keys)\n\n    if (options?.disabled) {\n      options.disabled = !!options.disabled\n    }\n\n    const descendant = { node, index: -1, ...options }\n\n    this.descendants.set(node, descendant as Descendant<T, K>)\n\n    this.assignIndex(sorted)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}