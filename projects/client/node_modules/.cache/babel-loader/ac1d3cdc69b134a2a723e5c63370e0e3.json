{"ast":null,"code":"'use client'; // src/use-image.ts\n\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\nfunction useImage(props) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback\n  } = props;\n  const [status, setStatus] = useState(\"pending\");\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  const imageRef = useRef();\n  const load = useCallback(() => {\n    if (!src) return;\n    flush();\n    const img = new Image();\n    img.src = src;\n    if (crossOrigin) img.crossOrigin = crossOrigin;\n    if (srcSet) img.srcset = srcSet;\n    if (sizes) img.sizes = sizes;\n    if (loading) img.loading = loading;\n\n    img.onload = event => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n\n    img.onerror = error => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading]);\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n\n  useSafeLayoutEffect(() => {\n    if (ignoreFallback) return void 0;\n\n    if (status === \"loading\") {\n      load();\n    }\n\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  return ignoreFallback ? \"loaded\" : status;\n}\n\nvar shouldShowFallbackImage = (status, fallbackStrategy) => status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\" || status === \"failed\" && fallbackStrategy === \"onError\";\n\nexport { useImage, shouldShowFallbackImage };","map":{"version":3,"mappings":";;AAAA,SAASA,mBAAT,QAAoC,yCAApC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;;AA6DO,SAASC,QAAT,CAAkBC,KAAlB,EAAwC;EAC7C,MAAM;IACJC,OADI;IAEJC,GAFI;IAGJC,MAHI;IAIJC,MAJI;IAKJC,OALI;IAMJC,WANI;IAOJC,KAPI;IAQJC;EARI,IASFR,KATJ;EAWA,MAAM,CAACS,MAAD,EAASC,SAAT,IAAsBZ,SAAiB,SAAjB,CAA5B;EAEAF,UAAU,MAAM;IACdc,UAAUR,MAAM,SAAN,GAAkB,SAA5B;EACF,CAFA,EAEG,CAACA,GAAD,CAFH;EAIA,MAAMS,WAAWd,QAAjB;EAEA,MAAMe,OAAOjB,YAAY,MAAM;IAC7B,IAAI,CAACO,GAAL,EAAU;IAEVW;IAEA,MAAMC,MAAM,IAAIC,KAAJ,EAAZ;IACAD,IAAIZ,GAAJ,GAAUA,GAAV;IACA,IAAII,WAAJ,EAAiBQ,IAAIR,WAAJ,GAAkBA,WAAlB;IACjB,IAAIH,MAAJ,EAAYW,IAAIE,MAAJ,GAAab,MAAb;IACZ,IAAII,KAAJ,EAAWO,IAAIP,KAAJ,GAAYA,KAAZ;IACX,IAAIN,OAAJ,EAAaa,IAAIb,OAAJ,GAAcA,OAAd;;IAEba,IAAIG,MAAJ,GAAcC,KAAD,IAAW;MACtBL;MACAH,UAAU,QAAV;MACAN,iCAASc,KAAT;IACF,CAJA;;IAKAJ,IAAIK,OAAJ,GAAeC,KAAD,IAAW;MACvBP;MACAH,UAAU,QAAV;MACAL,mCAAUe,KAAV;IACF,CAJA;;IAMAT,SAASU,OAAT,GAAmBP,GAAnB;EACF,CAxBa,EAwBV,CAACZ,GAAD,EAAMI,WAAN,EAAmBH,MAAnB,EAA2BI,KAA3B,EAAkCH,MAAlC,EAA0CC,OAA1C,EAAmDJ,OAAnD,CAxBU,CAAb;;EA0BA,MAAMY,QAAQ,MAAM;IAClB,IAAIF,SAASU,OAAb,EAAsB;MACpBV,SAASU,OAAT,CAAiBJ,MAAjB,GAA0B,IAA1B;MACAN,SAASU,OAAT,CAAiBF,OAAjB,GAA2B,IAA3B;MACAR,SAASU,OAAT,GAAmB,IAAnB;IACF;EACF,CANA;;EAQA3B,oBAAoB,MAAM;IAKxB,IAAIc,cAAJ,EAAoB,OAAO,MAAP;;IAEpB,IAAIC,WAAW,SAAf,EAA0B;MACxBG;IACF;;IACA,OAAO,MAAM;MACXC;IACF,CAFA;EAGF,CAbA,EAaG,CAACJ,MAAD,EAASG,IAAT,EAAeJ,cAAf,CAbH;EAmBA,OAAOA,iBAAiB,QAAjB,GAA4BC,MAAnC;AACF;;AAEO,IAAMa,0BAA0B,CACrCb,MADqC,EAErCc,gBAFqC,KAIpCd,WAAW,QAAX,IAAuBc,qBAAqB,mBAA5C,IACAd,WAAW,QAAX,IAAuBc,qBAAqB,SALxC","names":["useSafeLayoutEffect","useCallback","useEffect","useRef","useState","useImage","props","loading","src","srcSet","onLoad","onError","crossOrigin","sizes","ignoreFallback","status","setStatus","imageRef","load","flush","img","Image","srcset","onload","event","onerror","error","current","shouldShowFallbackImage","fallbackStrategy"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\image\\src\\use-image.ts"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n"]},"metadata":{},"sourceType":"module"}