{"ast":null,"code":"'use client';\n\nimport { useShortcut } from \"./chunk-YSKACL7R.mjs\";\nimport { getNextItemFromSearch } from \"./chunk-BWUXSGSJ.mjs\"; // src/use-menu.ts\n\nimport { useClickable } from \"@chakra-ui/clickable\";\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useFocusOnHide } from \"@chakra-ui/react-use-focus-effect\";\nimport { usePopper } from \"@chakra-ui/popper\";\nimport { useDisclosure } from \"@chakra-ui/react-use-disclosure\";\nimport { useOutsideClick } from \"@chakra-ui/react-use-outside-click\";\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\";\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\";\nimport { dataAttr, callAllHandlers } from \"@chakra-ui/shared-utils\";\nimport { lazyDisclosure } from \"@chakra-ui/lazy-utils\";\nimport { cloneElement, useCallback, useRef, useState, useId, useMemo, useEffect } from \"react\";\nvar [MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant] = createDescendantContext();\nvar [MenuProvider, useMenuContext] = createContext({\n  strict: false,\n  name: \"MenuContext\"\n});\n\nfunction useIds(idProp) {\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n\n  const reactId = useId();\n  const id = idProp || reactId;\n  return useMemo(() => {\n    return prefixes.map(prefix => `${prefix}-${id}`);\n  }, [id, prefixes]);\n}\n\nfunction getOwnerDocument(node) {\n  var _a;\n\n  return (_a = node == null ? void 0 : node.ownerDocument) != null ? _a : document;\n}\n\nfunction isActiveElement(element) {\n  const doc = getOwnerDocument(element);\n  return doc.activeElement === element;\n}\n\nfunction useMenu() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    initialFocusRef,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    direction,\n    computePositionOnMount = false,\n    ...popperProps\n  } = props;\n  const menuRef = useRef(null);\n  const buttonRef = useRef(null);\n  const descendants = useMenuDescendants();\n  const focusMenu = useCallback(() => {\n    requestAnimationFrame(() => {\n      var _a;\n\n      (_a = menuRef.current) == null ? void 0 : _a.focus({\n        preventScroll: false\n      });\n    });\n  }, []);\n  const focusFirstItem = useCallback(() => {\n    const id2 = setTimeout(() => {\n      var _a;\n\n      if (initialFocusRef) {\n        (_a = initialFocusRef.current) == null ? void 0 : _a.focus();\n      } else {\n        const first = descendants.firstEnabled();\n        if (first) setFocusedIndex(first.index);\n      }\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants, initialFocusRef]);\n  const focusLastItem = useCallback(() => {\n    const id2 = setTimeout(() => {\n      const last = descendants.lastEnabled();\n      if (last) setFocusedIndex(last.index);\n    });\n    timeoutIds.current.add(id2);\n  }, [descendants]);\n  const onOpenInternal = useCallback(() => {\n    onOpenProp == null ? void 0 : onOpenProp();\n\n    if (autoSelect) {\n      focusFirstItem();\n    } else {\n      focusMenu();\n    }\n  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp]);\n  const {\n    isOpen,\n    onOpen,\n    onClose,\n    onToggle\n  } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenInternal\n  });\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: event => {\n      var _a;\n\n      if (!((_a = buttonRef.current) == null ? void 0 : _a.contains(event.target))) {\n        onClose();\n      }\n    }\n  });\n  const popper = usePopper({ ...popperProps,\n    enabled: isOpen || computePositionOnMount,\n    placement,\n    direction\n  });\n  const [focusedIndex, setFocusedIndex] = useState(-1);\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1);\n    }\n  }, [isOpen]);\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true\n  });\n  const animationState = useAnimationState({\n    isOpen,\n    ref: menuRef\n  });\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`);\n  const openAndFocusMenu = useCallback(() => {\n    onOpen();\n    focusMenu();\n  }, [onOpen, focusMenu]);\n  const timeoutIds = useRef( /* @__PURE__ */new Set([]));\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach(id2 => clearTimeout(id2));\n    timeoutIds.current.clear();\n  });\n  const openAndFocusFirstItem = useCallback(() => {\n    onOpen();\n    focusFirstItem();\n  }, [focusFirstItem, onOpen]);\n  const openAndFocusLastItem = useCallback(() => {\n    onOpen();\n    focusLastItem();\n  }, [onOpen, focusLastItem]);\n  const refocus = useCallback(() => {\n    var _a, _b;\n\n    const doc = getOwnerDocument(menuRef.current);\n    const hasFocusWithin = (_a = menuRef.current) == null ? void 0 : _a.contains(doc.activeElement);\n    const shouldRefocus = isOpen && !hasFocusWithin;\n    if (!shouldRefocus) return;\n    const node = (_b = descendants.item(focusedIndex)) == null ? void 0 : _b.node;\n    node == null ? void 0 : node.focus();\n  }, [isOpen, focusedIndex, descendants]);\n  const rafId = useRef(null);\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    unstable__animationState: animationState,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior,\n    initialFocusRef,\n    rafId\n  };\n}\n\nfunction useMenuButton() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let externalRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const menu = useMenuContext();\n  const {\n    onToggle,\n    popper,\n    openAndFocusFirstItem,\n    openAndFocusLastItem\n  } = menu;\n  const onKeyDown = useCallback(event => {\n    const eventKey = event.key;\n    const keyMap = {\n      Enter: openAndFocusFirstItem,\n      ArrowDown: openAndFocusFirstItem,\n      ArrowUp: openAndFocusLastItem\n    };\n    const action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      event.stopPropagation();\n      action(event);\n    }\n  }, [openAndFocusFirstItem, openAndFocusLastItem]);\n  return { ...props,\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\",\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  };\n}\n\nfunction isTargetMenuItem(target) {\n  var _a;\n\n  return isHTMLElement(target) && !!((_a = target == null ? void 0 : target.getAttribute(\"role\")) == null ? void 0 : _a.startsWith(\"menuitem\"));\n}\n\nfunction useMenuList() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const menu = useMenuContext();\n\n  if (!menu) {\n    throw new Error(`useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`);\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior,\n    unstable__animationState: animated\n  } = menu;\n  const descendants = useMenuDescendantsContext();\n  const createTypeaheadHandler = useShortcut({\n    preventDefault: event => event.key !== \" \" && isTargetMenuItem(event.target)\n  });\n  const onKeyDown = useCallback(event => {\n    if (!event.currentTarget.contains(event.target)) return;\n    const eventKey = event.key;\n    const keyMap = {\n      Tab: event2 => event2.preventDefault(),\n      Escape: onClose,\n      ArrowDown: () => {\n        const next = descendants.nextEnabled(focusedIndex);\n        if (next) setFocusedIndex(next.index);\n      },\n      ArrowUp: () => {\n        const prev = descendants.prevEnabled(focusedIndex);\n        if (prev) setFocusedIndex(prev.index);\n      }\n    };\n    const fn = keyMap[eventKey];\n\n    if (fn) {\n      event.preventDefault();\n      fn(event);\n      return;\n    }\n\n    const onTypeahead = createTypeaheadHandler(character => {\n      const nextItem = getNextItemFromSearch(descendants.values(), character, item => {\n        var _a, _b;\n\n        return (_b = (_a = item == null ? void 0 : item.node) == null ? void 0 : _a.textContent) != null ? _b : \"\";\n      }, descendants.item(focusedIndex));\n\n      if (nextItem) {\n        const index = descendants.indexOf(nextItem.node);\n        setFocusedIndex(index);\n      }\n    });\n\n    if (isTargetMenuItem(event.target)) {\n      onTypeahead(event);\n    }\n  }, [descendants, focusedIndex, createTypeaheadHandler, onClose, setFocusedIndex]);\n  const hasBeenOpened = useRef(false);\n\n  if (isOpen) {\n    hasBeenOpened.current = true;\n  }\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present\n  });\n  return { ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: { ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\"\n    },\n    \"aria-orientation\": \"vertical\",\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n  };\n}\n\nfunction useMenuPositioner() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    popper,\n    isOpen\n  } = useMenuContext();\n  return popper.getPopperProps({ ...props,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props.style\n    }\n  });\n}\n\nfunction useMenuItem() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let externalRef = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    onFocus: onFocusProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect,\n    type: typeProp,\n    ...htmlProps\n  } = props;\n  const menu = useMenuContext();\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId,\n    rafId\n  } = menu;\n  const ref = useRef(null);\n  const id = `${menuId}-menuitem-${useId()}`;\n  const {\n    index,\n    register\n  } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable\n  });\n  const onMouseEnter = useCallback(event => {\n    onMouseEnterProp == null ? void 0 : onMouseEnterProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(index);\n  }, [setFocusedIndex, index, isDisabled, onMouseEnterProp]);\n  const onMouseMove = useCallback(event => {\n    onMouseMoveProp == null ? void 0 : onMouseMoveProp(event);\n\n    if (ref.current && !isActiveElement(ref.current)) {\n      onMouseEnter(event);\n    }\n  }, [onMouseEnter, onMouseMoveProp]);\n  const onMouseLeave = useCallback(event => {\n    onMouseLeaveProp == null ? void 0 : onMouseLeaveProp(event);\n    if (isDisabled) return;\n    setFocusedIndex(-1);\n  }, [setFocusedIndex, isDisabled, onMouseLeaveProp]);\n  const onClick = useCallback(event => {\n    onClickProp == null ? void 0 : onClickProp(event);\n    if (!isTargetMenuItem(event.currentTarget)) return;\n\n    if (closeOnSelect != null ? closeOnSelect : menuCloseOnSelect) {\n      onClose();\n    }\n  }, [onClose, onClickProp, menuCloseOnSelect, closeOnSelect]);\n  const onFocus = useCallback(event => {\n    onFocusProp == null ? void 0 : onFocusProp(event);\n    setFocusedIndex(index);\n  }, [setFocusedIndex, onFocusProp, index]);\n  const isFocused = index === focusedIndex;\n  const trulyDisabled = isDisabled && !isFocusable;\n  useUpdateEffect(() => {\n    if (!isOpen) return;\n\n    if (isFocused && !trulyDisabled && ref.current) {\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n\n      rafId.current = requestAnimationFrame(() => {\n        var _a;\n\n        (_a = ref.current) == null ? void 0 : _a.focus();\n        rafId.current = null;\n      });\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      menuRef.current.focus({\n        preventScroll: true\n      });\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen]);\n  const clickableProps = useClickable({\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled,\n    isFocusable\n  });\n  return { ...htmlProps,\n    ...clickableProps,\n    type: typeProp != null ? typeProp : clickableProps.type,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1\n  };\n}\n\nfunction useMenuOption() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  const {\n    type = \"radio\",\n    isChecked,\n    ...rest\n  } = props;\n  const ownProps = useMenuItem(rest, ref);\n  return { ...ownProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked\n  };\n}\n\nfunction useMenuOptionGroup() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props;\n  const isRadio = type === \"radio\";\n  const fallback = isRadio ? \"\" : [];\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue != null ? defaultValue : fallback,\n    value: valueProp,\n    onChange: onChangeProp\n  });\n  const onChange = useCallback(selectedValue => {\n    if (type === \"radio\" && typeof value === \"string\") {\n      setValue(selectedValue);\n    }\n\n    if (type === \"checkbox\" && Array.isArray(value)) {\n      const nextValue = value.includes(selectedValue) ? value.filter(item => item !== selectedValue) : value.concat(selectedValue);\n      setValue(nextValue);\n    }\n  }, [value, setValue, type]);\n  const validChildren = getValidChildren(children);\n  const clones = validChildren.map(child => {\n    if (child.type.id !== \"MenuItemOption\") return child;\n\n    const onClick = event => {\n      var _a, _b;\n\n      onChange(child.props.value);\n      (_b = (_a = child.props).onClick) == null ? void 0 : _b.call(_a, event);\n    };\n\n    const isChecked = type === \"radio\" ? child.props.value === value : value.includes(child.props.value);\n    return cloneElement(child, {\n      type,\n      onClick,\n      isChecked\n    });\n  });\n  return { ...htmlProps,\n    children: clones\n  };\n}\n\nfunction useMenuState() {\n  const {\n    isOpen,\n    onClose\n  } = useMenuContext();\n  return {\n    isOpen,\n    onClose\n  };\n}\n\nfunction isHTMLElement(el) {\n  var _a;\n\n  if (!isElement(el)) return false;\n  const win = (_a = el.ownerDocument.defaultView) != null ? _a : window;\n  return el instanceof win.HTMLElement;\n}\n\nfunction isElement(el) {\n  return el != null && typeof el == \"object\" && \"nodeType\" in el && el.nodeType === Node.ELEMENT_NODE;\n}\n\nfunction useUnmountEffect(fn) {\n  let deps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  return useEffect(() => () => fn(), // eslint-disable-next-line react-hooks/exhaustive-deps\n  deps);\n}\n\nexport { MenuDescendantsProvider, useMenuDescendantsContext, useMenuDescendants, useMenuDescendant, MenuProvider, useMenuContext, useMenu, useMenuButton, useMenuList, useMenuPositioner, useMenuItem, useMenuOption, useMenuOptionGroup, useMenuState };","map":{"version":3,"mappings":"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","names":["useClickable","createDescendantContext","useFocusOnHide","usePopper","useDisclosure","useOutsideClick","useAnimationState","createContext","getValidChildren","useControllableState","useUpdateEffect","mergeRefs","dataAttr","callAllHandlers","lazyDisclosure","cloneElement","useCallback","useRef","useState","useId","useMemo","useEffect","MenuDescendantsProvider","useMenuDescendantsContext","useMenuDescendants","useMenuDescendant","MenuProvider","useMenuContext","strict","name","useIds","idProp","prefixes","reactId","id","map","prefix","getOwnerDocument","node","_a","ownerDocument","document","isActiveElement","element","doc","activeElement","useMenu","props","closeOnSelect","closeOnBlur","initialFocusRef","autoSelect","isLazy","isOpen","isOpenProp","defaultIsOpen","onClose","onCloseProp","onOpen","onOpenProp","placement","lazyBehavior","direction","computePositionOnMount","popperProps","menuRef","buttonRef","descendants","focusMenu","requestAnimationFrame","current","focus","preventScroll","focusFirstItem","setTimeout","first","firstEnabled","setFocusedIndex","index","timeoutIds","add","focusLastItem","last","lastEnabled","onOpenInternal","onToggle","enabled","ref","handler","event","contains","target","popper","focusedIndex","focusRef","visible","shouldFocus","animationState","buttonId","menuId","openAndFocusMenu","Set","useUnmountEffect","forEach","clearTimeout","clear","openAndFocusFirstItem","openAndFocusLastItem","refocus","hasFocusWithin","shouldRefocus","_b","item","rafId","onTransitionEnd","unstable__animationState","forceUpdate","orientation","useMenuButton","externalRef","menu","onKeyDown","eventKey","key","keyMap","Enter","ArrowDown","ArrowUp","action","preventDefault","stopPropagation","referenceRef","onClick","isTargetMenuItem","isHTMLElement","getAttribute","startsWith","useMenuList","Error","animated","createTypeaheadHandler","useShortcut","currentTarget","Tab","Escape","next","nextEnabled","prev","prevEnabled","fn","onTypeahead","character","nextItem","getNextItemFromSearch","values","textContent","indexOf","hasBeenOpened","shouldRenderChildren","wasSelected","mode","isSelected","present","children","tabIndex","role","style","transformOrigin","useMenuPositioner","getPopperProps","visibility","useMenuItem","onMouseEnter","onMouseEnterProp","onMouseMove","onMouseMoveProp","onMouseLeave","onMouseLeaveProp","onClickProp","onFocus","onFocusProp","isDisabled","isFocusable","type","typeProp","htmlProps","menuCloseOnSelect","register","disabled","isFocused","trulyDisabled","cancelAnimationFrame","clickableProps","useMenuOption","isChecked","rest","ownProps","useMenuOptionGroup","value","valueProp","defaultValue","onChange","onChangeProp","isRadio","fallback","setValue","selectedValue","Array","isArray","nextValue","includes","filter","concat","validChildren","clones","child","useMenuState","el","isElement","win","defaultView","window","HTMLElement","nodeType","Node","ELEMENT_NODE","deps"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\menu\\src\\use-menu.ts"],"sourcesContent":["import { useClickable } from \"@chakra-ui/clickable\"\nimport { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useFocusOnHide } from \"@chakra-ui/react-use-focus-effect\"\nimport { usePopper, UsePopperProps } from \"@chakra-ui/popper\"\nimport {\n  useDisclosure,\n  UseDisclosureProps,\n} from \"@chakra-ui/react-use-disclosure\"\nimport { useOutsideClick } from \"@chakra-ui/react-use-outside-click\"\nimport { useAnimationState } from \"@chakra-ui/react-use-animation-state\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { getValidChildren } from \"@chakra-ui/react-children-utils\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { useUpdateEffect } from \"@chakra-ui/react-use-update-effect\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport { dataAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { lazyDisclosure, LazyMode } from \"@chakra-ui/lazy-utils\"\n\nimport React, {\n  cloneElement,\n  useCallback,\n  useRef,\n  useState,\n  useId,\n  useMemo,\n  useEffect,\n} from \"react\"\nimport { useShortcut } from \"./use-shortcut\"\nimport { getNextItemFromSearch } from \"./get-next-item-from-search\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  MenuDescendantsProvider,\n  useMenuDescendantsContext,\n  useMenuDescendants,\n  useMenuDescendant,\n] = createDescendantContext<HTMLElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track menu state and logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [MenuProvider, useMenuContext] = createContext<\n  Omit<UseMenuReturn, \"descendants\">\n>({\n  strict: false,\n  name: \"MenuContext\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * useMenu hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuProps\n  extends Omit<UsePopperProps, \"enabled\">,\n    UseDisclosureProps {\n  /**\n   * The `ref` of the element that should receive focus when the popover opens.\n   */\n  initialFocusRef?: React.RefObject<{ focus(): void }>\n  /**\n   * If `true`, the menu will close when a menu item is\n   * clicked\n   *\n   * @default true\n   */\n  closeOnSelect?: boolean\n  /**\n   * If `true`, the menu will close when you click outside\n   * the menu list\n   *\n   * @default true\n   */\n  closeOnBlur?: boolean\n  /**\n   * If `true`, the first enabled menu item will receive focus and be selected\n   * when the menu opens.\n   *\n   * @default true\n   */\n  autoSelect?: boolean\n  /**\n   * Performance 🚀:\n   * If `true`, the MenuItem rendering will be deferred\n   * until the menu is open.\n   *\n   * @default false\n   */\n  isLazy?: boolean\n  /**\n   * Performance 🚀:\n   * The lazy behavior of menu's content when not visible.\n   * Only works when `isLazy={true}`\n   *\n   * - \"unmount\": The menu's content is always unmounted when not open.\n   * - \"keepMounted\": The menu's content initially unmounted,\n   * but stays mounted when menu is open.\n   *\n   * @default \"unmount\"\n   */\n  lazyBehavior?: LazyMode\n  /**\n   * If `rtl`, proper placement positions will be flipped i.e. 'top-right' will\n   * become 'top-left' and vice-verse\n   */\n  direction?: \"ltr\" | \"rtl\"\n  /*\n   * If `true`, the menu will be positioned when it mounts\n   * (even if it's not open).\n   *\n   * Note 🚨: We don't recommend using this in a menu/popover intensive UI or page\n   * as it might affect scrolling performance.\n   *\n   * @default false\n   */\n  computePositionOnMount?: boolean\n}\n\nfunction useIds(idProp?: string, ...prefixes: string[]) {\n  const reactId = useId()\n  const id = idProp || reactId\n  return useMemo(() => {\n    return prefixes.map((prefix) => `${prefix}-${id}`)\n  }, [id, prefixes])\n}\n\nfunction getOwnerDocument(node?: Element | null): Document {\n  return node?.ownerDocument ?? document\n}\n\nfunction isActiveElement(element: HTMLElement) {\n  const doc = getOwnerDocument(element)\n  return doc.activeElement === (element as HTMLElement)\n}\n\n/**\n * React Hook to manage a menu\n *\n * It provides the logic and will be used with react context\n * to propagate its return value to all children\n */\nexport function useMenu(props: UseMenuProps = {}) {\n  const {\n    id,\n    closeOnSelect = true,\n    closeOnBlur = true,\n    initialFocusRef,\n    autoSelect = true,\n    isLazy,\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenProp,\n    placement = \"bottom-start\",\n    lazyBehavior = \"unmount\",\n    direction,\n    computePositionOnMount = false,\n    ...popperProps\n  } = props\n  /**\n   * Prepare the reference to the menu and disclosure\n   */\n  const menuRef = useRef<HTMLDivElement>(null)\n  const buttonRef = useRef<HTMLButtonElement>(null)\n\n  /**\n   * Context to register all menu item nodes\n   */\n  const descendants = useMenuDescendants()\n\n  const focusMenu = useCallback(() => {\n    requestAnimationFrame(() => {\n      menuRef.current?.focus({ preventScroll: false })\n    })\n  }, [])\n\n  const focusFirstItem = useCallback(() => {\n    const id = setTimeout(() => {\n      if (initialFocusRef) {\n        initialFocusRef.current?.focus()\n      } else {\n        const first = descendants.firstEnabled()\n        if (first) setFocusedIndex(first.index)\n      }\n    })\n    timeoutIds.current.add(id)\n  }, [descendants, initialFocusRef])\n\n  const focusLastItem = useCallback(() => {\n    const id = setTimeout(() => {\n      const last = descendants.lastEnabled()\n      if (last) setFocusedIndex(last.index)\n    })\n    timeoutIds.current.add(id)\n  }, [descendants])\n\n  const onOpenInternal = useCallback(() => {\n    onOpenProp?.()\n    if (autoSelect) {\n      focusFirstItem()\n    } else {\n      focusMenu()\n    }\n  }, [autoSelect, focusFirstItem, focusMenu, onOpenProp])\n\n  const { isOpen, onOpen, onClose, onToggle } = useDisclosure({\n    isOpen: isOpenProp,\n    defaultIsOpen,\n    onClose: onCloseProp,\n    onOpen: onOpenInternal,\n  })\n\n  useOutsideClick({\n    enabled: isOpen && closeOnBlur,\n    ref: menuRef,\n    handler: (event) => {\n      if (!buttonRef.current?.contains(event.target as HTMLElement)) {\n        onClose()\n      }\n    },\n  })\n\n  /**\n   * Add some popper.js for dynamic positioning\n   */\n  const popper: any = usePopper({\n    ...popperProps,\n    enabled: isOpen || computePositionOnMount,\n    placement,\n    direction,\n  })\n\n  const [focusedIndex, setFocusedIndex] = useState(-1)\n\n  /**\n   * Focus the button when we close the menu\n   */\n  useUpdateEffect(() => {\n    if (!isOpen) {\n      setFocusedIndex(-1)\n    }\n  }, [isOpen])\n\n  useFocusOnHide(menuRef, {\n    focusRef: buttonRef,\n    visible: isOpen,\n    shouldFocus: true,\n  })\n\n  const animationState = useAnimationState({ isOpen, ref: menuRef })\n\n  /**\n   * Generate unique ids for menu's list and button\n   */\n  const [buttonId, menuId] = useIds(id, `menu-button`, `menu-list`)\n\n  const openAndFocusMenu = useCallback(() => {\n    onOpen()\n    focusMenu()\n  }, [onOpen, focusMenu])\n\n  const timeoutIds = useRef<Set<any>>(new Set([]))\n\n  useUnmountEffect(() => {\n    timeoutIds.current.forEach((id) => clearTimeout(id))\n    timeoutIds.current.clear()\n  })\n\n  const openAndFocusFirstItem = useCallback(() => {\n    onOpen()\n    focusFirstItem()\n  }, [focusFirstItem, onOpen])\n\n  const openAndFocusLastItem = useCallback(() => {\n    onOpen()\n    focusLastItem()\n  }, [onOpen, focusLastItem])\n\n  const refocus = useCallback(() => {\n    const doc = getOwnerDocument(menuRef.current)\n    const hasFocusWithin = menuRef.current?.contains(doc.activeElement)\n    const shouldRefocus = isOpen && !hasFocusWithin\n\n    if (!shouldRefocus) return\n\n    const node = descendants.item(focusedIndex)?.node\n    node?.focus()\n  }, [isOpen, focusedIndex, descendants])\n\n  /**\n   * Track the animation frame which is scheduled to focus\n   * a menu item, so it can be cancelled if another item\n   * is focused before the animation executes. This prevents\n   * infinite rerenders.\n   */\n  const rafId = useRef<number | null>(null)\n\n  return {\n    openAndFocusMenu,\n    openAndFocusFirstItem,\n    openAndFocusLastItem,\n    onTransitionEnd: refocus,\n    unstable__animationState: animationState,\n    descendants,\n    popper,\n    buttonId,\n    menuId,\n    forceUpdate: popper.forceUpdate,\n    orientation: \"vertical\",\n    isOpen,\n    onToggle,\n    onOpen,\n    onClose,\n    menuRef,\n    buttonRef,\n    focusedIndex,\n    closeOnSelect,\n    closeOnBlur,\n    autoSelect,\n    setFocusedIndex,\n    isLazy,\n    lazyBehavior,\n    initialFocusRef,\n    rafId,\n  }\n}\n\nexport interface UseMenuReturn extends ReturnType<typeof useMenu> {}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuButton hook\n * -----------------------------------------------------------------------------------------------*/\nexport interface UseMenuButtonProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu button.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuButton(\n  props: UseMenuButtonProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const menu = useMenuContext()\n\n  const { onToggle, popper, openAndFocusFirstItem, openAndFocusLastItem } = menu\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      const eventKey = event.key\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Enter: openAndFocusFirstItem,\n        ArrowDown: openAndFocusFirstItem,\n        ArrowUp: openAndFocusLastItem,\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        event.stopPropagation()\n        action(event)\n      }\n    },\n    [openAndFocusFirstItem, openAndFocusLastItem],\n  )\n\n  return {\n    ...props,\n    ref: mergeRefs(menu.buttonRef, externalRef, popper.referenceRef),\n    id: menu.buttonId,\n    \"data-active\": dataAttr(menu.isOpen),\n    \"aria-expanded\": menu.isOpen,\n    \"aria-haspopup\": \"menu\" as React.AriaAttributes[\"aria-haspopup\"],\n    \"aria-controls\": menu.menuId,\n    onClick: callAllHandlers(props.onClick, onToggle),\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\nfunction isTargetMenuItem(target: EventTarget | null) {\n  // this will catch `menuitem`, `menuitemradio`, `menuitemcheckbox`\n  return (\n    isHTMLElement(target) &&\n    !!target?.getAttribute(\"role\")?.startsWith(\"menuitem\")\n  )\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuList\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuListProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\"> {}\n\n/**\n * React Hook to manage a menu list.\n *\n * The assumption here is that the `useMenu` hook is used\n * in a component higher up the tree, and its return value\n * is passed as `context` to this hook.\n */\nexport function useMenuList(\n  props: UseMenuListProps = {},\n  ref: React.Ref<any> = null,\n): React.HTMLAttributes<HTMLElement> & React.RefAttributes<HTMLElement> {\n  const menu = useMenuContext()\n\n  if (!menu) {\n    throw new Error(\n      `useMenuContext: context is undefined. Seems you forgot to wrap component within <Menu>`,\n    )\n  }\n\n  const {\n    focusedIndex,\n    setFocusedIndex,\n    menuRef,\n    isOpen,\n    onClose,\n    menuId,\n    isLazy,\n    lazyBehavior,\n    unstable__animationState: animated,\n  } = menu\n\n  const descendants = useMenuDescendantsContext()\n\n  /**\n   * Hook that creates a keydown event handler that listens\n   * to printable keyboard character press\n   */\n  const createTypeaheadHandler = useShortcut({\n    preventDefault: (event) =>\n      event.key !== \" \" && isTargetMenuItem(event.target),\n  })\n\n  const onKeyDown = useCallback(\n    (event: React.KeyboardEvent) => {\n      // ignore events bubbles from portal children\n      if (!event.currentTarget.contains(event.target as Element)) return\n\n      const eventKey = event.key\n\n      const keyMap: Record<string, React.KeyboardEventHandler> = {\n        Tab: (event) => event.preventDefault(),\n        Escape: onClose,\n        ArrowDown: () => {\n          const next = descendants.nextEnabled(focusedIndex)\n          if (next) setFocusedIndex(next.index)\n        },\n        ArrowUp: () => {\n          const prev = descendants.prevEnabled(focusedIndex)\n          if (prev) setFocusedIndex(prev.index)\n        },\n      }\n\n      const fn = keyMap[eventKey]\n\n      if (fn) {\n        event.preventDefault()\n        fn(event)\n        return\n      }\n\n      /**\n       * Typeahead: Based on current character pressed,\n       * find the next item to be selected\n       */\n      const onTypeahead = createTypeaheadHandler((character) => {\n        const nextItem = getNextItemFromSearch(\n          descendants.values(),\n          character,\n          (item) => item?.node?.textContent ?? \"\",\n          descendants.item(focusedIndex),\n        )\n        if (nextItem) {\n          const index = descendants.indexOf(nextItem.node)\n          setFocusedIndex(index)\n        }\n      })\n\n      if (isTargetMenuItem(event.target)) {\n        onTypeahead(event)\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      createTypeaheadHandler,\n      onClose,\n      setFocusedIndex,\n    ],\n  )\n\n  const hasBeenOpened = useRef(false)\n  if (isOpen) {\n    hasBeenOpened.current = true\n  }\n\n  const shouldRenderChildren = lazyDisclosure({\n    wasSelected: hasBeenOpened.current,\n    enabled: isLazy,\n    mode: lazyBehavior,\n    isSelected: animated.present,\n  })\n\n  return {\n    ...props,\n    ref: mergeRefs(menuRef, ref),\n    children: shouldRenderChildren ? props.children : null,\n    tabIndex: -1,\n    role: \"menu\",\n    id: menuId,\n    style: {\n      ...props.style,\n      transformOrigin: \"var(--popper-transform-origin)\",\n    },\n    \"aria-orientation\": \"vertical\" as React.AriaAttributes[\"aria-orientation\"],\n    onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuPosition: Composes usePopper to position the menu\n * -----------------------------------------------------------------------------------------------*/\n\nexport function useMenuPositioner(props: any = {}) {\n  const { popper, isOpen } = useMenuContext()\n  return popper.getPopperProps({\n    ...props,\n    style: {\n      visibility: isOpen ? \"visible\" : \"hidden\",\n      ...props.style,\n    },\n  })\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuItem: Hook for each menu item within the menu list.\n   We also use it in `useMenuItemOption`\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuItemProps\n  extends Omit<React.HTMLAttributes<Element>, \"color\" | \"disabled\"> {\n  /**\n   * If `true`, the menuitem will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and the menuitem is disabled, it'll\n   * remain keyboard-focusable\n   */\n  isFocusable?: boolean\n  /**\n   * Overrides the parent menu's `closeOnSelect` prop.\n   */\n  closeOnSelect?: boolean\n  /**\n   * The type of the menuitem.\n   */\n  type?: React.ButtonHTMLAttributes<HTMLButtonElement>[\"type\"]\n}\n\nexport function useMenuItem(\n  props: UseMenuItemProps = {},\n  externalRef: React.Ref<any> = null,\n) {\n  const {\n    onMouseEnter: onMouseEnterProp,\n    onMouseMove: onMouseMoveProp,\n    onMouseLeave: onMouseLeaveProp,\n    onClick: onClickProp,\n    onFocus: onFocusProp,\n    isDisabled,\n    isFocusable,\n    closeOnSelect,\n    type: typeProp,\n    ...htmlProps\n  } = props\n\n  const menu = useMenuContext()\n\n  const {\n    setFocusedIndex,\n    focusedIndex,\n    closeOnSelect: menuCloseOnSelect,\n    onClose,\n    menuRef,\n    isOpen,\n    menuId,\n    rafId,\n  } = menu\n\n  const ref = useRef<HTMLDivElement>(null)\n  const id = `${menuId}-menuitem-${useId()}`\n\n  /**\n   * Register the menuitem's node into the domContext\n   */\n  const { index, register } = useMenuDescendant({\n    disabled: isDisabled && !isFocusable,\n  })\n\n  const onMouseEnter = useCallback(\n    (event: any) => {\n      onMouseEnterProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, index, isDisabled, onMouseEnterProp],\n  )\n\n  const onMouseMove = useCallback(\n    (event: any) => {\n      onMouseMoveProp?.(event)\n      if (ref.current && !isActiveElement(ref.current)) {\n        onMouseEnter(event)\n      }\n    },\n    [onMouseEnter, onMouseMoveProp],\n  )\n\n  const onMouseLeave = useCallback(\n    (event: any) => {\n      onMouseLeaveProp?.(event)\n      if (isDisabled) return\n      setFocusedIndex(-1)\n    },\n    [setFocusedIndex, isDisabled, onMouseLeaveProp],\n  )\n\n  const onClick = useCallback(\n    (event: React.MouseEvent) => {\n      onClickProp?.(event)\n      if (!isTargetMenuItem(event.currentTarget)) return\n      /**\n       * Close menu and parent menus, allowing the MenuItem\n       * to override its parent menu's `closeOnSelect` prop.\n       */\n      if (closeOnSelect ?? menuCloseOnSelect) {\n        onClose()\n      }\n    },\n    [onClose, onClickProp, menuCloseOnSelect, closeOnSelect],\n  )\n\n  const onFocus = useCallback(\n    (event: React.FocusEvent) => {\n      onFocusProp?.(event)\n      setFocusedIndex(index)\n    },\n    [setFocusedIndex, onFocusProp, index],\n  )\n\n  const isFocused = index === focusedIndex\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  useUpdateEffect(() => {\n    if (!isOpen) return\n    if (isFocused && !trulyDisabled && ref.current) {\n      // Cancel any pending animations\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current)\n      }\n      rafId.current = requestAnimationFrame(() => {\n        ref.current?.focus()\n        rafId.current = null\n      })\n    } else if (menuRef.current && !isActiveElement(menuRef.current)) {\n      menuRef.current.focus({ preventScroll: true })\n    }\n  }, [isFocused, trulyDisabled, menuRef, isOpen])\n\n  const clickableProps = useClickable({\n    onClick,\n    onFocus,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    ref: mergeRefs(register, ref, externalRef),\n    isDisabled,\n    isFocusable,\n  })\n\n  return {\n    ...htmlProps,\n    ...clickableProps,\n    type: typeProp ?? (clickableProps as any).type,\n    id,\n    role: \"menuitem\",\n    tabIndex: isFocused ? 0 : -1,\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOption: Composes useMenuItem to provide a selectable/checkable menu item\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionOptions {\n  value?: string\n  isChecked?: boolean\n  type?: \"radio\" | \"checkbox\"\n  children?: React.ReactNode\n}\n\nexport interface UseMenuOptionProps\n  extends Omit<UseMenuItemProps, \"type\">,\n    UseMenuOptionOptions {}\n\nexport function useMenuOption(\n  props: UseMenuOptionProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { type = \"radio\", isChecked, ...rest } = props\n  const ownProps = useMenuItem(rest, ref)\n  return {\n    ...ownProps,\n    role: `menuitem${type}`,\n    \"aria-checked\": isChecked as React.AriaAttributes[\"aria-checked\"],\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * useMenuOptionGroup: Manages the state of multiple selectable menuitem or menu option\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UseMenuOptionGroupProps {\n  value?: string | string[]\n  defaultValue?: string | string[]\n  type?: \"radio\" | \"checkbox\"\n  onChange?: (value: string | string[]) => void\n  children?: React.ReactNode\n}\n\nexport function useMenuOptionGroup(props: UseMenuOptionGroupProps = {}) {\n  const {\n    children,\n    type = \"radio\",\n    value: valueProp,\n    defaultValue,\n    onChange: onChangeProp,\n    ...htmlProps\n  } = props\n\n  const isRadio = type === \"radio\"\n\n  const fallback = isRadio ? \"\" : []\n\n  const [value, setValue] = useControllableState({\n    defaultValue: defaultValue ?? fallback,\n    value: valueProp,\n    onChange: onChangeProp,\n  })\n\n  const onChange = useCallback(\n    (selectedValue: string) => {\n      if (type === \"radio\" && typeof value === \"string\") {\n        setValue(selectedValue)\n      }\n\n      if (type === \"checkbox\" && Array.isArray(value)) {\n        const nextValue = value.includes(selectedValue)\n          ? value.filter((item) => item !== selectedValue)\n          : value.concat(selectedValue)\n\n        setValue(nextValue)\n      }\n    },\n    [value, setValue, type],\n  )\n\n  const validChildren = getValidChildren(children)\n\n  const clones = validChildren.map((child) => {\n    /**\n     * We've added an internal `id` to each `MenuItemOption`,\n     * let's use that for type-checking.\n     *\n     * We can't rely on displayName or the element's type since\n     * they can be changed by the user.\n     */\n    if ((child.type as any).id !== \"MenuItemOption\") return child\n\n    const onClick = (event: MouseEvent) => {\n      onChange(child.props.value)\n      child.props.onClick?.(event)\n    }\n\n    const isChecked =\n      type === \"radio\"\n        ? child.props.value === value\n        : value.includes(child.props.value)\n\n    return cloneElement(child, {\n      type,\n      onClick,\n      isChecked,\n    })\n  })\n\n  return {\n    ...htmlProps,\n    children: clones,\n  }\n}\n\nexport function useMenuState() {\n  const { isOpen, onClose } = useMenuContext()\n  return { isOpen, onClose }\n}\n\nfunction isHTMLElement(el: any): el is HTMLElement {\n  if (!isElement(el)) return false\n  const win = el.ownerDocument.defaultView ?? window\n  return el instanceof win.HTMLElement\n}\n\nfunction isElement(el: any): el is Element {\n  return (\n    el != null &&\n    typeof el == \"object\" &&\n    \"nodeType\" in el &&\n    el.nodeType === Node.ELEMENT_NODE\n  )\n}\n\nfunction useUnmountEffect(fn: () => void, deps: any[] = []) {\n  return useEffect(\n    () => () => fn(),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    deps,\n  )\n}\n"]},"metadata":{},"sourceType":"module"}