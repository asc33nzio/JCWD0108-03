{"ast":null,"code":"'use client';\n\nimport { useInitialAnimationState } from \"./chunk-2TOCDA5N.mjs\";\nimport { useCheckboxGroupContext } from \"./chunk-LYGBQ47X.mjs\";\nimport { CheckboxIcon } from \"./chunk-ULEC7HZU.mjs\";\nimport { useCheckbox } from \"./chunk-7D6N5TE5.mjs\"; // src/checkbox.tsx\n\nimport { callAll, cx } from \"@chakra-ui/shared-utils\";\nimport { chakra, forwardRef, keyframes, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { cloneElement, useMemo } from \"react\";\nimport { jsx, jsxs } from \"react/jsx-runtime\";\nvar controlStyles = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0\n};\nvar rootStyles = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\"\n};\nvar checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\"\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\"\n  }\n});\nvar indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0\n  },\n  to: {\n    opacity: 1\n  }\n});\nvar indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\"\n  },\n  to: {\n    transform: \"scaleX(1)\"\n  }\n});\nvar Checkbox = forwardRef(function Checkbox2(props, ref) {\n  const group = useCheckboxGroupContext();\n  const mergedProps = { ...group,\n    ...props\n  };\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  const ownProps = omitThemingProps(props);\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = /* @__PURE__ */jsx(CheckboxIcon, {}),\n    isChecked: isCheckedProp,\n    isDisabled = group == null ? void 0 : group.isDisabled,\n    onChange: onChangeProp,\n    inputProps,\n    ...rest\n  } = ownProps;\n  let isChecked = isCheckedProp;\n\n  if ((group == null ? void 0 : group.value) && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n\n  let onChange = onChangeProp;\n\n  if ((group == null ? void 0 : group.onChange) && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps\n  } = useCheckbox({ ...rest,\n    isDisabled,\n    isChecked,\n    onChange\n  });\n  const shouldAnimate = useInitialAnimationState(state.isChecked);\n  const iconStyles = useMemo(() => ({\n    animation: !shouldAnimate ? void 0 : state.isIndeterminate ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear` : `${checkAnim} 200ms linear`,\n    fontSize: iconSize,\n    color: iconColor,\n    ...styles.icon\n  }), [iconColor, iconSize, shouldAnimate, state.isIndeterminate, styles.icon]);\n  const clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /* @__PURE__ */jsxs(chakra.label, {\n    __css: { ...rootStyles,\n      ...styles.container\n    },\n    className: cx(\"chakra-checkbox\", className),\n    ...getRootProps(),\n    children: [/* @__PURE__ */jsx(\"input\", {\n      className: \"chakra-checkbox__input\",\n      ...getInputProps(inputProps, ref)\n    }), /* @__PURE__ */jsx(chakra.span, {\n      __css: { ...controlStyles,\n        ...styles.control\n      },\n      className: \"chakra-checkbox__control\",\n      ...getCheckboxProps(),\n      children: clonedIcon\n    }), children && /* @__PURE__ */jsx(chakra.span, {\n      className: \"chakra-checkbox__label\",\n      ...getLabelProps(),\n      __css: {\n        marginStart: spacing,\n        ...styles.label\n      },\n      children\n    })]\n  });\n});\nCheckbox.displayName = \"Checkbox\";\nexport { Checkbox };","map":{"version":3,"mappings":"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","names":["callAll","cx","chakra","forwardRef","keyframes","omitThemingProps","useMultiStyleConfig","cloneElement","useMemo","jsxs","controlStyles","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","rootStyles","cursor","position","checkAnim","from","opacity","strokeDashoffset","transform","to","indeterminateOpacityAnim","indeterminateScaleAnim","Checkbox","props","ref","group","useCheckboxGroupContext","mergedProps","styles","ownProps","spacing","className","children","iconColor","iconSize","icon","CheckboxIcon","isChecked","isCheckedProp","isDisabled","onChange","onChangeProp","inputProps","rest","value","includes","state","getInputProps","getCheckboxProps","getLabelProps","getRootProps","useCheckbox","shouldAnimate","useInitialAnimationState","iconStyles","animation","isIndeterminate","fontSize","color","clonedIcon","__css","label","container","span","control","marginStart","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\checkbox\\src\\checkbox.tsx"],"sourcesContent":["import { callAll, cx } from \"@chakra-ui/shared-utils\"\nimport {\n  HTMLChakraProps,\n  PropsOf,\n  SystemStyleObject,\n  ThemingProps,\n  chakra,\n  forwardRef,\n  keyframes,\n  omitThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cloneElement, useMemo } from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-context\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { CheckboxOptions, UseCheckboxProps } from \"./checkbox-types\"\nimport { useCheckbox } from \"./use-checkbox\"\nimport { useInitialAnimationState } from \"./use-initial-animation-state\"\n\nconst controlStyles: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  verticalAlign: \"top\",\n  userSelect: \"none\",\n  flexShrink: 0,\n}\n\nconst rootStyles: SystemStyleObject = {\n  cursor: \"pointer\",\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  verticalAlign: \"top\",\n  position: \"relative\",\n}\n\nconst checkAnim = keyframes({\n  from: {\n    opacity: 0,\n    strokeDashoffset: 16,\n    transform: \"scale(0.95)\",\n  },\n  to: {\n    opacity: 1,\n    strokeDashoffset: 0,\n    transform: \"scale(1)\",\n  },\n})\n\nconst indeterminateOpacityAnim = keyframes({\n  from: {\n    opacity: 0,\n  },\n  to: {\n    opacity: 1,\n  },\n})\nconst indeterminateScaleAnim = keyframes({\n  from: {\n    transform: \"scaleX(0.65)\",\n  },\n  to: {\n    transform: \"scaleX(1)\",\n  },\n})\n\ntype CheckboxControlProps = Omit<HTMLChakraProps<\"div\">, keyof UseCheckboxProps>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends CheckboxControlProps,\n    BaseInputProps,\n    ThemingProps<\"Checkbox\">,\n    UseCheckboxProps,\n    CheckboxOptions {}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/checkbox\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">(function Checkbox(\n  props,\n  ref,\n) {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    isDisabled = group?.isDisabled,\n    onChange: onChangeProp,\n    inputProps,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps,\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange,\n  })\n\n  const shouldAnimate = useInitialAnimationState(state.isChecked)\n\n  const iconStyles: SystemStyleObject = useMemo(\n    () => ({\n      animation: !shouldAnimate\n        ? undefined\n        : state.isIndeterminate\n        ? `${indeterminateOpacityAnim} 20ms linear, ${indeterminateScaleAnim} 200ms linear`\n        : `${checkAnim} 200ms linear`,\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon,\n    }),\n    [iconColor, iconSize, shouldAnimate, state.isIndeterminate, styles.icon],\n  )\n\n  const clonedIcon = cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <chakra.label\n      __css={{ ...rootStyles, ...styles.container }}\n      className={cx(\"chakra-checkbox\", className)}\n      {...getRootProps()}\n    >\n      <input\n        className=\"chakra-checkbox__input\"\n        {...getInputProps(inputProps, ref)}\n      />\n      <chakra.span\n        __css={{ ...controlStyles, ...styles.control }}\n        className=\"chakra-checkbox__control\"\n        {...getCheckboxProps()}\n      >\n        {clonedIcon}\n      </chakra.span>\n      {children && (\n        <chakra.span\n          className=\"chakra-checkbox__label\"\n          {...getLabelProps()}\n          __css={{\n            marginStart: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </chakra.label>\n  )\n})\n\nCheckbox.displayName = \"Checkbox\"\n"]},"metadata":{},"sourceType":"module"}