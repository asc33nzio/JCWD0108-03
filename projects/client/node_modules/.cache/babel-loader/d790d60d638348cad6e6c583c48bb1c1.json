{"ast":null,"code":"'use client';\n\nimport { AvatarName } from \"./chunk-O25PJXSD.mjs\";\nimport { GenericAvatarIcon } from \"./chunk-CXYPMOCL.mjs\"; // src/avatar-image.tsx\n\nimport { useImage } from \"@chakra-ui/image\";\nimport { chakra } from \"@chakra-ui/system\";\nimport { cloneElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\n\nfunction AvatarImage(props) {\n  const {\n    src,\n    srcSet,\n    onError,\n    onLoad,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = /* @__PURE__ */jsx(GenericAvatarIcon, {}),\n    ignoreFallback,\n    referrerPolicy,\n    crossOrigin\n  } = props;\n  const status = useImage({\n    src,\n    onError,\n    crossOrigin,\n    ignoreFallback\n  });\n  const hasLoaded = status === \"loaded\";\n  const showFallback = !src || !hasLoaded;\n\n  if (showFallback) {\n    return name ? /* @__PURE__ */jsx(AvatarName, {\n      className: \"chakra-avatar__initials\",\n      getInitials,\n      name\n    }) : cloneElement(icon, {\n      role: \"img\",\n      \"aria-label\": iconLabel\n    });\n  }\n\n  return /* @__PURE__ */jsx(chakra.img, {\n    src,\n    srcSet,\n    alt: name,\n    onLoad,\n    referrerPolicy,\n    crossOrigin: crossOrigin != null ? crossOrigin : void 0,\n    className: \"chakra-avatar__img\",\n    loading,\n    __css: {\n      width: \"100%\",\n      height: \"100%\",\n      objectFit: \"cover\",\n      borderRadius\n    }\n  });\n}\n\nAvatarImage.displayName = \"AvatarImage\";\nexport { AvatarImage };","map":{"version":3,"mappings":";;;;;AAAA,SAAqBA,QAArB,QAAqC,kBAArC;AACA,SAASC,MAAT,QAA0C,mBAA1C;AACA,SAASC,YAAT,QAA6B,OAA7B;AAuBW;;AAXJ,SAASC,WAAT,CAAqBC,KAArB,EAA8C;EACnD,MAAM;IACJC,GADI;IAEJC,MAFI;IAGJC,OAHI;IAIJC,MAJI;IAKJC,WALI;IAMJC,IANI;IAOJC,YAPI;IAQJC,OARI;IASJC,SATI;IAUJC,OAAO,mBAACC,iBAAD,EAAC,EAAD,CAVH;IAWJC,cAXI;IAYJC,cAZI;IAaJC;EAbI,IAcFd,KAdJ;EAmBA,MAAMe,SAASnB,SAAS;IAAEK,GAAF;IAAOE,OAAP;IAAgBW,WAAhB;IAA6BF;EAA7B,CAAT,CAAf;EAEA,MAAMI,YAAYD,WAAW,QAA7B;EASA,MAAME,eAAe,CAAChB,GAAD,IAAQ,CAACe,SAA9B;;EAEA,IAAIC,YAAJ,EAAkB;IAChB,OAAOX,OACL,mBAACY,UAAD,EAAC;MACCC,WAAU,yBADX;MAECd,WAFD;MAGCC;IAHD,CAAD,CADK,GAOLR,aAAaY,IAAb,EAAmB;MACjBU,MAAM,KADW;MAEjB,cAAcX;IAFG,CAAnB,CAPF;EAYF;;EAKA,OACE,mBAACZ,OAAOwB,GAAR,EAAC;IACCpB,GADD;IAECC,MAFD;IAGCoB,KAAKhB,IAHN;IAICF,MAJD;IAKCS,cALD;IAMCC,aAAaA,oCAAe,MAN7B;IAOCK,WAAU,oBAPX;IAQCX,OARD;IASCe,OAAO;MACLC,OAAO,MADF;MAELC,QAAQ,MAFH;MAGLC,WAAW,OAHN;MAILnB;IAJK;EATR,CAAD,CADF;AAkBF;;AAEAR,YAAY4B,WAAZ,GAA0B,aAA1B","names":["useImage","chakra","cloneElement","AvatarImage","props","src","srcSet","onError","onLoad","getInitials","name","borderRadius","loading","iconLabel","icon","GenericAvatarIcon","ignoreFallback","referrerPolicy","crossOrigin","status","hasLoaded","showFallback","AvatarName","className","role","img","alt","__css","width","height","objectFit","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\avatar\\src\\avatar-image.tsx"],"sourcesContent":["import { ImageProps, useImage } from \"@chakra-ui/image\"\nimport { chakra, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cloneElement } from \"react\"\nimport { AvatarName } from \"./avatar-name\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\n\ntype AvatarImageProps = ImageProps & {\n  getInitials?: (name: string) => string\n  borderRadius?: SystemStyleObject[\"borderRadius\"]\n  icon: React.ReactElement\n  iconLabel?: string\n  name?: string\n}\n\nexport function AvatarImage(props: AvatarImageProps) {\n  const {\n    src,\n    srcSet,\n    onError,\n    onLoad,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = <GenericAvatarIcon />,\n    ignoreFallback,\n    referrerPolicy,\n    crossOrigin,\n  } = props\n\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError, crossOrigin, ignoreFallback })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      cloneElement(icon, {\n        role: \"img\",\n        \"aria-label\": iconLabel,\n      })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      srcSet={srcSet}\n      alt={name}\n      onLoad={onLoad}\n      referrerPolicy={referrerPolicy}\n      crossOrigin={crossOrigin ?? undefined}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nAvatarImage.displayName = \"AvatarImage\"\n"]},"metadata":{},"sourceType":"module"}