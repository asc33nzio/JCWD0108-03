{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { useEffect, useState } from \"react\";\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\nimport { getOwnerWindow } from \"@chakra-ui/dom-utils\";\n\nfunction useAnimationState(props) {\n  const {\n    isOpen,\n    ref\n  } = props;\n  const [mounted, setMounted] = useState(isOpen);\n  const [once, setOnce] = useState(false);\n  useEffect(() => {\n    if (!once) {\n      setMounted(isOpen);\n      setOnce(true);\n    }\n  }, [isOpen, once, mounted]);\n  useEventListener(() => ref.current, \"animationend\", () => {\n    setMounted(isOpen);\n  });\n  const hidden = isOpen ? false : !mounted;\n  return {\n    present: !hidden,\n\n    onComplete() {\n      var _a;\n\n      const win = getOwnerWindow(ref.current);\n      const evt = new win.CustomEvent(\"animationend\", {\n        bubbles: true\n      });\n      (_a = ref.current) == null ? void 0 : _a.dispatchEvent(evt);\n    }\n\n  };\n}\n\nexport { useAnimationState };","map":{"version":3,"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,gBAAT,QAAiC,qCAAjC;AACA,SAASC,cAAT,QAA+B,sBAA/B;;AAMO,SAASC,iBAAT,CAA2BC,KAA3B,EAA0D;EAC/D,MAAM;IAAEC,MAAF;IAAUC;EAAV,IAAkBF,KAAxB;EAEA,MAAM,CAACG,OAAD,EAAUC,UAAV,IAAwBR,SAASK,MAAT,CAA9B;EACA,MAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBV,SAAS,KAAT,CAAxB;EAEAD,UAAU,MAAM;IACd,IAAI,CAACU,IAAL,EAAW;MACTD,WAAWH,MAAX;MACAK,QAAQ,IAAR;IACF;EACF,CALA,EAKG,CAACL,MAAD,EAASI,IAAT,EAAeF,OAAf,CALH;EAOAN,iBACE,MAAMK,IAAIK,OADZ,EAEE,cAFF,EAGE,MAAM;IACJH,WAAWH,MAAX;EACF,CALF;EAQA,MAAMO,SAASP,SAAS,KAAT,GAAiB,CAACE,OAAjC;EAEA,OAAO;IACLM,SAAS,CAACD,MADL;;IAELE,aAAa;MAjCjB;;MAkCM,MAAMC,MAAMb,eAAeI,IAAIK,OAAnB,CAAZ;MACA,MAAMK,MAAM,IAAID,IAAIE,WAAR,CAAoB,cAApB,EAAoC;QAAEC,SAAS;MAAX,CAApC,CAAZ;MACA,UAAIP,OAAJ,wBAAaQ,aAAb,CAA2BH,GAA3B;IACF;;EANK,CAAP;AAQF","names":["useEffect","useState","useEventListener","getOwnerWindow","useAnimationState","props","isOpen","ref","mounted","setMounted","once","setOnce","current","hidden","present","onComplete","win","evt","CustomEvent","bubbles","dispatchEvent"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\react-use-animation-state\\src\\index.ts"],"sourcesContent":["import { useEffect, useState } from \"react\"\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\"\nimport { getOwnerWindow } from \"@chakra-ui/dom-utils\"\nexport type UseAnimationStateProps = {\n  isOpen: boolean\n  ref: React.RefObject<HTMLElement>\n}\n\nexport function useAnimationState(props: UseAnimationStateProps) {\n  const { isOpen, ref } = props\n\n  const [mounted, setMounted] = useState(isOpen)\n  const [once, setOnce] = useState(false)\n\n  useEffect(() => {\n    if (!once) {\n      setMounted(isOpen)\n      setOnce(true)\n    }\n  }, [isOpen, once, mounted])\n\n  useEventListener(\n    () => ref.current,\n    \"animationend\",\n    () => {\n      setMounted(isOpen)\n    },\n  )\n\n  const hidden = isOpen ? false : !mounted\n\n  return {\n    present: !hidden,\n    onComplete() {\n      const win = getOwnerWindow(ref.current)\n      const evt = new win.CustomEvent(\"animationend\", { bubbles: true })\n      ref.current?.dispatchEvent(evt)\n    },\n  }\n}\n"]},"metadata":{},"sourceType":"module"}