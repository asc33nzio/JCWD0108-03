{"ast":null,"code":"'use client';\n\nimport { useTheme } from \"./chunk-UIGT7YZF.mjs\"; // src/hooks.ts\n\nimport { useColorMode } from \"@chakra-ui/color-mode\";\n\nfunction useChakra() {\n  const colorModeResult = useColorMode();\n  const theme = useTheme();\n  return { ...colorModeResult,\n    theme\n  };\n}\n\nfunction getBreakpointValue(theme, value, fallback) {\n  var _a, _b;\n\n  if (value == null) return value;\n\n  const getValue = val => {\n    var _a2, _b2;\n\n    return (_b2 = (_a2 = theme.__breakpoints) == null ? void 0 : _a2.asArray) == null ? void 0 : _b2[val];\n  };\n\n  return (_b = (_a = getValue(value)) != null ? _a : getValue(fallback)) != null ? _b : fallback;\n}\n\nfunction getTokenValue(theme, value, fallback) {\n  var _a, _b;\n\n  if (value == null) return value;\n\n  const getValue = val => {\n    var _a2, _b2;\n\n    return (_b2 = (_a2 = theme.__cssMap) == null ? void 0 : _a2[val]) == null ? void 0 : _b2.value;\n  };\n\n  return (_b = (_a = getValue(value)) != null ? _a : getValue(fallback)) != null ? _b : fallback;\n}\n\nfunction useToken(scale, token, fallback) {\n  const theme = useTheme();\n  return getToken(scale, token, fallback)(theme);\n}\n\nfunction getToken(scale, token, fallback) {\n  const _token = Array.isArray(token) ? token : [token];\n\n  const _fallback = Array.isArray(fallback) ? fallback : [fallback];\n\n  return theme => {\n    const fallbackArr = _fallback.filter(Boolean);\n\n    const result = _token.map((token2, index) => {\n      var _a, _b;\n\n      if (scale === \"breakpoints\") {\n        return getBreakpointValue(theme, token2, (_a = fallbackArr[index]) != null ? _a : token2);\n      }\n\n      const path = `${scale}.${token2}`;\n      return getTokenValue(theme, path, (_b = fallbackArr[index]) != null ? _b : token2);\n    });\n\n    return Array.isArray(token) ? result : result[0];\n  };\n}\n\nexport { useChakra, useToken, getToken };","map":{"version":3,"mappings":";;;;AAAA,SAASA,YAAT,QAA6B,uBAA7B;;AAIO,SAASC,SAAT,GAA4C;EACjD,MAAMC,kBAAkBF,cAAxB;EACA,MAAMG,QAAQC,UAAd;EACA,OAAO,EAAE,GAAGF,eAAL;IAAsBC;EAAtB,CAAP;AACF;;AAEA,SAASE,kBAAT,CACEF,KADF,EAEEG,KAFF,EAGEC,QAHF,EAIE;EAdF;;EAeE,IAAID,SAAS,IAAb,EAAmB,OAAOA,KAAP;;EACnB,MAAME,WAAYC,GAAD,IAAS;IAhB5B;;IAgB+B,2BAAMC,aAANC,yBAAqBC,OAArB,yBAA+BH,GAA/BE;EAA+B,CAA5D;;EACA,QAAOA,oBAASL,KAAT,kBAAmBE,SAASD,QAAT,CAA1B,KAAO,IAAP,GAAOI,EAAP,GAAgDJ,QAAhD;AACF;;AAEA,SAASM,aAAT,CACEV,KADF,EAEEG,KAFF,EAGEC,QAHF,EAIE;EAxBF;;EAyBE,IAAID,SAAS,IAAb,EAAmB,OAAOA,KAAP;;EACnB,MAAME,WAAYC,GAAD,IAAS;IA1B5B;;IA0B+B,2BAAMK,QAANH,yBAAiBF,GAAjBM,0BAAuBT,KAAvB;EAAuB,CAApD;;EACA,QAAOK,oBAASL,KAAT,kBAAmBE,SAASD,QAAT,CAA1B,KAAO,IAAP,GAAOI,EAAP,GAAgDJ,QAAhD;AACF;;AAOO,SAASS,QAAT,CACLC,KADK,EAELC,KAFK,EAGLX,QAHK,EAIL;EACA,MAAMJ,QAAQC,UAAd;EACA,OAAOe,SAASF,KAAT,EAAgBC,KAAhB,EAAuBX,QAAvB,EAAiCJ,KAAjC,CAAP;AACF;;AAEO,SAASgB,QAAT,CACLF,KADK,EAELC,KAFK,EAGLX,QAHK,EAIe;EACpB,MAAMa,SAASC,MAAMC,OAAN,CAAcJ,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAA9C;;EACA,MAAMK,YAAYF,MAAMC,OAAN,CAAcf,QAAd,IAA0BA,QAA1B,GAAqC,CAACA,QAAD,CAAvD;;EACA,OAAQJ,KAAD,IAAsB;IAC3B,MAAMqB,cAAcD,UAAUE,MAAV,CAAiBC,OAAjB,CAApB;;IACA,MAAMC,SAASP,OAAOQ,GAAP,CAAW,CAACV,MAAD,EAAQW,KAAR,KAAkB;MArDhD;;MAsDM,IAAIZ,UAAU,aAAd,EAA6B;QAC3B,OAAOZ,mBAAmBF,KAAnB,EAA0Be,MAA1B,EAA0BA,CAAOH,iBAAYc,KAAZ,CAAPX,KAAO,IAAPA,GAAOH,EAAPG,GAA6BA,MAAvD,CAAP;MACF;;MACA,MAAMY,OAAO,GAAGb,SAASC,QAAzB;MACA,OAAOL,cAAcV,KAAd,EAAqB2B,IAArB,EAAqB,CAAMnB,iBAAYkB,KAAZ,CAAN,KAAM,IAAN,GAAMlB,EAAN,GAA4BO,MAAjD,CAAP;IACD,CANc,CAAf;;IAOA,OAAOG,MAAMC,OAAN,CAAcJ,KAAd,IAAuBS,MAAvB,GAAgCA,OAAO,CAAP,CAAvC;EACF,CAVA;AAWF","names":["useColorMode","useChakra","colorModeResult","theme","useTheme","getBreakpointValue","value","fallback","getValue","val","__breakpoints","_b","asArray","getTokenValue","__cssMap","_a","useToken","scale","token","getToken","_token","Array","isArray","_fallback","fallbackArr","filter","Boolean","result","map","index","path"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\system\\src\\hooks.ts"],"sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport { Dict, StringOrNumber } from \"@chakra-ui/utils\"\nimport { useTheme } from \"./use-theme\"\n\nexport function useChakra<T extends Dict = Dict>() {\n  const colorModeResult = useColorMode()\n  const theme = useTheme() as T\n  return { ...colorModeResult, theme }\n}\n\nfunction getBreakpointValue<T extends StringOrNumber>(\n  theme: Dict,\n  value: T,\n  fallback: any,\n) {\n  if (value == null) return value\n  const getValue = (val: T) => theme.__breakpoints?.asArray?.[val]\n  return getValue(value) ?? getValue(fallback) ?? fallback\n}\n\nfunction getTokenValue<T extends StringOrNumber>(\n  theme: Dict,\n  value: T,\n  fallback: any,\n) {\n  if (value == null) return value\n  const getValue = (val: T) => theme.__cssMap?.[val]?.value\n  return getValue(value) ?? getValue(fallback) ?? fallback\n}\n\n/**\n * `useToken` is a custom hook used to resolve design tokens from the theme.\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-token\n */\nexport function useToken<T extends StringOrNumber | StringOrNumber[]>(\n  scale: string,\n  token: T,\n  fallback?: T,\n) {\n  const theme = useTheme()\n  return getToken(scale, token, fallback)(theme)\n}\n\nexport function getToken<T extends StringOrNumber | StringOrNumber[]>(\n  scale: string,\n  token: T,\n  fallback?: T,\n): (theme: Dict) => T {\n  const _token = Array.isArray(token) ? token : [token]\n  const _fallback = Array.isArray(fallback) ? fallback : [fallback]\n  return (theme: Dict<any>) => {\n    const fallbackArr = _fallback.filter(Boolean) as T[]\n    const result = _token.map((token, index) => {\n      if (scale === \"breakpoints\") {\n        return getBreakpointValue(theme, token, fallbackArr[index] ?? token)\n      }\n      const path = `${scale}.${token}`\n      return getTokenValue(theme, path, fallbackArr[index] ?? token)\n    })\n    return Array.isArray(token) ? result : result[0]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}