{"ast":null,"code":"'use client'; // src/index.ts\n\nimport { useEventListener } from \"@chakra-ui/react-use-event-listener\";\n\nfunction isRefObject(val) {\n  return \"current\" in val;\n}\n\nvar isDom = () => typeof window !== \"undefined\";\n\nfunction getPlatform() {\n  var _a;\n\n  const agent = navigator.userAgentData;\n  return (_a = agent == null ? void 0 : agent.platform) != null ? _a : navigator.platform;\n}\n\nvar vn = v => isDom() && v.test(navigator.vendor);\n\nvar pt = v => isDom() && v.test(getPlatform());\n\nvar isApple = () => pt(/mac|iphone|ipad|ipod/i);\n\nvar isSafari = () => isApple() && vn(/apple/i);\n\nfunction useFocusOnPointerDown(props) {\n  const {\n    ref,\n    elements,\n    enabled\n  } = props;\n\n  const doc = () => {\n    var _a, _b;\n\n    return (_b = (_a = ref.current) == null ? void 0 : _a.ownerDocument) != null ? _b : document;\n  };\n\n  useEventListener(doc, \"pointerdown\", event => {\n    if (!isSafari() || !enabled) return;\n    const target = event.target;\n    const els = elements != null ? elements : [ref];\n    const isValidTarget = els.some(elementOrRef => {\n      const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef;\n      return (el == null ? void 0 : el.contains(target)) || el === target;\n    });\n\n    if (doc().activeElement !== target && isValidTarget) {\n      event.preventDefault();\n      target.focus();\n    }\n  });\n}\n\nexport { useFocusOnPointerDown };","map":{"version":3,"mappings":";;AAAA,SAASA,gBAAT,QAAiC,qCAAjC;;AAQA,SAASC,WAAT,CAAqBC,GAArB,EAAwD;EACtD,OAAO,aAAaA,GAApB;AACF;;AAEA,IAAMC,QAAQ,MAAM,OAAOC,MAAP,KAAkB,WAAtC;;AACA,SAASC,WAAT,GAAuB;EAbvB;;EAcE,MAAMC,QAASC,UAAkBC,aAAjC;EACA,QAAOC,oCAAOC,QAAd,KAAO,IAAP,GAAOD,EAAP,GAA0BF,UAAUG,QAApC;AACF;;AACA,IAAMC,KAAMC,CAAD,IAAeT,WAAWS,EAAEC,IAAF,CAAON,UAAUO,MAAjB,CAArC;;AACA,IAAMC,KAAMH,CAAD,IAAeT,WAAWS,EAAEC,IAAF,CAAOR,aAAP,CAArC;;AACA,IAAMW,UAAU,MAAMD,GAAG,uBAAH,CAAtB;;AACA,IAAME,WAAW,MAAMD,aAAaL,GAAG,QAAH,CAApC;;AAWO,SAASO,qBAAT,CAA+BC,KAA/B,EAAgE;EACrE,MAAM;IAAEC,GAAF;IAAOC,QAAP;IAAiBC;EAAjB,IAA6BH,KAAnC;;EAEA,MAAMI,MAAM,MAAG;IAlCjB;;IAkCoB,uBAAIC,OAAJ,wBAAaC,aAAb,iBAA8BC,QAA9B;EAA8B,CAAhD;;EAEA1B,iBAAiBuB,GAAjB,EAAsB,aAAtB,EAAsCI,KAAD,IAAW;IAC9C,IAAI,CAACV,UAAD,IAAe,CAACK,OAApB,EAA6B;IAC7B,MAAMM,SAASD,MAAMC,MAArB;IAEA,MAAMC,MAAMR,8BAAY,CAACD,GAAD,CAAxB;IACA,MAAMU,gBAAgBD,IAAIE,IAAJ,CAAUC,YAAD,IAAkB;MAC/C,MAAMC,KAAKhC,YAAY+B,YAAZ,IAA4BA,aAAaR,OAAzC,GAAmDQ,YAA9D;MACA,QAAOC,yBAAIC,QAAJ,CAAaN,MAAb,CAAP,KAA+BK,OAAOL,MAAtC;IACD,CAHqB,CAAtB;;IAKA,IAAIL,MAAMY,aAAN,KAAwBP,MAAxB,IAAkCE,aAAtC,EAAqD;MACnDH,MAAMS,cAAN;MACAR,OAAOS,KAAP;IACF;EACD,CAdD;AAeF","names":["useEventListener","isRefObject","val","isDom","window","getPlatform","agent","navigator","userAgentData","_a","platform","vn","v","test","vendor","pt","isApple","isSafari","useFocusOnPointerDown","props","ref","elements","enabled","doc","current","ownerDocument","document","event","target","els","isValidTarget","some","elementOrRef","el","contains","activeElement","preventDefault","focus"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\react-use-focus-on-pointer-down\\src\\index.ts"],"sourcesContent":["import { useEventListener } from \"@chakra-ui/react-use-event-listener\"\n\nexport interface UseFocusOnMouseDownProps {\n  enabled?: boolean\n  ref: React.RefObject<HTMLElement>\n  elements?: Array<React.RefObject<HTMLElement> | HTMLElement | null>\n}\n\nfunction isRefObject(val: any): val is { current: any } {\n  return \"current\" in val\n}\n\nconst isDom = () => typeof window !== \"undefined\"\nfunction getPlatform() {\n  const agent = (navigator as any).userAgentData\n  return agent?.platform ?? navigator.platform\n}\nconst vn = (v: RegExp) => isDom() && v.test(navigator.vendor)\nconst pt = (v: RegExp) => isDom() && v.test(getPlatform())\nconst isApple = () => pt(/mac|iphone|ipad|ipod/i)\nconst isSafari = () => isApple() && vn(/apple/i)\n\n/**\n * Polyfill to get `relatedTarget` working correctly consistently\n * across all browsers.\n *\n * It ensures that elements receives focus on pointer down if\n * it's not the active element.\n *\n * @internal\n */\nexport function useFocusOnPointerDown(props: UseFocusOnMouseDownProps) {\n  const { ref, elements, enabled } = props\n\n  const doc = () => ref.current?.ownerDocument ?? document\n\n  useEventListener(doc, \"pointerdown\", (event) => {\n    if (!isSafari() || !enabled) return\n    const target = event.target as HTMLElement\n\n    const els = elements ?? [ref]\n    const isValidTarget = els.some((elementOrRef) => {\n      const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef\n      return el?.contains(target) || el === target\n    })\n\n    if (doc().activeElement !== target && isValidTarget) {\n      event.preventDefault()\n      target.focus()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}