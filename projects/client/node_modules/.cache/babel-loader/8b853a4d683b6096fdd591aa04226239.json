{"ast":null,"code":"'use client'; // src/use-checkbox-group.ts\n\nimport { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\";\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\";\nimport { isObject } from \"@chakra-ui/shared-utils\";\nimport { useCallback } from \"react\";\n\nfunction isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n}\n\nfunction useCheckboxGroup() {\n  let props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative\n  } = props;\n  const onChangeProp = useCallbackRef(onChange);\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp\n  });\n  const handleChange = useCallback(eventOrValue => {\n    if (!value) return;\n    const isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    const selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    const nextValue = isChecked ? [...value, selectedValue] : value.filter(v => String(v) !== String(selectedValue));\n    setValue(nextValue);\n  }, [setValue, value]);\n  const getCheckboxProps = useCallback(function () {\n    let props2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return { ...props2,\n      [checkedKey]: value.some(val => String(props2.value) === String(val)),\n      onChange: handleChange\n    };\n  }, [handleChange, isNative, value]);\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps\n  };\n}\n\nexport { useCheckboxGroup };","map":{"version":3,"mappings":";;AAAA,SAASA,cAAT,QAA+B,mCAA/B;AACA,SAASC,oBAAT,QAAqC,yCAArC;AACA,SAASC,QAAT,QAAyB,yBAAzB;AACA,SAASC,WAAT,QAA4B,OAA5B;;AAGA,SAASC,YAAT,CAAsBC,KAAtB,EAAyE;EACvE,OAAOA,SAASH,SAASG,KAAT,CAAT,IAA4BH,SAASG,MAAMC,MAAf,CAAnC;AACF;;AAWO,SAASC,gBAAT,GAA6D;EAAA,IAAnCC,KAAmC,uEAAJ,EAAI;EAClE,MAAM;IACJC,YADI;IAEJJ,OAAOK,SAFH;IAGJC,QAHI;IAIJC,UAJI;IAKJC;EALI,IAMFL,KANJ;EAQA,MAAMM,eAAed,eAAeW,QAAf,CAArB;EAEA,MAAM,CAACN,KAAD,EAAQU,QAAR,IAAoBd,qBAAqB;IAC7CI,OAAOK,SADsC;IAE7CD,cAAcA,gBAAgB,EAFe;IAG7CE,UAAUG;EAHmC,CAArB,CAA1B;EAMA,MAAME,eAAeb,YAClBc,YAAD,IAAgC;IAC9B,IAAI,CAACZ,KAAL,EAAY;IAEZ,MAAMa,YAAYd,aAAaa,YAAb,IACdA,aAAaX,MAAb,CAAoBa,OADN,GAEd,CAACd,MAAMe,QAAN,CAAeH,YAAf,CAFL;IAIA,MAAMI,gBAAgBjB,aAAaa,YAAb,IAClBA,aAAaX,MAAb,CAAoBD,KADF,GAElBY,YAFJ;IAIA,MAAMK,YAAYJ,YACd,CAAC,GAAGb,KAAJ,EAAWgB,aAAX,CADc,GAEdhB,MAAMkB,MAAN,CAAcC,CAAD,IAAOC,OAAOD,CAAP,MAAcC,OAAOJ,aAAP,CAAlC,CAFJ;IAIAN,SAASO,SAAT;EACF,CAjBmB,EAkBnB,CAACP,QAAD,EAAWV,KAAX,CAlBmB,CAArB;EAqBA,MAAMqB,mBAAmBvB,YACvB,YAAqC;IAAA,IAApCK,MAAoC,uEAAP,EAAO;IACnC,MAAMmB,aAAad,WAAW,SAAX,GAAuB,WAA1C;IACA,OAAO,EACL,GAAGL,MADE;MAEL,CAACmB,UAAD,GAActB,MAAMuB,IAAN,CAAYC,GAAD,IAASJ,OAAOjB,OAAMH,KAAb,MAAwBoB,OAAOI,GAAP,CAA5C,CAFT;MAGLlB,UAAUK;IAHL,CAAP;EAKF,CARuB,EASvB,CAACA,YAAD,EAAeH,QAAf,EAAyBR,KAAzB,CATuB,CAAzB;EAYA,OAAO;IACLA,KADK;IAELO,UAFK;IAGLD,UAAUK,YAHL;IAILD,QAJK;IAKLW;EALK,CAAP;AAOF","names":["useCallbackRef","useControllableState","isObject","useCallback","isInputEvent","value","target","useCheckboxGroup","props","defaultValue","valueProp","onChange","isDisabled","isNative","onChangeProp","setValue","handleChange","eventOrValue","isChecked","checked","includes","selectedValue","nextValue","filter","v","String","getCheckboxProps","checkedKey","some","val"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\checkbox\\src\\use-checkbox-group.ts"],"sourcesContent":["import { useCallbackRef } from \"@chakra-ui/react-use-callback-ref\"\nimport { useControllableState } from \"@chakra-ui/react-use-controllable-state\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useCallback } from \"react\"\nimport { EventOrValue, UseCheckboxGroupProps } from \"./checkbox-types\"\n\nfunction isInputEvent(value: any): value is { target: HTMLInputElement } {\n  return value && isObject(value) && isObject(value.target)\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-checkbox-group\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/checkbox/\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp,\n  })\n\n  const handleChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? [...value, selectedValue]\n        : value.filter((v) => String(v) !== String(selectedValue))\n\n      setValue(nextValue)\n    },\n    [setValue, value],\n  )\n\n  const getCheckboxProps = useCallback(\n    (props: Record<string, any> = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.some((val) => String(props.value) === String(val)),\n        onChange: handleChange,\n      }\n    },\n    [handleChange, isNative, value],\n  )\n\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps,\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"]},"metadata":{},"sourceType":"module"}