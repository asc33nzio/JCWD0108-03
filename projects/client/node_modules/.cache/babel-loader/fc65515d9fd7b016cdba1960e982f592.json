{"ast":null,"code":"'use client';\n\nimport { usePortalManager } from \"./chunk-HK66PB7M.mjs\"; // src/portal.tsx\n\nimport { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\";\nimport { createContext } from \"@chakra-ui/react-context\";\nimport { createPortal } from \"react-dom\";\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar [PortalContextProvider, usePortalContext] = createContext({\n  strict: false,\n  name: \"PortalContext\"\n});\nvar PORTAL_CLASSNAME = \"chakra-portal\";\nvar PORTAL_SELECTOR = `.chakra-portal`;\n\nvar Container = props => /* @__PURE__ */jsx(\"div\", {\n  className: \"chakra-portal-zIndex\",\n  style: {\n    position: \"absolute\",\n    zIndex: props.zIndex,\n    top: 0,\n    left: 0,\n    right: 0 // NB: Don't add `bottom: 0`, it makes the entire app unusable\n    // @see https://github.com/chakra-ui/chakra-ui/issues/3201\n\n  },\n  children: props.children\n});\n\nvar DefaultPortal = props => {\n  const {\n    appendToParentPortal,\n    children\n  } = props;\n  const [tempNode, setTempNode] = useState(null);\n  const portal = useRef(null);\n  const [, forceUpdate] = useState({});\n  useEffect(() => forceUpdate({}), []);\n  const parentPortal = usePortalContext();\n  const manager = usePortalManager();\n  useSafeLayoutEffect(() => {\n    if (!tempNode) return;\n    const doc = tempNode.ownerDocument;\n    const host = appendToParentPortal ? parentPortal != null ? parentPortal : doc.body : doc.body;\n    if (!host) return;\n    portal.current = doc.createElement(\"div\");\n    portal.current.className = PORTAL_CLASSNAME;\n    host.appendChild(portal.current);\n    forceUpdate({});\n    const portalNode = portal.current;\n    return () => {\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode);\n      }\n    };\n  }, [tempNode]);\n\n  const _children = (manager == null ? void 0 : manager.zIndex) ? /* @__PURE__ */jsx(Container, {\n    zIndex: manager == null ? void 0 : manager.zIndex,\n    children\n  }) : children;\n\n  return portal.current ? createPortal( /* @__PURE__ */jsx(PortalContextProvider, {\n    value: portal.current,\n    children: _children\n  }), portal.current) : /* @__PURE__ */jsx(\"span\", {\n    ref: el => {\n      if (el) setTempNode(el);\n    }\n  });\n};\n\nvar ContainerPortal = props => {\n  const {\n    children,\n    containerRef,\n    appendToParentPortal\n  } = props;\n  const containerEl = containerRef.current;\n  const host = containerEl != null ? containerEl : typeof window !== \"undefined\" ? document.body : void 0;\n  const portal = useMemo(() => {\n    const node = containerEl == null ? void 0 : containerEl.ownerDocument.createElement(\"div\");\n    if (node) node.className = PORTAL_CLASSNAME;\n    return node;\n  }, [containerEl]);\n  const [, forceUpdate] = useState({});\n  useSafeLayoutEffect(() => forceUpdate({}), []);\n  useSafeLayoutEffect(() => {\n    if (!portal || !host) return;\n    host.appendChild(portal);\n    return () => {\n      host.removeChild(portal);\n    };\n  }, [portal, host]);\n\n  if (host && portal) {\n    return createPortal( /* @__PURE__ */jsx(PortalContextProvider, {\n      value: appendToParentPortal ? portal : null,\n      children\n    }), portal);\n  }\n\n  return null;\n};\n\nfunction Portal(props) {\n  const portalProps = {\n    appendToParentPortal: true,\n    ...props\n  };\n  const {\n    containerRef,\n    ...rest\n  } = portalProps;\n  return containerRef ? /* @__PURE__ */jsx(ContainerPortal, {\n    containerRef,\n    ...rest\n  }) : /* @__PURE__ */jsx(DefaultPortal, { ...rest\n  });\n}\n\nPortal.className = PORTAL_CLASSNAME;\nPortal.selector = PORTAL_SELECTOR;\nPortal.displayName = \"Portal\";\nexport { Portal };","map":{"version":3,"mappings":"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","names":["useSafeLayoutEffect","createContext","createPortal","useEffect","useMemo","useRef","useState","PortalContextProvider","usePortalContext","strict","name","PORTAL_CLASSNAME","PORTAL_SELECTOR","Container","props","className","style","position","zIndex","top","left","right","children","DefaultPortal","appendToParentPortal","tempNode","setTempNode","portal","forceUpdate","parentPortal","manager","usePortalManager","doc","ownerDocument","host","body","current","createElement","appendChild","portalNode","contains","removeChild","_children","value","ref","el","ContainerPortal","containerRef","containerEl","window","document","node","Portal","portalProps","rest","selector","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\portal\\src\\portal.tsx"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { createContext } from \"@chakra-ui/react-context\"\nimport { createPortal } from \"react-dom\"\nimport { usePortalManager } from \"./portal-manager\"\nimport { useEffect, useMemo, useRef, useState } from \"react\"\n\ntype PortalContext = HTMLDivElement | null\n\nconst [PortalContextProvider, usePortalContext] = createContext<PortalContext>({\n  strict: false,\n  name: \"PortalContext\",\n})\n\nconst PORTAL_CLASSNAME = \"chakra-portal\"\nconst PORTAL_SELECTOR = `.chakra-portal`\n\nconst Container = (props: React.PropsWithChildren<{ zIndex: number }>) => (\n  <div\n    className=\"chakra-portal-zIndex\"\n    style={{\n      position: \"absolute\",\n      zIndex: props.zIndex,\n      top: 0,\n      left: 0,\n      right: 0,\n      // NB: Don't add `bottom: 0`, it makes the entire app unusable\n      // @see https://github.com/chakra-ui/chakra-ui/issues/3201\n    }}\n  >\n    {props.children}\n  </div>\n)\n\n/**\n * Portal that uses `document.body` as container\n */\nconst DefaultPortal = (\n  props: React.PropsWithChildren<{ appendToParentPortal?: boolean }>,\n) => {\n  const { appendToParentPortal, children } = props\n\n  const [tempNode, setTempNode] = useState<HTMLElement | null>(null)\n  const portal = useRef<HTMLDivElement | null>(null)\n\n  const [, forceUpdate] = useState({})\n  useEffect(() => forceUpdate({}), [])\n\n  const parentPortal = usePortalContext()\n  const manager = usePortalManager()\n\n  useSafeLayoutEffect(() => {\n    if (!tempNode) return\n\n    const doc = tempNode.ownerDocument\n    const host = appendToParentPortal ? parentPortal ?? doc.body : doc.body\n\n    if (!host) return\n\n    portal.current = doc.createElement(\"div\")\n    portal.current.className = PORTAL_CLASSNAME\n\n    host.appendChild(portal.current)\n    forceUpdate({})\n\n    const portalNode = portal.current\n    return () => {\n      if (host.contains(portalNode)) {\n        host.removeChild(portalNode)\n      }\n    }\n  }, [tempNode])\n\n  const _children = manager?.zIndex ? (\n    <Container zIndex={manager?.zIndex}>{children}</Container>\n  ) : (\n    children\n  )\n\n  return portal.current ? (\n    createPortal(\n      <PortalContextProvider value={portal.current}>\n        {_children}\n      </PortalContextProvider>,\n      portal.current,\n    )\n  ) : (\n    <span\n      ref={(el) => {\n        if (el) setTempNode(el)\n      }}\n    />\n  )\n}\n\ninterface ContainerPortalProps extends React.PropsWithChildren<{}> {\n  containerRef: React.RefObject<HTMLElement | null>\n  /**\n   * @default false\n   */\n  appendToParentPortal?: boolean\n}\n\n/**\n * Portal that uses a custom container\n */\nconst ContainerPortal = (props: ContainerPortalProps) => {\n  const { children, containerRef, appendToParentPortal } = props\n  const containerEl = containerRef.current\n  const host =\n    containerEl ?? (typeof window !== \"undefined\" ? document.body : undefined)\n\n  const portal = useMemo(() => {\n    const node = containerEl?.ownerDocument.createElement(\"div\")\n    if (node) node.className = PORTAL_CLASSNAME\n    return node\n  }, [containerEl])\n\n  const [, forceUpdate] = useState({})\n  useSafeLayoutEffect(() => forceUpdate({}), [])\n\n  useSafeLayoutEffect(() => {\n    if (!portal || !host) return\n    host.appendChild(portal)\n    return () => {\n      host.removeChild(portal)\n    }\n  }, [portal, host])\n\n  if (host && portal) {\n    return createPortal(\n      <PortalContextProvider value={appendToParentPortal ? portal : null}>\n        {children}\n      </PortalContextProvider>,\n      portal,\n    )\n  }\n\n  return null\n}\n\nexport interface PortalProps {\n  /**\n   * The `ref` to the component where the portal will be attached to.\n   */\n  containerRef?: React.RefObject<HTMLElement | null>\n  /**\n   * The content or node you'll like to portal\n   */\n  children: React.ReactNode\n  /**\n   * If `true`, the portal will check if it is within a parent portal\n   * and append itself to the parent's portal node.\n   * This provides nesting for portals.\n   *\n   * If `false`, the portal will always append to `document.body`\n   * regardless of nesting. It is used to opt out of portal nesting.\n   *\n   * @default true\n   */\n  appendToParentPortal?: boolean\n}\n\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/portal\n */\n\nexport function Portal(props: PortalProps) {\n  const portalProps: PortalProps = {\n    appendToParentPortal: true,\n    ...props,\n  }\n\n  const { containerRef, ...rest } = portalProps\n  return containerRef ? (\n    <ContainerPortal containerRef={containerRef} {...rest} />\n  ) : (\n    <DefaultPortal {...rest} />\n  )\n}\n\nPortal.className = PORTAL_CLASSNAME\nPortal.selector = PORTAL_SELECTOR\n\nPortal.displayName = \"Portal\"\n"]},"metadata":{},"sourceType":"module"}