{"ast":null,"code":"'use client';\n\nimport { Button } from \"./chunk-UVUR7MCU.mjs\"; // src/icon-button.tsx\n\nimport { forwardRef } from \"@chakra-ui/system\";\nimport { cloneElement, isValidElement } from \"react\";\nimport { jsx } from \"react/jsx-runtime\";\nvar IconButton = forwardRef((props, ref) => {\n  const {\n    icon,\n    children,\n    isRound,\n    \"aria-label\": ariaLabel,\n    ...rest\n  } = props;\n  const element = icon || children;\n\n  const _children = isValidElement(element) ? cloneElement(element, {\n    \"aria-hidden\": true,\n    focusable: false\n  }) : null;\n\n  return /* @__PURE__ */jsx(Button, {\n    padding: \"0\",\n    borderRadius: isRound ? \"full\" : void 0,\n    ref,\n    \"aria-label\": ariaLabel,\n    ...rest,\n    children: _children\n  });\n});\nIconButton.displayName = \"IconButton\";\nexport { IconButton };","map":{"version":3,"mappings":";;;;AAAA,SAASA,UAAT,QAA2B,mBAA3B;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,OAA7C;AAmDM;AAhBC,IAAMC,aAAaH,WACxB,CAACI,KAAD,EAAQC,GAAR,KAAgB;EACd,MAAM;IAAEC,IAAF;IAAQC,QAAR;IAAkBC,OAAlB;IAA2B,cAAcC,SAAzC;IAAoD,GAAGC;EAAvD,IAAgEN,KAAtE;EAKA,MAAMO,UAAUL,QAAQC,QAAxB;;EACA,MAAMK,YAAYV,eAAeS,OAAf,IACdV,aAAaU,OAAb,EAA6B;IAC3B,eAAe,IADY;IAE3BE,WAAW;EAFgB,CAA7B,CADc,GAKd,IALJ;;EAOA,OACE,mBAACC,MAAD,EAAC;IACCC,SAAQ,GADT;IAECC,cAAcR,UAAU,MAAV,GAAmB,MAFlC;IAGCH,GAHD;IAIC,cAAYI,SAJb;IAKE,GAAGC,IALL;IAOEH;EAPF,CAAD,CADF;AAWF,CA1BwB,CAAnB;AA6BPJ,WAAWc,WAAX,GAAyB,YAAzB","names":["forwardRef","cloneElement","isValidElement","IconButton","props","ref","icon","children","isRound","ariaLabel","rest","element","_children","focusable","Button","padding","borderRadius","displayName"],"sources":["C:\\Purwadhika\\JCWD Bandung\\4. REAL PROJECT\\JCWD0108-03\\node_modules\\@chakra-ui\\button\\src\\icon-button.tsx"],"sourcesContent":["import { forwardRef } from \"@chakra-ui/system\"\nimport { cloneElement, isValidElement } from \"react\"\nimport { Button, ButtonProps } from \"./button\"\n\ntype OmittedProps =\n  | \"leftIcon\"\n  | \"rightIcon\"\n  | \"loadingText\"\n  | \"iconSpacing\"\n  | \"spinnerPlacement\"\n\ninterface BaseButtonProps extends Omit<ButtonProps, OmittedProps> {}\n\nexport interface IconButtonProps extends BaseButtonProps {\n  /**\n   * The icon to be used in the button.\n   * @type React.ReactElement\n   */\n  icon?: React.ReactElement\n  /**\n   * If `true`, the button will be perfectly round. Else, it'll be slightly round\n   *\n   * @default false\n   */\n  isRound?: boolean\n  /**\n   * A11y: A label that describes the button\n   */\n  \"aria-label\": string\n}\n\n/**\n * Icon button renders an icon within a button.\n *\n * @see Docs https://chakra-ui.com/docs/components/icon-button\n */\nexport const IconButton = forwardRef<IconButtonProps, \"button\">(\n  (props, ref) => {\n    const { icon, children, isRound, \"aria-label\": ariaLabel, ...rest } = props\n\n    /**\n     * Passing the icon as prop or children should work\n     */\n    const element = icon || children\n    const _children = isValidElement(element)\n      ? cloneElement(element as any, {\n          \"aria-hidden\": true,\n          focusable: false,\n        })\n      : null\n\n    return (\n      <Button\n        padding=\"0\"\n        borderRadius={isRound ? \"full\" : undefined}\n        ref={ref}\n        aria-label={ariaLabel}\n        {...rest}\n      >\n        {_children}\n      </Button>\n    )\n  },\n)\n\nIconButton.displayName = \"IconButton\"\n"]},"metadata":{},"sourceType":"module"}